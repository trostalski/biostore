// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              Int               @id @default(autoincrement())
  first_name      String
  last_name       String
  interests       String?
  expertise       String?
  lab_id          Int
  lab             lab?              @relation(fields: [lab_id], references: [id])
  institution_id  Int?
  institution     institution?      @relation(fields: [institution_id], references: [id])
  created_methods method[]
  safed_method    user_on_methods[]
  reagents        reagent[]
  deviced         device[]
}

model user_on_methods {
  user      user   @relation(fields: [user_id], references: [id])
  user_id   Int
  method    method @relation(fields: [method_id], references: [id])
  method_id Int

  @@id([user_id, method_id])
}

model category {
  id      Int      @id @default(autoincrement())
  name    String
  methods method[]
}

model reagent {
  id                  Int                   @id @default(autoincrement())
  name                String
  company             String
  product_id          String
  user                user?                 @relation(fields: [user_id], references: [id])
  user_id             Int?
  method              method[]
  reagents_on_methods reagents_on_methods[]
}

model device {
  id                 Int                  @id @default(autoincrement())
  name               String
  company            String
  product_id         String
  user               user?                @relation(fields: [user_id], references: [id])
  user_id            Int?
  devices_on_methods devices_on_methods[]
}

model method {
  id                  Int                   @id @default(autoincrement())
  name                String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  duration            String?
  description         String?
  sections            String[]
  comments            String[]
  number_of_samples   Int?
  creator             user?                 @relation(fields: [creator_id], references: [id])
  creator_id          Int?
  user                user_on_methods[]
  category            category?             @relation(fields: [category_id], references: [id])
  category_id         Int?
  reagents            reagent[]
  reagents_on_methods reagents_on_methods[]
  devices_on_methods  devices_on_methods[]
  method_samples      method_sample[]
  method_steps        method_step[]
  method_reagents     method_reagent[]
}

model reagents_on_methods {
  reagent    reagent @relation(fields: [reagent_id], references: [id])
  reagent_id Int
  method     method  @relation(fields: [method_id], references: [id])
  method_id  Int

  @@id([reagent_id, method_id])
}

model devices_on_methods {
  devices   device @relation(fields: [device_id], references: [id])
  device_id Int
  method    method @relation(fields: [method_id], references: [id])
  method_id Int

  @@id([device_id, method_id])
}

model lab {
  id          Int    @id @default(autoincrement())
  name        String
  institution String
  member      user[]
}

model institution {
  id     Int    @id @default(autoincrement())
  name   String
  member user[]
}

model method_step {
  id          Int     @id @default(autoincrement())
  description String
  temperatur  String?
  duration    String?
  link        String?
  method      method? @relation(fields: [method_id], references: [id])
  method_id   Int?
}

model method_reagent {
  id        Int     @id @default(autoincrement())
  amount    String?
  method    method? @relation(fields: [method_id], references: [id])
  method_id Int?
}

model method_sample {
  id         Int      @id @default(autoincrement())
  conditions String[]
  method     method?  @relation(fields: [method_id], references: [id])
  method_id  Int?
}
