// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  password        String
  first_name      String
  last_name       String
  expertise       String?
  categories      category[]
  created_methods method[]
  safed_method    user_on_methods[]
  reagents        reagent[]
  devices         device[]
}

model user_on_methods {
  user      user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   Int
  method    method @relation(fields: [method_id], references: [id], onDelete: Cascade)
  method_id Int

  @@id([user_id, method_id])
}

model category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  methods method[]
  user    user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id Int
}

model reagent {
  id         Int                   @id @default(autoincrement())
  name       String
  company    String
  product_id String?
  link       String?
  type       String?
  user       user                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  methods    reagents_on_methods[]
}

model device {
  id         Int                  @id @default(autoincrement())
  name       String
  company    String
  product_id String?
  link       String?
  type       String?
  user       user                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    Int
  methods    devices_on_methods[]
}

model method {
  id                Int                   @id @default(autoincrement())
  name              String
  created_at        DateTime              @default(now())
  updated_at        DateTime              @updatedAt
  duration          String?
  description       String?
  sections          String[]
  number_of_samples Int?
  creator           user                  @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  creator_id        Int
  user              user_on_methods[]
  category          category?             @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category_id       Int?
  reagents          reagents_on_methods[]
  devices           devices_on_methods[]
  method_samples    method_sample[]
  method_steps      method_step[]
  comments          comment[]
}

model comment {
  id           Int      @id @default(autoincrement())
  content      String
  y_position   Int
  x_position   Int?
  is_important Boolean? @default(false)
  method       method   @relation(fields: [method_id], references: [id], onDelete: Cascade)
  method_id    Int
}

model reagents_on_methods {
  reagent    reagent @relation(fields: [reagent_id], references: [id], onDelete: Cascade)
  reagent_id Int
  method     method  @relation(fields: [method_id], references: [id], onDelete: Cascade)
  method_id  Int
  amount     String?

  @@id([reagent_id, method_id])
}

model devices_on_methods {
  device    device @relation(fields: [device_id], references: [id], onDelete: Cascade)
  device_id Int
  method    method @relation(fields: [method_id], references: [id], onDelete: Cascade)
  method_id Int

  @@id([device_id, method_id])
}

model method_step {
  id          Int     @id @default(autoincrement())
  number      Int
  day         String
  time        String
  description String
  temperature String?
  duration    String?
  link        String?
  method      method? @relation(fields: [method_id], references: [id], onDelete: Cascade)
  method_id   Int?
}

model method_sample {
  id               Int     @id @default(autoincrement())
  reference_number Int
  name             String?
  conditions       Json?
  method           method  @relation(fields: [method_id], references: [id], onDelete: Cascade)
  method_id        Int
}
