
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model user
 * 
 */
export type user = {
  id: number
  username: string
  password: string
  first_name: string
  last_name: string
  expertise: string | null
}

/**
 * Model user_on_methods
 * 
 */
export type user_on_methods = {
  user_id: number
  method_id: number
}

/**
 * Model category
 * 
 */
export type category = {
  id: number
  name: string
  user_id: number
}

/**
 * Model reagent
 * 
 */
export type reagent = {
  id: number
  name: string
  company: string
  product_id: string | null
  link: string | null
  type: string | null
  user_id: number
}

/**
 * Model device
 * 
 */
export type device = {
  id: number
  name: string
  company: string
  product_id: string | null
  link: string | null
  type: string | null
  user_id: number
}

/**
 * Model method
 * 
 */
export type method = {
  id: number
  name: string
  created_at: Date
  updated_at: Date
  duration: string | null
  description: string | null
  sections: string[]
  number_of_samples: number | null
  creator_id: number
  category_id: number | null
}

/**
 * Model comment
 * 
 */
export type comment = {
  id: number
  content: string
  y_position: number
  x_position: number | null
  is_important: boolean | null
  method_id: number
}

/**
 * Model reagents_on_methods
 * 
 */
export type reagents_on_methods = {
  reagent_id: number
  method_id: number
  amount: string | null
}

/**
 * Model devices_on_methods
 * 
 */
export type devices_on_methods = {
  device_id: number
  method_id: number
}

/**
 * Model method_step
 * 
 */
export type method_step = {
  id: number
  number: number
  day: string
  time: string
  description: string
  temperature: string | null
  duration: string | null
  link: string | null
  method_id: number | null
}

/**
 * Model method_sample
 * 
 */
export type method_sample = {
  id: number
  reference_number: number
  name: string | null
  conditions: Prisma.JsonValue | null
  method_id: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.user_on_methods`: Exposes CRUD operations for the **user_on_methods** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_on_methods
    * const user_on_methods = await prisma.user_on_methods.findMany()
    * ```
    */
  get user_on_methods(): Prisma.user_on_methodsDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<GlobalReject>;

  /**
   * `prisma.reagent`: Exposes CRUD operations for the **reagent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reagents
    * const reagents = await prisma.reagent.findMany()
    * ```
    */
  get reagent(): Prisma.reagentDelegate<GlobalReject>;

  /**
   * `prisma.device`: Exposes CRUD operations for the **device** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devices
    * const devices = await prisma.device.findMany()
    * ```
    */
  get device(): Prisma.deviceDelegate<GlobalReject>;

  /**
   * `prisma.method`: Exposes CRUD operations for the **method** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Methods
    * const methods = await prisma.method.findMany()
    * ```
    */
  get method(): Prisma.methodDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.commentDelegate<GlobalReject>;

  /**
   * `prisma.reagents_on_methods`: Exposes CRUD operations for the **reagents_on_methods** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reagents_on_methods
    * const reagents_on_methods = await prisma.reagents_on_methods.findMany()
    * ```
    */
  get reagents_on_methods(): Prisma.reagents_on_methodsDelegate<GlobalReject>;

  /**
   * `prisma.devices_on_methods`: Exposes CRUD operations for the **devices_on_methods** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Devices_on_methods
    * const devices_on_methods = await prisma.devices_on_methods.findMany()
    * ```
    */
  get devices_on_methods(): Prisma.devices_on_methodsDelegate<GlobalReject>;

  /**
   * `prisma.method_step`: Exposes CRUD operations for the **method_step** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Method_steps
    * const method_steps = await prisma.method_step.findMany()
    * ```
    */
  get method_step(): Prisma.method_stepDelegate<GlobalReject>;

  /**
   * `prisma.method_sample`: Exposes CRUD operations for the **method_sample** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Method_samples
    * const method_samples = await prisma.method_sample.findMany()
    * ```
    */
  get method_sample(): Prisma.method_sampleDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Extensions
   */
  export type Extension = runtime.Extension 

  /**
   * Prisma Client JS version: 4.5.0
   * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    user: 'user',
    user_on_methods: 'user_on_methods',
    category: 'category',
    reagent: 'reagent',
    device: 'device',
    method: 'method',
    comment: 'comment',
    reagents_on_methods: 'reagents_on_methods',
    devices_on_methods: 'devices_on_methods',
    method_step: 'method_step',
    method_sample: 'method_sample'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    categories: number
    created_methods: number
    safed_method: number
    reagents: number
    devices: number
  }

  export type UserCountOutputTypeSelect = {
    categories?: boolean
    created_methods?: boolean
    safed_method?: boolean
    reagents?: boolean
    devices?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    methods: number
  }

  export type CategoryCountOutputTypeSelect = {
    methods?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoryCountOutputType
    : S extends undefined
    ? never
    : S extends CategoryCountOutputTypeArgs
    ?'include' extends U
    ? CategoryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
    : CategoryCountOutputType
  : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type ReagentCountOutputType
   */


  export type ReagentCountOutputType = {
    methods: number
  }

  export type ReagentCountOutputTypeSelect = {
    methods?: boolean
  }

  export type ReagentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ReagentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ReagentCountOutputType
    : S extends undefined
    ? never
    : S extends ReagentCountOutputTypeArgs
    ?'include' extends U
    ? ReagentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ReagentCountOutputType ? ReagentCountOutputType[P] : never
  } 
    : ReagentCountOutputType
  : ReagentCountOutputType




  // Custom InputTypes

  /**
   * ReagentCountOutputType without action
   */
  export type ReagentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ReagentCountOutputType
     * 
    **/
    select?: ReagentCountOutputTypeSelect | null
  }



  /**
   * Count Type DeviceCountOutputType
   */


  export type DeviceCountOutputType = {
    methods: number
  }

  export type DeviceCountOutputTypeSelect = {
    methods?: boolean
  }

  export type DeviceCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DeviceCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DeviceCountOutputType
    : S extends undefined
    ? never
    : S extends DeviceCountOutputTypeArgs
    ?'include' extends U
    ? DeviceCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof DeviceCountOutputType ? DeviceCountOutputType[P] : never
  } 
    : DeviceCountOutputType
  : DeviceCountOutputType




  // Custom InputTypes

  /**
   * DeviceCountOutputType without action
   */
  export type DeviceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DeviceCountOutputType
     * 
    **/
    select?: DeviceCountOutputTypeSelect | null
  }



  /**
   * Count Type MethodCountOutputType
   */


  export type MethodCountOutputType = {
    user: number
    reagents: number
    devices: number
    method_samples: number
    method_steps: number
    comments: number
  }

  export type MethodCountOutputTypeSelect = {
    user?: boolean
    reagents?: boolean
    devices?: boolean
    method_samples?: boolean
    method_steps?: boolean
    comments?: boolean
  }

  export type MethodCountOutputTypeGetPayload<
    S extends boolean | null | undefined | MethodCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? MethodCountOutputType
    : S extends undefined
    ? never
    : S extends MethodCountOutputTypeArgs
    ?'include' extends U
    ? MethodCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof MethodCountOutputType ? MethodCountOutputType[P] : never
  } 
    : MethodCountOutputType
  : MethodCountOutputType




  // Custom InputTypes

  /**
   * MethodCountOutputType without action
   */
  export type MethodCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MethodCountOutputType
     * 
    **/
    select?: MethodCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    first_name: string | null
    last_name: string | null
    expertise: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    first_name: string | null
    last_name: string | null
    expertise: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    first_name: number
    last_name: number
    expertise: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    first_name?: true
    last_name?: true
    expertise?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    first_name?: true
    last_name?: true
    expertise?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    first_name?: true
    last_name?: true
    expertise?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    username: string
    password: string
    first_name: string
    last_name: string
    expertise: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
    first_name?: boolean
    last_name?: boolean
    expertise?: boolean
    categories?: boolean | categoryFindManyArgs
    created_methods?: boolean | methodFindManyArgs
    safed_method?: boolean | user_on_methodsFindManyArgs
    reagents?: boolean | reagentFindManyArgs
    devices?: boolean | deviceFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userInclude = {
    categories?: boolean | categoryFindManyArgs
    created_methods?: boolean | methodFindManyArgs
    safed_method?: boolean | user_on_methodsFindManyArgs
    reagents?: boolean | reagentFindManyArgs
    devices?: boolean | deviceFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]:
        P extends 'categories' ? Array < categoryGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'created_methods' ? Array < methodGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'safed_method' ? Array < user_on_methodsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'reagents' ? Array < reagentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'devices' ? Array < deviceGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'categories' ? Array < categoryGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'created_methods' ? Array < methodGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'safed_method' ? Array < user_on_methodsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'reagents' ? Array < reagentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'devices' ? Array < deviceGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof user ? user[P] : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null, null>, Prisma__userClient<userGetPayload<T> | null, null>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null, null>, Prisma__userClient<userGetPayload<T> | null, null>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    categories<T extends categoryFindManyArgs = {}>(args?: Subset<T, categoryFindManyArgs>): CheckSelect<T, PrismaPromise<Array<category>| Null>, PrismaPromise<Array<categoryGetPayload<T>>| Null>>;

    created_methods<T extends methodFindManyArgs = {}>(args?: Subset<T, methodFindManyArgs>): CheckSelect<T, PrismaPromise<Array<method>| Null>, PrismaPromise<Array<methodGetPayload<T>>| Null>>;

    safed_method<T extends user_on_methodsFindManyArgs = {}>(args?: Subset<T, user_on_methodsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_on_methods>| Null>, PrismaPromise<Array<user_on_methodsGetPayload<T>>| Null>>;

    reagents<T extends reagentFindManyArgs = {}>(args?: Subset<T, reagentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<reagent>| Null>, PrismaPromise<Array<reagentGetPayload<T>>| Null>>;

    devices<T extends deviceFindManyArgs = {}>(args?: Subset<T, deviceFindManyArgs>): CheckSelect<T, PrismaPromise<Array<device>| Null>, PrismaPromise<Array<deviceGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user base type for findUnique actions
   */
  export type userFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     * 
    **/
    where: userWhereUniqueInput
  }

  /**
   * user: findUnique
   */
  export interface userFindUniqueArgs extends userFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user base type for findFirst actions
   */
  export type userFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * user: findFirst
   */
  export interface userFindFirstArgs extends userFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
     * 
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
     * 
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     * 
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     * 
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user: findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs = userFindUniqueArgsBase
      

  /**
   * user: findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs = userFindFirstArgsBase
      

  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
  }



  /**
   * Model user_on_methods
   */


  export type AggregateUser_on_methods = {
    _count: User_on_methodsCountAggregateOutputType | null
    _avg: User_on_methodsAvgAggregateOutputType | null
    _sum: User_on_methodsSumAggregateOutputType | null
    _min: User_on_methodsMinAggregateOutputType | null
    _max: User_on_methodsMaxAggregateOutputType | null
  }

  export type User_on_methodsAvgAggregateOutputType = {
    user_id: number | null
    method_id: number | null
  }

  export type User_on_methodsSumAggregateOutputType = {
    user_id: number | null
    method_id: number | null
  }

  export type User_on_methodsMinAggregateOutputType = {
    user_id: number | null
    method_id: number | null
  }

  export type User_on_methodsMaxAggregateOutputType = {
    user_id: number | null
    method_id: number | null
  }

  export type User_on_methodsCountAggregateOutputType = {
    user_id: number
    method_id: number
    _all: number
  }


  export type User_on_methodsAvgAggregateInputType = {
    user_id?: true
    method_id?: true
  }

  export type User_on_methodsSumAggregateInputType = {
    user_id?: true
    method_id?: true
  }

  export type User_on_methodsMinAggregateInputType = {
    user_id?: true
    method_id?: true
  }

  export type User_on_methodsMaxAggregateInputType = {
    user_id?: true
    method_id?: true
  }

  export type User_on_methodsCountAggregateInputType = {
    user_id?: true
    method_id?: true
    _all?: true
  }

  export type User_on_methodsAggregateArgs = {
    /**
     * Filter which user_on_methods to aggregate.
     * 
    **/
    where?: user_on_methodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_on_methods to fetch.
     * 
    **/
    orderBy?: Enumerable<user_on_methodsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: user_on_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_on_methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_on_methods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_on_methods
    **/
    _count?: true | User_on_methodsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_on_methodsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_on_methodsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_on_methodsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_on_methodsMaxAggregateInputType
  }

  export type GetUser_on_methodsAggregateType<T extends User_on_methodsAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_on_methods]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_on_methods[P]>
      : GetScalarType<T[P], AggregateUser_on_methods[P]>
  }




  export type User_on_methodsGroupByArgs = {
    where?: user_on_methodsWhereInput
    orderBy?: Enumerable<user_on_methodsOrderByWithAggregationInput>
    by: Array<User_on_methodsScalarFieldEnum>
    having?: user_on_methodsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_on_methodsCountAggregateInputType | true
    _avg?: User_on_methodsAvgAggregateInputType
    _sum?: User_on_methodsSumAggregateInputType
    _min?: User_on_methodsMinAggregateInputType
    _max?: User_on_methodsMaxAggregateInputType
  }


  export type User_on_methodsGroupByOutputType = {
    user_id: number
    method_id: number
    _count: User_on_methodsCountAggregateOutputType | null
    _avg: User_on_methodsAvgAggregateOutputType | null
    _sum: User_on_methodsSumAggregateOutputType | null
    _min: User_on_methodsMinAggregateOutputType | null
    _max: User_on_methodsMaxAggregateOutputType | null
  }

  type GetUser_on_methodsGroupByPayload<T extends User_on_methodsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<User_on_methodsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_on_methodsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_on_methodsGroupByOutputType[P]>
            : GetScalarType<T[P], User_on_methodsGroupByOutputType[P]>
        }
      >
    >


  export type user_on_methodsSelect = {
    user?: boolean | userArgs
    user_id?: boolean
    method?: boolean | methodArgs
    method_id?: boolean
  }

  export type user_on_methodsInclude = {
    user?: boolean | userArgs
    method?: boolean | methodArgs
  }

  export type user_on_methodsGetPayload<
    S extends boolean | null | undefined | user_on_methodsArgs,
    U = keyof S
      > = S extends true
        ? user_on_methods
    : S extends undefined
    ? never
    : S extends user_on_methodsArgs | user_on_methodsFindManyArgs
    ?'include' extends U
    ? user_on_methods  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? userGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'method' ? methodGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? userGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'method' ? methodGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof user_on_methods ? user_on_methods[P] : never
  } 
    : user_on_methods
  : user_on_methods


  type user_on_methodsCountArgs = Merge<
    Omit<user_on_methodsFindManyArgs, 'select' | 'include'> & {
      select?: User_on_methodsCountAggregateInputType | true
    }
  >

  export interface user_on_methodsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User_on_methods that matches the filter.
     * @param {user_on_methodsFindUniqueArgs} args - Arguments to find a User_on_methods
     * @example
     * // Get one User_on_methods
     * const user_on_methods = await prisma.user_on_methods.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends user_on_methodsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, user_on_methodsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user_on_methods'> extends True ? CheckSelect<T, Prisma__user_on_methodsClient<user_on_methods>, Prisma__user_on_methodsClient<user_on_methodsGetPayload<T>>> : CheckSelect<T, Prisma__user_on_methodsClient<user_on_methods | null, null>, Prisma__user_on_methodsClient<user_on_methodsGetPayload<T> | null, null>>

    /**
     * Find the first User_on_methods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_on_methodsFindFirstArgs} args - Arguments to find a User_on_methods
     * @example
     * // Get one User_on_methods
     * const user_on_methods = await prisma.user_on_methods.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends user_on_methodsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, user_on_methodsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user_on_methods'> extends True ? CheckSelect<T, Prisma__user_on_methodsClient<user_on_methods>, Prisma__user_on_methodsClient<user_on_methodsGetPayload<T>>> : CheckSelect<T, Prisma__user_on_methodsClient<user_on_methods | null, null>, Prisma__user_on_methodsClient<user_on_methodsGetPayload<T> | null, null>>

    /**
     * Find zero or more User_on_methods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_on_methodsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_on_methods
     * const user_on_methods = await prisma.user_on_methods.findMany()
     * 
     * // Get first 10 User_on_methods
     * const user_on_methods = await prisma.user_on_methods.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const user_on_methodsWithUser_idOnly = await prisma.user_on_methods.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends user_on_methodsFindManyArgs>(
      args?: SelectSubset<T, user_on_methodsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user_on_methods>>, PrismaPromise<Array<user_on_methodsGetPayload<T>>>>

    /**
     * Create a User_on_methods.
     * @param {user_on_methodsCreateArgs} args - Arguments to create a User_on_methods.
     * @example
     * // Create one User_on_methods
     * const User_on_methods = await prisma.user_on_methods.create({
     *   data: {
     *     // ... data to create a User_on_methods
     *   }
     * })
     * 
    **/
    create<T extends user_on_methodsCreateArgs>(
      args: SelectSubset<T, user_on_methodsCreateArgs>
    ): CheckSelect<T, Prisma__user_on_methodsClient<user_on_methods>, Prisma__user_on_methodsClient<user_on_methodsGetPayload<T>>>

    /**
     * Create many User_on_methods.
     *     @param {user_on_methodsCreateManyArgs} args - Arguments to create many User_on_methods.
     *     @example
     *     // Create many User_on_methods
     *     const user_on_methods = await prisma.user_on_methods.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends user_on_methodsCreateManyArgs>(
      args?: SelectSubset<T, user_on_methodsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User_on_methods.
     * @param {user_on_methodsDeleteArgs} args - Arguments to delete one User_on_methods.
     * @example
     * // Delete one User_on_methods
     * const User_on_methods = await prisma.user_on_methods.delete({
     *   where: {
     *     // ... filter to delete one User_on_methods
     *   }
     * })
     * 
    **/
    delete<T extends user_on_methodsDeleteArgs>(
      args: SelectSubset<T, user_on_methodsDeleteArgs>
    ): CheckSelect<T, Prisma__user_on_methodsClient<user_on_methods>, Prisma__user_on_methodsClient<user_on_methodsGetPayload<T>>>

    /**
     * Update one User_on_methods.
     * @param {user_on_methodsUpdateArgs} args - Arguments to update one User_on_methods.
     * @example
     * // Update one User_on_methods
     * const user_on_methods = await prisma.user_on_methods.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends user_on_methodsUpdateArgs>(
      args: SelectSubset<T, user_on_methodsUpdateArgs>
    ): CheckSelect<T, Prisma__user_on_methodsClient<user_on_methods>, Prisma__user_on_methodsClient<user_on_methodsGetPayload<T>>>

    /**
     * Delete zero or more User_on_methods.
     * @param {user_on_methodsDeleteManyArgs} args - Arguments to filter User_on_methods to delete.
     * @example
     * // Delete a few User_on_methods
     * const { count } = await prisma.user_on_methods.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends user_on_methodsDeleteManyArgs>(
      args?: SelectSubset<T, user_on_methodsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_on_methodsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_on_methods
     * const user_on_methods = await prisma.user_on_methods.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends user_on_methodsUpdateManyArgs>(
      args: SelectSubset<T, user_on_methodsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User_on_methods.
     * @param {user_on_methodsUpsertArgs} args - Arguments to update or create a User_on_methods.
     * @example
     * // Update or create a User_on_methods
     * const user_on_methods = await prisma.user_on_methods.upsert({
     *   create: {
     *     // ... data to create a User_on_methods
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_on_methods we want to update
     *   }
     * })
    **/
    upsert<T extends user_on_methodsUpsertArgs>(
      args: SelectSubset<T, user_on_methodsUpsertArgs>
    ): CheckSelect<T, Prisma__user_on_methodsClient<user_on_methods>, Prisma__user_on_methodsClient<user_on_methodsGetPayload<T>>>

    /**
     * Find one User_on_methods that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {user_on_methodsFindUniqueOrThrowArgs} args - Arguments to find a User_on_methods
     * @example
     * // Get one User_on_methods
     * const user_on_methods = await prisma.user_on_methods.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends user_on_methodsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, user_on_methodsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__user_on_methodsClient<user_on_methods>, Prisma__user_on_methodsClient<user_on_methodsGetPayload<T>>>

    /**
     * Find the first User_on_methods that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_on_methodsFindFirstOrThrowArgs} args - Arguments to find a User_on_methods
     * @example
     * // Get one User_on_methods
     * const user_on_methods = await prisma.user_on_methods.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends user_on_methodsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, user_on_methodsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__user_on_methodsClient<user_on_methods>, Prisma__user_on_methodsClient<user_on_methodsGetPayload<T>>>

    /**
     * Count the number of User_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_on_methodsCountArgs} args - Arguments to filter User_on_methods to count.
     * @example
     * // Count the number of User_on_methods
     * const count = await prisma.user_on_methods.count({
     *   where: {
     *     // ... the filter for the User_on_methods we want to count
     *   }
     * })
    **/
    count<T extends user_on_methodsCountArgs>(
      args?: Subset<T, user_on_methodsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_on_methodsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_on_methodsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_on_methodsAggregateArgs>(args: Subset<T, User_on_methodsAggregateArgs>): PrismaPromise<GetUser_on_methodsAggregateType<T>>

    /**
     * Group by User_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_on_methodsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends User_on_methodsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: User_on_methodsGroupByArgs['orderBy'] }
        : { orderBy?: User_on_methodsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, User_on_methodsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_on_methodsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user_on_methods.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__user_on_methodsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | Null>, Prisma__userClient<userGetPayload<T> | Null>>;

    method<T extends methodArgs = {}>(args?: Subset<T, methodArgs>): CheckSelect<T, Prisma__methodClient<method | Null>, Prisma__methodClient<methodGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user_on_methods base type for findUnique actions
   */
  export type user_on_methodsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user_on_methods
     * 
    **/
    select?: user_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_on_methodsInclude | null
    /**
     * Filter, which user_on_methods to fetch.
     * 
    **/
    where: user_on_methodsWhereUniqueInput
  }

  /**
   * user_on_methods: findUnique
   */
  export interface user_on_methodsFindUniqueArgs extends user_on_methodsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_on_methods base type for findFirst actions
   */
  export type user_on_methodsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user_on_methods
     * 
    **/
    select?: user_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_on_methodsInclude | null
    /**
     * Filter, which user_on_methods to fetch.
     * 
    **/
    where?: user_on_methodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_on_methods to fetch.
     * 
    **/
    orderBy?: Enumerable<user_on_methodsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_on_methods.
     * 
    **/
    cursor?: user_on_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_on_methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_on_methods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_on_methods.
     * 
    **/
    distinct?: Enumerable<User_on_methodsScalarFieldEnum>
  }

  /**
   * user_on_methods: findFirst
   */
  export interface user_on_methodsFindFirstArgs extends user_on_methodsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user_on_methods findMany
   */
  export type user_on_methodsFindManyArgs = {
    /**
     * Select specific fields to fetch from the user_on_methods
     * 
    **/
    select?: user_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_on_methodsInclude | null
    /**
     * Filter, which user_on_methods to fetch.
     * 
    **/
    where?: user_on_methodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_on_methods to fetch.
     * 
    **/
    orderBy?: Enumerable<user_on_methodsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_on_methods.
     * 
    **/
    cursor?: user_on_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_on_methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_on_methods.
     * 
    **/
    skip?: number
    distinct?: Enumerable<User_on_methodsScalarFieldEnum>
  }


  /**
   * user_on_methods create
   */
  export type user_on_methodsCreateArgs = {
    /**
     * Select specific fields to fetch from the user_on_methods
     * 
    **/
    select?: user_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_on_methodsInclude | null
    /**
     * The data needed to create a user_on_methods.
     * 
    **/
    data: XOR<user_on_methodsCreateInput, user_on_methodsUncheckedCreateInput>
  }


  /**
   * user_on_methods createMany
   */
  export type user_on_methodsCreateManyArgs = {
    /**
     * The data used to create many user_on_methods.
     * 
    **/
    data: Enumerable<user_on_methodsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user_on_methods update
   */
  export type user_on_methodsUpdateArgs = {
    /**
     * Select specific fields to fetch from the user_on_methods
     * 
    **/
    select?: user_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_on_methodsInclude | null
    /**
     * The data needed to update a user_on_methods.
     * 
    **/
    data: XOR<user_on_methodsUpdateInput, user_on_methodsUncheckedUpdateInput>
    /**
     * Choose, which user_on_methods to update.
     * 
    **/
    where: user_on_methodsWhereUniqueInput
  }


  /**
   * user_on_methods updateMany
   */
  export type user_on_methodsUpdateManyArgs = {
    /**
     * The data used to update user_on_methods.
     * 
    **/
    data: XOR<user_on_methodsUpdateManyMutationInput, user_on_methodsUncheckedUpdateManyInput>
    /**
     * Filter which user_on_methods to update
     * 
    **/
    where?: user_on_methodsWhereInput
  }


  /**
   * user_on_methods upsert
   */
  export type user_on_methodsUpsertArgs = {
    /**
     * Select specific fields to fetch from the user_on_methods
     * 
    **/
    select?: user_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_on_methodsInclude | null
    /**
     * The filter to search for the user_on_methods to update in case it exists.
     * 
    **/
    where: user_on_methodsWhereUniqueInput
    /**
     * In case the user_on_methods found by the `where` argument doesn't exist, create a new user_on_methods with this data.
     * 
    **/
    create: XOR<user_on_methodsCreateInput, user_on_methodsUncheckedCreateInput>
    /**
     * In case the user_on_methods was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<user_on_methodsUpdateInput, user_on_methodsUncheckedUpdateInput>
  }


  /**
   * user_on_methods delete
   */
  export type user_on_methodsDeleteArgs = {
    /**
     * Select specific fields to fetch from the user_on_methods
     * 
    **/
    select?: user_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_on_methodsInclude | null
    /**
     * Filter which user_on_methods to delete.
     * 
    **/
    where: user_on_methodsWhereUniqueInput
  }


  /**
   * user_on_methods deleteMany
   */
  export type user_on_methodsDeleteManyArgs = {
    /**
     * Filter which user_on_methods to delete
     * 
    **/
    where?: user_on_methodsWhereInput
  }


  /**
   * user_on_methods: findUniqueOrThrow
   */
  export type user_on_methodsFindUniqueOrThrowArgs = user_on_methodsFindUniqueArgsBase
      

  /**
   * user_on_methods: findFirstOrThrow
   */
  export type user_on_methodsFindFirstOrThrowArgs = user_on_methodsFindFirstArgsBase
      

  /**
   * user_on_methods without action
   */
  export type user_on_methodsArgs = {
    /**
     * Select specific fields to fetch from the user_on_methods
     * 
    **/
    select?: user_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: user_on_methodsInclude | null
  }



  /**
   * Model category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    user_id: number | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    user_id: number | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    user_id: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    user_id?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    user_id?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    user_id?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which category to aggregate.
     * 
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: categoryWhereInput
    orderBy?: Enumerable<categoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: number
    name: string
    user_id: number
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type categorySelect = {
    id?: boolean
    name?: boolean
    methods?: boolean | methodFindManyArgs
    user?: boolean | userArgs
    user_id?: boolean
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type categoryInclude = {
    methods?: boolean | methodFindManyArgs
    user?: boolean | userArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type categoryGetPayload<
    S extends boolean | null | undefined | categoryArgs,
    U = keyof S
      > = S extends true
        ? category
    : S extends undefined
    ? never
    : S extends categoryArgs | categoryFindManyArgs
    ?'include' extends U
    ? category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'methods' ? Array < methodGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'user' ? userGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'methods' ? Array < methodGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'user' ? userGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof category ? category[P] : never
  } 
    : category
  : category


  type categoryCountArgs = Merge<
    Omit<categoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface categoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, categoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'category'> extends True ? CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>> : CheckSelect<T, Prisma__categoryClient<category | null, null>, Prisma__categoryClient<categoryGetPayload<T> | null, null>>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, categoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'category'> extends True ? CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>> : CheckSelect<T, Prisma__categoryClient<category | null, null>, Prisma__categoryClient<categoryGetPayload<T> | null, null>>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoryFindManyArgs>(
      args?: SelectSubset<T, categoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<category>>, PrismaPromise<Array<categoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends categoryCreateArgs>(
      args: SelectSubset<T, categoryCreateArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {categoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoryCreateManyArgs>(
      args?: SelectSubset<T, categoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends categoryDeleteArgs>(
      args: SelectSubset<T, categoryDeleteArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoryUpdateArgs>(
      args: SelectSubset<T, categoryUpdateArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoryDeleteManyArgs>(
      args?: SelectSubset<T, categoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoryUpdateManyArgs>(
      args: SelectSubset<T, categoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends categoryUpsertArgs>(
      args: SelectSubset<T, categoryUpsertArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Find one Category that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {categoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, categoryFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, categoryFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__categoryClient<category>, Prisma__categoryClient<categoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__categoryClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    methods<T extends methodFindManyArgs = {}>(args?: Subset<T, methodFindManyArgs>): CheckSelect<T, PrismaPromise<Array<method>| Null>, PrismaPromise<Array<methodGetPayload<T>>| Null>>;

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | Null>, Prisma__userClient<userGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * category base type for findUnique actions
   */
  export type categoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the category
     * 
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoryInclude | null
    /**
     * Filter, which category to fetch.
     * 
    **/
    where: categoryWhereUniqueInput
  }

  /**
   * category: findUnique
   */
  export interface categoryFindUniqueArgs extends categoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * category base type for findFirst actions
   */
  export type categoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the category
     * 
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoryInclude | null
    /**
     * Filter, which category to fetch.
     * 
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     * 
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * category: findFirst
   */
  export interface categoryFindFirstArgs extends categoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * category findMany
   */
  export type categoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the category
     * 
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoryInclude | null
    /**
     * Filter, which categories to fetch.
     * 
    **/
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     * 
    **/
    orderBy?: Enumerable<categoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     * 
    **/
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * category create
   */
  export type categoryCreateArgs = {
    /**
     * Select specific fields to fetch from the category
     * 
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoryInclude | null
    /**
     * The data needed to create a category.
     * 
    **/
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }


  /**
   * category createMany
   */
  export type categoryCreateManyArgs = {
    /**
     * The data used to create many categories.
     * 
    **/
    data: Enumerable<categoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * category update
   */
  export type categoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the category
     * 
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoryInclude | null
    /**
     * The data needed to update a category.
     * 
    **/
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
     * 
    **/
    where: categoryWhereUniqueInput
  }


  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs = {
    /**
     * The data used to update categories.
     * 
    **/
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     * 
    **/
    where?: categoryWhereInput
  }


  /**
   * category upsert
   */
  export type categoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the category
     * 
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoryInclude | null
    /**
     * The filter to search for the category to update in case it exists.
     * 
    **/
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
     * 
    **/
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }


  /**
   * category delete
   */
  export type categoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the category
     * 
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoryInclude | null
    /**
     * Filter which category to delete.
     * 
    **/
    where: categoryWhereUniqueInput
  }


  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs = {
    /**
     * Filter which categories to delete
     * 
    **/
    where?: categoryWhereInput
  }


  /**
   * category: findUniqueOrThrow
   */
  export type categoryFindUniqueOrThrowArgs = categoryFindUniqueArgsBase
      

  /**
   * category: findFirstOrThrow
   */
  export type categoryFindFirstOrThrowArgs = categoryFindFirstArgsBase
      

  /**
   * category without action
   */
  export type categoryArgs = {
    /**
     * Select specific fields to fetch from the category
     * 
    **/
    select?: categorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: categoryInclude | null
  }



  /**
   * Model reagent
   */


  export type AggregateReagent = {
    _count: ReagentCountAggregateOutputType | null
    _avg: ReagentAvgAggregateOutputType | null
    _sum: ReagentSumAggregateOutputType | null
    _min: ReagentMinAggregateOutputType | null
    _max: ReagentMaxAggregateOutputType | null
  }

  export type ReagentAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type ReagentSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type ReagentMinAggregateOutputType = {
    id: number | null
    name: string | null
    company: string | null
    product_id: string | null
    link: string | null
    type: string | null
    user_id: number | null
  }

  export type ReagentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    company: string | null
    product_id: string | null
    link: string | null
    type: string | null
    user_id: number | null
  }

  export type ReagentCountAggregateOutputType = {
    id: number
    name: number
    company: number
    product_id: number
    link: number
    type: number
    user_id: number
    _all: number
  }


  export type ReagentAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type ReagentSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type ReagentMinAggregateInputType = {
    id?: true
    name?: true
    company?: true
    product_id?: true
    link?: true
    type?: true
    user_id?: true
  }

  export type ReagentMaxAggregateInputType = {
    id?: true
    name?: true
    company?: true
    product_id?: true
    link?: true
    type?: true
    user_id?: true
  }

  export type ReagentCountAggregateInputType = {
    id?: true
    name?: true
    company?: true
    product_id?: true
    link?: true
    type?: true
    user_id?: true
    _all?: true
  }

  export type ReagentAggregateArgs = {
    /**
     * Filter which reagent to aggregate.
     * 
    **/
    where?: reagentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reagents to fetch.
     * 
    **/
    orderBy?: Enumerable<reagentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: reagentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reagents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reagents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reagents
    **/
    _count?: true | ReagentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReagentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReagentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReagentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReagentMaxAggregateInputType
  }

  export type GetReagentAggregateType<T extends ReagentAggregateArgs> = {
        [P in keyof T & keyof AggregateReagent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReagent[P]>
      : GetScalarType<T[P], AggregateReagent[P]>
  }




  export type ReagentGroupByArgs = {
    where?: reagentWhereInput
    orderBy?: Enumerable<reagentOrderByWithAggregationInput>
    by: Array<ReagentScalarFieldEnum>
    having?: reagentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReagentCountAggregateInputType | true
    _avg?: ReagentAvgAggregateInputType
    _sum?: ReagentSumAggregateInputType
    _min?: ReagentMinAggregateInputType
    _max?: ReagentMaxAggregateInputType
  }


  export type ReagentGroupByOutputType = {
    id: number
    name: string
    company: string
    product_id: string | null
    link: string | null
    type: string | null
    user_id: number
    _count: ReagentCountAggregateOutputType | null
    _avg: ReagentAvgAggregateOutputType | null
    _sum: ReagentSumAggregateOutputType | null
    _min: ReagentMinAggregateOutputType | null
    _max: ReagentMaxAggregateOutputType | null
  }

  type GetReagentGroupByPayload<T extends ReagentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReagentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReagentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReagentGroupByOutputType[P]>
            : GetScalarType<T[P], ReagentGroupByOutputType[P]>
        }
      >
    >


  export type reagentSelect = {
    id?: boolean
    name?: boolean
    company?: boolean
    product_id?: boolean
    link?: boolean
    type?: boolean
    user?: boolean | userArgs
    user_id?: boolean
    methods?: boolean | reagents_on_methodsFindManyArgs
    _count?: boolean | ReagentCountOutputTypeArgs
  }

  export type reagentInclude = {
    user?: boolean | userArgs
    methods?: boolean | reagents_on_methodsFindManyArgs
    _count?: boolean | ReagentCountOutputTypeArgs
  }

  export type reagentGetPayload<
    S extends boolean | null | undefined | reagentArgs,
    U = keyof S
      > = S extends true
        ? reagent
    : S extends undefined
    ? never
    : S extends reagentArgs | reagentFindManyArgs
    ?'include' extends U
    ? reagent  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? userGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'methods' ? Array < reagents_on_methodsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ReagentCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? userGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'methods' ? Array < reagents_on_methodsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ReagentCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof reagent ? reagent[P] : never
  } 
    : reagent
  : reagent


  type reagentCountArgs = Merge<
    Omit<reagentFindManyArgs, 'select' | 'include'> & {
      select?: ReagentCountAggregateInputType | true
    }
  >

  export interface reagentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Reagent that matches the filter.
     * @param {reagentFindUniqueArgs} args - Arguments to find a Reagent
     * @example
     * // Get one Reagent
     * const reagent = await prisma.reagent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends reagentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, reagentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'reagent'> extends True ? CheckSelect<T, Prisma__reagentClient<reagent>, Prisma__reagentClient<reagentGetPayload<T>>> : CheckSelect<T, Prisma__reagentClient<reagent | null, null>, Prisma__reagentClient<reagentGetPayload<T> | null, null>>

    /**
     * Find the first Reagent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reagentFindFirstArgs} args - Arguments to find a Reagent
     * @example
     * // Get one Reagent
     * const reagent = await prisma.reagent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends reagentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, reagentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'reagent'> extends True ? CheckSelect<T, Prisma__reagentClient<reagent>, Prisma__reagentClient<reagentGetPayload<T>>> : CheckSelect<T, Prisma__reagentClient<reagent | null, null>, Prisma__reagentClient<reagentGetPayload<T> | null, null>>

    /**
     * Find zero or more Reagents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reagentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reagents
     * const reagents = await prisma.reagent.findMany()
     * 
     * // Get first 10 Reagents
     * const reagents = await prisma.reagent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reagentWithIdOnly = await prisma.reagent.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends reagentFindManyArgs>(
      args?: SelectSubset<T, reagentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<reagent>>, PrismaPromise<Array<reagentGetPayload<T>>>>

    /**
     * Create a Reagent.
     * @param {reagentCreateArgs} args - Arguments to create a Reagent.
     * @example
     * // Create one Reagent
     * const Reagent = await prisma.reagent.create({
     *   data: {
     *     // ... data to create a Reagent
     *   }
     * })
     * 
    **/
    create<T extends reagentCreateArgs>(
      args: SelectSubset<T, reagentCreateArgs>
    ): CheckSelect<T, Prisma__reagentClient<reagent>, Prisma__reagentClient<reagentGetPayload<T>>>

    /**
     * Create many Reagents.
     *     @param {reagentCreateManyArgs} args - Arguments to create many Reagents.
     *     @example
     *     // Create many Reagents
     *     const reagent = await prisma.reagent.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends reagentCreateManyArgs>(
      args?: SelectSubset<T, reagentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reagent.
     * @param {reagentDeleteArgs} args - Arguments to delete one Reagent.
     * @example
     * // Delete one Reagent
     * const Reagent = await prisma.reagent.delete({
     *   where: {
     *     // ... filter to delete one Reagent
     *   }
     * })
     * 
    **/
    delete<T extends reagentDeleteArgs>(
      args: SelectSubset<T, reagentDeleteArgs>
    ): CheckSelect<T, Prisma__reagentClient<reagent>, Prisma__reagentClient<reagentGetPayload<T>>>

    /**
     * Update one Reagent.
     * @param {reagentUpdateArgs} args - Arguments to update one Reagent.
     * @example
     * // Update one Reagent
     * const reagent = await prisma.reagent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends reagentUpdateArgs>(
      args: SelectSubset<T, reagentUpdateArgs>
    ): CheckSelect<T, Prisma__reagentClient<reagent>, Prisma__reagentClient<reagentGetPayload<T>>>

    /**
     * Delete zero or more Reagents.
     * @param {reagentDeleteManyArgs} args - Arguments to filter Reagents to delete.
     * @example
     * // Delete a few Reagents
     * const { count } = await prisma.reagent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends reagentDeleteManyArgs>(
      args?: SelectSubset<T, reagentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reagents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reagentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reagents
     * const reagent = await prisma.reagent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends reagentUpdateManyArgs>(
      args: SelectSubset<T, reagentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reagent.
     * @param {reagentUpsertArgs} args - Arguments to update or create a Reagent.
     * @example
     * // Update or create a Reagent
     * const reagent = await prisma.reagent.upsert({
     *   create: {
     *     // ... data to create a Reagent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reagent we want to update
     *   }
     * })
    **/
    upsert<T extends reagentUpsertArgs>(
      args: SelectSubset<T, reagentUpsertArgs>
    ): CheckSelect<T, Prisma__reagentClient<reagent>, Prisma__reagentClient<reagentGetPayload<T>>>

    /**
     * Find one Reagent that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {reagentFindUniqueOrThrowArgs} args - Arguments to find a Reagent
     * @example
     * // Get one Reagent
     * const reagent = await prisma.reagent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends reagentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, reagentFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__reagentClient<reagent>, Prisma__reagentClient<reagentGetPayload<T>>>

    /**
     * Find the first Reagent that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reagentFindFirstOrThrowArgs} args - Arguments to find a Reagent
     * @example
     * // Get one Reagent
     * const reagent = await prisma.reagent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends reagentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, reagentFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__reagentClient<reagent>, Prisma__reagentClient<reagentGetPayload<T>>>

    /**
     * Count the number of Reagents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reagentCountArgs} args - Arguments to filter Reagents to count.
     * @example
     * // Count the number of Reagents
     * const count = await prisma.reagent.count({
     *   where: {
     *     // ... the filter for the Reagents we want to count
     *   }
     * })
    **/
    count<T extends reagentCountArgs>(
      args?: Subset<T, reagentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReagentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reagent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReagentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReagentAggregateArgs>(args: Subset<T, ReagentAggregateArgs>): PrismaPromise<GetReagentAggregateType<T>>

    /**
     * Group by Reagent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReagentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReagentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReagentGroupByArgs['orderBy'] }
        : { orderBy?: ReagentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReagentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReagentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for reagent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__reagentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | Null>, Prisma__userClient<userGetPayload<T> | Null>>;

    methods<T extends reagents_on_methodsFindManyArgs = {}>(args?: Subset<T, reagents_on_methodsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<reagents_on_methods>| Null>, PrismaPromise<Array<reagents_on_methodsGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * reagent base type for findUnique actions
   */
  export type reagentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the reagent
     * 
    **/
    select?: reagentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagentInclude | null
    /**
     * Filter, which reagent to fetch.
     * 
    **/
    where: reagentWhereUniqueInput
  }

  /**
   * reagent: findUnique
   */
  export interface reagentFindUniqueArgs extends reagentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reagent base type for findFirst actions
   */
  export type reagentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the reagent
     * 
    **/
    select?: reagentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagentInclude | null
    /**
     * Filter, which reagent to fetch.
     * 
    **/
    where?: reagentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reagents to fetch.
     * 
    **/
    orderBy?: Enumerable<reagentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reagents.
     * 
    **/
    cursor?: reagentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reagents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reagents.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reagents.
     * 
    **/
    distinct?: Enumerable<ReagentScalarFieldEnum>
  }

  /**
   * reagent: findFirst
   */
  export interface reagentFindFirstArgs extends reagentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reagent findMany
   */
  export type reagentFindManyArgs = {
    /**
     * Select specific fields to fetch from the reagent
     * 
    **/
    select?: reagentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagentInclude | null
    /**
     * Filter, which reagents to fetch.
     * 
    **/
    where?: reagentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reagents to fetch.
     * 
    **/
    orderBy?: Enumerable<reagentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reagents.
     * 
    **/
    cursor?: reagentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reagents from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reagents.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReagentScalarFieldEnum>
  }


  /**
   * reagent create
   */
  export type reagentCreateArgs = {
    /**
     * Select specific fields to fetch from the reagent
     * 
    **/
    select?: reagentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagentInclude | null
    /**
     * The data needed to create a reagent.
     * 
    **/
    data: XOR<reagentCreateInput, reagentUncheckedCreateInput>
  }


  /**
   * reagent createMany
   */
  export type reagentCreateManyArgs = {
    /**
     * The data used to create many reagents.
     * 
    **/
    data: Enumerable<reagentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * reagent update
   */
  export type reagentUpdateArgs = {
    /**
     * Select specific fields to fetch from the reagent
     * 
    **/
    select?: reagentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagentInclude | null
    /**
     * The data needed to update a reagent.
     * 
    **/
    data: XOR<reagentUpdateInput, reagentUncheckedUpdateInput>
    /**
     * Choose, which reagent to update.
     * 
    **/
    where: reagentWhereUniqueInput
  }


  /**
   * reagent updateMany
   */
  export type reagentUpdateManyArgs = {
    /**
     * The data used to update reagents.
     * 
    **/
    data: XOR<reagentUpdateManyMutationInput, reagentUncheckedUpdateManyInput>
    /**
     * Filter which reagents to update
     * 
    **/
    where?: reagentWhereInput
  }


  /**
   * reagent upsert
   */
  export type reagentUpsertArgs = {
    /**
     * Select specific fields to fetch from the reagent
     * 
    **/
    select?: reagentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagentInclude | null
    /**
     * The filter to search for the reagent to update in case it exists.
     * 
    **/
    where: reagentWhereUniqueInput
    /**
     * In case the reagent found by the `where` argument doesn't exist, create a new reagent with this data.
     * 
    **/
    create: XOR<reagentCreateInput, reagentUncheckedCreateInput>
    /**
     * In case the reagent was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<reagentUpdateInput, reagentUncheckedUpdateInput>
  }


  /**
   * reagent delete
   */
  export type reagentDeleteArgs = {
    /**
     * Select specific fields to fetch from the reagent
     * 
    **/
    select?: reagentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagentInclude | null
    /**
     * Filter which reagent to delete.
     * 
    **/
    where: reagentWhereUniqueInput
  }


  /**
   * reagent deleteMany
   */
  export type reagentDeleteManyArgs = {
    /**
     * Filter which reagents to delete
     * 
    **/
    where?: reagentWhereInput
  }


  /**
   * reagent: findUniqueOrThrow
   */
  export type reagentFindUniqueOrThrowArgs = reagentFindUniqueArgsBase
      

  /**
   * reagent: findFirstOrThrow
   */
  export type reagentFindFirstOrThrowArgs = reagentFindFirstArgsBase
      

  /**
   * reagent without action
   */
  export type reagentArgs = {
    /**
     * Select specific fields to fetch from the reagent
     * 
    **/
    select?: reagentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagentInclude | null
  }



  /**
   * Model device
   */


  export type AggregateDevice = {
    _count: DeviceCountAggregateOutputType | null
    _avg: DeviceAvgAggregateOutputType | null
    _sum: DeviceSumAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  export type DeviceAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type DeviceSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type DeviceMinAggregateOutputType = {
    id: number | null
    name: string | null
    company: string | null
    product_id: string | null
    link: string | null
    type: string | null
    user_id: number | null
  }

  export type DeviceMaxAggregateOutputType = {
    id: number | null
    name: string | null
    company: string | null
    product_id: string | null
    link: string | null
    type: string | null
    user_id: number | null
  }

  export type DeviceCountAggregateOutputType = {
    id: number
    name: number
    company: number
    product_id: number
    link: number
    type: number
    user_id: number
    _all: number
  }


  export type DeviceAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type DeviceSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type DeviceMinAggregateInputType = {
    id?: true
    name?: true
    company?: true
    product_id?: true
    link?: true
    type?: true
    user_id?: true
  }

  export type DeviceMaxAggregateInputType = {
    id?: true
    name?: true
    company?: true
    product_id?: true
    link?: true
    type?: true
    user_id?: true
  }

  export type DeviceCountAggregateInputType = {
    id?: true
    name?: true
    company?: true
    product_id?: true
    link?: true
    type?: true
    user_id?: true
    _all?: true
  }

  export type DeviceAggregateArgs = {
    /**
     * Filter which device to aggregate.
     * 
    **/
    where?: deviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices to fetch.
     * 
    **/
    orderBy?: Enumerable<deviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: deviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned devices
    **/
    _count?: true | DeviceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeviceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeviceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeviceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeviceMaxAggregateInputType
  }

  export type GetDeviceAggregateType<T extends DeviceAggregateArgs> = {
        [P in keyof T & keyof AggregateDevice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDevice[P]>
      : GetScalarType<T[P], AggregateDevice[P]>
  }




  export type DeviceGroupByArgs = {
    where?: deviceWhereInput
    orderBy?: Enumerable<deviceOrderByWithAggregationInput>
    by: Array<DeviceScalarFieldEnum>
    having?: deviceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeviceCountAggregateInputType | true
    _avg?: DeviceAvgAggregateInputType
    _sum?: DeviceSumAggregateInputType
    _min?: DeviceMinAggregateInputType
    _max?: DeviceMaxAggregateInputType
  }


  export type DeviceGroupByOutputType = {
    id: number
    name: string
    company: string
    product_id: string | null
    link: string | null
    type: string | null
    user_id: number
    _count: DeviceCountAggregateOutputType | null
    _avg: DeviceAvgAggregateOutputType | null
    _sum: DeviceSumAggregateOutputType | null
    _min: DeviceMinAggregateOutputType | null
    _max: DeviceMaxAggregateOutputType | null
  }

  type GetDeviceGroupByPayload<T extends DeviceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DeviceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeviceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeviceGroupByOutputType[P]>
            : GetScalarType<T[P], DeviceGroupByOutputType[P]>
        }
      >
    >


  export type deviceSelect = {
    id?: boolean
    name?: boolean
    company?: boolean
    product_id?: boolean
    link?: boolean
    type?: boolean
    user?: boolean | userArgs
    user_id?: boolean
    methods?: boolean | devices_on_methodsFindManyArgs
    _count?: boolean | DeviceCountOutputTypeArgs
  }

  export type deviceInclude = {
    user?: boolean | userArgs
    methods?: boolean | devices_on_methodsFindManyArgs
    _count?: boolean | DeviceCountOutputTypeArgs
  }

  export type deviceGetPayload<
    S extends boolean | null | undefined | deviceArgs,
    U = keyof S
      > = S extends true
        ? device
    : S extends undefined
    ? never
    : S extends deviceArgs | deviceFindManyArgs
    ?'include' extends U
    ? device  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? userGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'methods' ? Array < devices_on_methodsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? DeviceCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? userGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'methods' ? Array < devices_on_methodsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? DeviceCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof device ? device[P] : never
  } 
    : device
  : device


  type deviceCountArgs = Merge<
    Omit<deviceFindManyArgs, 'select' | 'include'> & {
      select?: DeviceCountAggregateInputType | true
    }
  >

  export interface deviceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Device that matches the filter.
     * @param {deviceFindUniqueArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends deviceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, deviceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'device'> extends True ? CheckSelect<T, Prisma__deviceClient<device>, Prisma__deviceClient<deviceGetPayload<T>>> : CheckSelect<T, Prisma__deviceClient<device | null, null>, Prisma__deviceClient<deviceGetPayload<T> | null, null>>

    /**
     * Find the first Device that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deviceFindFirstArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends deviceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, deviceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'device'> extends True ? CheckSelect<T, Prisma__deviceClient<device>, Prisma__deviceClient<deviceGetPayload<T>>> : CheckSelect<T, Prisma__deviceClient<device | null, null>, Prisma__deviceClient<deviceGetPayload<T> | null, null>>

    /**
     * Find zero or more Devices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deviceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devices
     * const devices = await prisma.device.findMany()
     * 
     * // Get first 10 Devices
     * const devices = await prisma.device.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deviceWithIdOnly = await prisma.device.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends deviceFindManyArgs>(
      args?: SelectSubset<T, deviceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<device>>, PrismaPromise<Array<deviceGetPayload<T>>>>

    /**
     * Create a Device.
     * @param {deviceCreateArgs} args - Arguments to create a Device.
     * @example
     * // Create one Device
     * const Device = await prisma.device.create({
     *   data: {
     *     // ... data to create a Device
     *   }
     * })
     * 
    **/
    create<T extends deviceCreateArgs>(
      args: SelectSubset<T, deviceCreateArgs>
    ): CheckSelect<T, Prisma__deviceClient<device>, Prisma__deviceClient<deviceGetPayload<T>>>

    /**
     * Create many Devices.
     *     @param {deviceCreateManyArgs} args - Arguments to create many Devices.
     *     @example
     *     // Create many Devices
     *     const device = await prisma.device.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends deviceCreateManyArgs>(
      args?: SelectSubset<T, deviceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Device.
     * @param {deviceDeleteArgs} args - Arguments to delete one Device.
     * @example
     * // Delete one Device
     * const Device = await prisma.device.delete({
     *   where: {
     *     // ... filter to delete one Device
     *   }
     * })
     * 
    **/
    delete<T extends deviceDeleteArgs>(
      args: SelectSubset<T, deviceDeleteArgs>
    ): CheckSelect<T, Prisma__deviceClient<device>, Prisma__deviceClient<deviceGetPayload<T>>>

    /**
     * Update one Device.
     * @param {deviceUpdateArgs} args - Arguments to update one Device.
     * @example
     * // Update one Device
     * const device = await prisma.device.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends deviceUpdateArgs>(
      args: SelectSubset<T, deviceUpdateArgs>
    ): CheckSelect<T, Prisma__deviceClient<device>, Prisma__deviceClient<deviceGetPayload<T>>>

    /**
     * Delete zero or more Devices.
     * @param {deviceDeleteManyArgs} args - Arguments to filter Devices to delete.
     * @example
     * // Delete a few Devices
     * const { count } = await prisma.device.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends deviceDeleteManyArgs>(
      args?: SelectSubset<T, deviceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deviceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devices
     * const device = await prisma.device.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends deviceUpdateManyArgs>(
      args: SelectSubset<T, deviceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Device.
     * @param {deviceUpsertArgs} args - Arguments to update or create a Device.
     * @example
     * // Update or create a Device
     * const device = await prisma.device.upsert({
     *   create: {
     *     // ... data to create a Device
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Device we want to update
     *   }
     * })
    **/
    upsert<T extends deviceUpsertArgs>(
      args: SelectSubset<T, deviceUpsertArgs>
    ): CheckSelect<T, Prisma__deviceClient<device>, Prisma__deviceClient<deviceGetPayload<T>>>

    /**
     * Find one Device that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {deviceFindUniqueOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends deviceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, deviceFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__deviceClient<device>, Prisma__deviceClient<deviceGetPayload<T>>>

    /**
     * Find the first Device that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deviceFindFirstOrThrowArgs} args - Arguments to find a Device
     * @example
     * // Get one Device
     * const device = await prisma.device.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends deviceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, deviceFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__deviceClient<device>, Prisma__deviceClient<deviceGetPayload<T>>>

    /**
     * Count the number of Devices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deviceCountArgs} args - Arguments to filter Devices to count.
     * @example
     * // Count the number of Devices
     * const count = await prisma.device.count({
     *   where: {
     *     // ... the filter for the Devices we want to count
     *   }
     * })
    **/
    count<T extends deviceCountArgs>(
      args?: Subset<T, deviceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeviceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeviceAggregateArgs>(args: Subset<T, DeviceAggregateArgs>): PrismaPromise<GetDeviceAggregateType<T>>

    /**
     * Group by Device.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeviceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeviceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeviceGroupByArgs['orderBy'] }
        : { orderBy?: DeviceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeviceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeviceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for device.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__deviceClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | Null>, Prisma__userClient<userGetPayload<T> | Null>>;

    methods<T extends devices_on_methodsFindManyArgs = {}>(args?: Subset<T, devices_on_methodsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<devices_on_methods>| Null>, PrismaPromise<Array<devices_on_methodsGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * device base type for findUnique actions
   */
  export type deviceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the device
     * 
    **/
    select?: deviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deviceInclude | null
    /**
     * Filter, which device to fetch.
     * 
    **/
    where: deviceWhereUniqueInput
  }

  /**
   * device: findUnique
   */
  export interface deviceFindUniqueArgs extends deviceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * device base type for findFirst actions
   */
  export type deviceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the device
     * 
    **/
    select?: deviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deviceInclude | null
    /**
     * Filter, which device to fetch.
     * 
    **/
    where?: deviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices to fetch.
     * 
    **/
    orderBy?: Enumerable<deviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for devices.
     * 
    **/
    cursor?: deviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of devices.
     * 
    **/
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }

  /**
   * device: findFirst
   */
  export interface deviceFindFirstArgs extends deviceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * device findMany
   */
  export type deviceFindManyArgs = {
    /**
     * Select specific fields to fetch from the device
     * 
    **/
    select?: deviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deviceInclude | null
    /**
     * Filter, which devices to fetch.
     * 
    **/
    where?: deviceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices to fetch.
     * 
    **/
    orderBy?: Enumerable<deviceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing devices.
     * 
    **/
    cursor?: deviceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DeviceScalarFieldEnum>
  }


  /**
   * device create
   */
  export type deviceCreateArgs = {
    /**
     * Select specific fields to fetch from the device
     * 
    **/
    select?: deviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deviceInclude | null
    /**
     * The data needed to create a device.
     * 
    **/
    data: XOR<deviceCreateInput, deviceUncheckedCreateInput>
  }


  /**
   * device createMany
   */
  export type deviceCreateManyArgs = {
    /**
     * The data used to create many devices.
     * 
    **/
    data: Enumerable<deviceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * device update
   */
  export type deviceUpdateArgs = {
    /**
     * Select specific fields to fetch from the device
     * 
    **/
    select?: deviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deviceInclude | null
    /**
     * The data needed to update a device.
     * 
    **/
    data: XOR<deviceUpdateInput, deviceUncheckedUpdateInput>
    /**
     * Choose, which device to update.
     * 
    **/
    where: deviceWhereUniqueInput
  }


  /**
   * device updateMany
   */
  export type deviceUpdateManyArgs = {
    /**
     * The data used to update devices.
     * 
    **/
    data: XOR<deviceUpdateManyMutationInput, deviceUncheckedUpdateManyInput>
    /**
     * Filter which devices to update
     * 
    **/
    where?: deviceWhereInput
  }


  /**
   * device upsert
   */
  export type deviceUpsertArgs = {
    /**
     * Select specific fields to fetch from the device
     * 
    **/
    select?: deviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deviceInclude | null
    /**
     * The filter to search for the device to update in case it exists.
     * 
    **/
    where: deviceWhereUniqueInput
    /**
     * In case the device found by the `where` argument doesn't exist, create a new device with this data.
     * 
    **/
    create: XOR<deviceCreateInput, deviceUncheckedCreateInput>
    /**
     * In case the device was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<deviceUpdateInput, deviceUncheckedUpdateInput>
  }


  /**
   * device delete
   */
  export type deviceDeleteArgs = {
    /**
     * Select specific fields to fetch from the device
     * 
    **/
    select?: deviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deviceInclude | null
    /**
     * Filter which device to delete.
     * 
    **/
    where: deviceWhereUniqueInput
  }


  /**
   * device deleteMany
   */
  export type deviceDeleteManyArgs = {
    /**
     * Filter which devices to delete
     * 
    **/
    where?: deviceWhereInput
  }


  /**
   * device: findUniqueOrThrow
   */
  export type deviceFindUniqueOrThrowArgs = deviceFindUniqueArgsBase
      

  /**
   * device: findFirstOrThrow
   */
  export type deviceFindFirstOrThrowArgs = deviceFindFirstArgsBase
      

  /**
   * device without action
   */
  export type deviceArgs = {
    /**
     * Select specific fields to fetch from the device
     * 
    **/
    select?: deviceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: deviceInclude | null
  }



  /**
   * Model method
   */


  export type AggregateMethod = {
    _count: MethodCountAggregateOutputType | null
    _avg: MethodAvgAggregateOutputType | null
    _sum: MethodSumAggregateOutputType | null
    _min: MethodMinAggregateOutputType | null
    _max: MethodMaxAggregateOutputType | null
  }

  export type MethodAvgAggregateOutputType = {
    id: number | null
    number_of_samples: number | null
    creator_id: number | null
    category_id: number | null
  }

  export type MethodSumAggregateOutputType = {
    id: number | null
    number_of_samples: number | null
    creator_id: number | null
    category_id: number | null
  }

  export type MethodMinAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
    duration: string | null
    description: string | null
    number_of_samples: number | null
    creator_id: number | null
    category_id: number | null
  }

  export type MethodMaxAggregateOutputType = {
    id: number | null
    name: string | null
    created_at: Date | null
    updated_at: Date | null
    duration: string | null
    description: string | null
    number_of_samples: number | null
    creator_id: number | null
    category_id: number | null
  }

  export type MethodCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    updated_at: number
    duration: number
    description: number
    sections: number
    number_of_samples: number
    creator_id: number
    category_id: number
    _all: number
  }


  export type MethodAvgAggregateInputType = {
    id?: true
    number_of_samples?: true
    creator_id?: true
    category_id?: true
  }

  export type MethodSumAggregateInputType = {
    id?: true
    number_of_samples?: true
    creator_id?: true
    category_id?: true
  }

  export type MethodMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    duration?: true
    description?: true
    number_of_samples?: true
    creator_id?: true
    category_id?: true
  }

  export type MethodMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    duration?: true
    description?: true
    number_of_samples?: true
    creator_id?: true
    category_id?: true
  }

  export type MethodCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    updated_at?: true
    duration?: true
    description?: true
    sections?: true
    number_of_samples?: true
    creator_id?: true
    category_id?: true
    _all?: true
  }

  export type MethodAggregateArgs = {
    /**
     * Filter which method to aggregate.
     * 
    **/
    where?: methodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of methods to fetch.
     * 
    **/
    orderBy?: Enumerable<methodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: methodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` methods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned methods
    **/
    _count?: true | MethodCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MethodAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MethodSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MethodMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MethodMaxAggregateInputType
  }

  export type GetMethodAggregateType<T extends MethodAggregateArgs> = {
        [P in keyof T & keyof AggregateMethod]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMethod[P]>
      : GetScalarType<T[P], AggregateMethod[P]>
  }




  export type MethodGroupByArgs = {
    where?: methodWhereInput
    orderBy?: Enumerable<methodOrderByWithAggregationInput>
    by: Array<MethodScalarFieldEnum>
    having?: methodScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MethodCountAggregateInputType | true
    _avg?: MethodAvgAggregateInputType
    _sum?: MethodSumAggregateInputType
    _min?: MethodMinAggregateInputType
    _max?: MethodMaxAggregateInputType
  }


  export type MethodGroupByOutputType = {
    id: number
    name: string
    created_at: Date
    updated_at: Date
    duration: string | null
    description: string | null
    sections: string[]
    number_of_samples: number | null
    creator_id: number
    category_id: number | null
    _count: MethodCountAggregateOutputType | null
    _avg: MethodAvgAggregateOutputType | null
    _sum: MethodSumAggregateOutputType | null
    _min: MethodMinAggregateOutputType | null
    _max: MethodMaxAggregateOutputType | null
  }

  type GetMethodGroupByPayload<T extends MethodGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MethodGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MethodGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MethodGroupByOutputType[P]>
            : GetScalarType<T[P], MethodGroupByOutputType[P]>
        }
      >
    >


  export type methodSelect = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    updated_at?: boolean
    duration?: boolean
    description?: boolean
    sections?: boolean
    number_of_samples?: boolean
    creator?: boolean | userArgs
    creator_id?: boolean
    user?: boolean | user_on_methodsFindManyArgs
    category?: boolean | categoryArgs
    category_id?: boolean
    reagents?: boolean | reagents_on_methodsFindManyArgs
    devices?: boolean | devices_on_methodsFindManyArgs
    method_samples?: boolean | method_sampleFindManyArgs
    method_steps?: boolean | method_stepFindManyArgs
    comments?: boolean | commentFindManyArgs
    _count?: boolean | MethodCountOutputTypeArgs
  }

  export type methodInclude = {
    creator?: boolean | userArgs
    user?: boolean | user_on_methodsFindManyArgs
    category?: boolean | categoryArgs
    reagents?: boolean | reagents_on_methodsFindManyArgs
    devices?: boolean | devices_on_methodsFindManyArgs
    method_samples?: boolean | method_sampleFindManyArgs
    method_steps?: boolean | method_stepFindManyArgs
    comments?: boolean | commentFindManyArgs
    _count?: boolean | MethodCountOutputTypeArgs
  }

  export type methodGetPayload<
    S extends boolean | null | undefined | methodArgs,
    U = keyof S
      > = S extends true
        ? method
    : S extends undefined
    ? never
    : S extends methodArgs | methodFindManyArgs
    ?'include' extends U
    ? method  & {
    [P in TrueKeys<S['include']>]:
        P extends 'creator' ? userGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'user' ? Array < user_on_methodsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'category' ? categoryGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'reagents' ? Array < reagents_on_methodsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'devices' ? Array < devices_on_methodsGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'method_samples' ? Array < method_sampleGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'method_steps' ? Array < method_stepGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'comments' ? Array < commentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? MethodCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'creator' ? userGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'user' ? Array < user_on_methodsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'category' ? categoryGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'reagents' ? Array < reagents_on_methodsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'devices' ? Array < devices_on_methodsGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'method_samples' ? Array < method_sampleGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'method_steps' ? Array < method_stepGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'comments' ? Array < commentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? MethodCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof method ? method[P] : never
  } 
    : method
  : method


  type methodCountArgs = Merge<
    Omit<methodFindManyArgs, 'select' | 'include'> & {
      select?: MethodCountAggregateInputType | true
    }
  >

  export interface methodDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Method that matches the filter.
     * @param {methodFindUniqueArgs} args - Arguments to find a Method
     * @example
     * // Get one Method
     * const method = await prisma.method.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends methodFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, methodFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'method'> extends True ? CheckSelect<T, Prisma__methodClient<method>, Prisma__methodClient<methodGetPayload<T>>> : CheckSelect<T, Prisma__methodClient<method | null, null>, Prisma__methodClient<methodGetPayload<T> | null, null>>

    /**
     * Find the first Method that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {methodFindFirstArgs} args - Arguments to find a Method
     * @example
     * // Get one Method
     * const method = await prisma.method.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends methodFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, methodFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'method'> extends True ? CheckSelect<T, Prisma__methodClient<method>, Prisma__methodClient<methodGetPayload<T>>> : CheckSelect<T, Prisma__methodClient<method | null, null>, Prisma__methodClient<methodGetPayload<T> | null, null>>

    /**
     * Find zero or more Methods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {methodFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Methods
     * const methods = await prisma.method.findMany()
     * 
     * // Get first 10 Methods
     * const methods = await prisma.method.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const methodWithIdOnly = await prisma.method.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends methodFindManyArgs>(
      args?: SelectSubset<T, methodFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<method>>, PrismaPromise<Array<methodGetPayload<T>>>>

    /**
     * Create a Method.
     * @param {methodCreateArgs} args - Arguments to create a Method.
     * @example
     * // Create one Method
     * const Method = await prisma.method.create({
     *   data: {
     *     // ... data to create a Method
     *   }
     * })
     * 
    **/
    create<T extends methodCreateArgs>(
      args: SelectSubset<T, methodCreateArgs>
    ): CheckSelect<T, Prisma__methodClient<method>, Prisma__methodClient<methodGetPayload<T>>>

    /**
     * Create many Methods.
     *     @param {methodCreateManyArgs} args - Arguments to create many Methods.
     *     @example
     *     // Create many Methods
     *     const method = await prisma.method.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends methodCreateManyArgs>(
      args?: SelectSubset<T, methodCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Method.
     * @param {methodDeleteArgs} args - Arguments to delete one Method.
     * @example
     * // Delete one Method
     * const Method = await prisma.method.delete({
     *   where: {
     *     // ... filter to delete one Method
     *   }
     * })
     * 
    **/
    delete<T extends methodDeleteArgs>(
      args: SelectSubset<T, methodDeleteArgs>
    ): CheckSelect<T, Prisma__methodClient<method>, Prisma__methodClient<methodGetPayload<T>>>

    /**
     * Update one Method.
     * @param {methodUpdateArgs} args - Arguments to update one Method.
     * @example
     * // Update one Method
     * const method = await prisma.method.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends methodUpdateArgs>(
      args: SelectSubset<T, methodUpdateArgs>
    ): CheckSelect<T, Prisma__methodClient<method>, Prisma__methodClient<methodGetPayload<T>>>

    /**
     * Delete zero or more Methods.
     * @param {methodDeleteManyArgs} args - Arguments to filter Methods to delete.
     * @example
     * // Delete a few Methods
     * const { count } = await prisma.method.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends methodDeleteManyArgs>(
      args?: SelectSubset<T, methodDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {methodUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Methods
     * const method = await prisma.method.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends methodUpdateManyArgs>(
      args: SelectSubset<T, methodUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Method.
     * @param {methodUpsertArgs} args - Arguments to update or create a Method.
     * @example
     * // Update or create a Method
     * const method = await prisma.method.upsert({
     *   create: {
     *     // ... data to create a Method
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Method we want to update
     *   }
     * })
    **/
    upsert<T extends methodUpsertArgs>(
      args: SelectSubset<T, methodUpsertArgs>
    ): CheckSelect<T, Prisma__methodClient<method>, Prisma__methodClient<methodGetPayload<T>>>

    /**
     * Find one Method that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {methodFindUniqueOrThrowArgs} args - Arguments to find a Method
     * @example
     * // Get one Method
     * const method = await prisma.method.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends methodFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, methodFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__methodClient<method>, Prisma__methodClient<methodGetPayload<T>>>

    /**
     * Find the first Method that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {methodFindFirstOrThrowArgs} args - Arguments to find a Method
     * @example
     * // Get one Method
     * const method = await prisma.method.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends methodFindFirstOrThrowArgs>(
      args?: SelectSubset<T, methodFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__methodClient<method>, Prisma__methodClient<methodGetPayload<T>>>

    /**
     * Count the number of Methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {methodCountArgs} args - Arguments to filter Methods to count.
     * @example
     * // Count the number of Methods
     * const count = await prisma.method.count({
     *   where: {
     *     // ... the filter for the Methods we want to count
     *   }
     * })
    **/
    count<T extends methodCountArgs>(
      args?: Subset<T, methodCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MethodCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Method.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MethodAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MethodAggregateArgs>(args: Subset<T, MethodAggregateArgs>): PrismaPromise<GetMethodAggregateType<T>>

    /**
     * Group by Method.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MethodGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MethodGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MethodGroupByArgs['orderBy'] }
        : { orderBy?: MethodGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MethodGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMethodGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for method.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__methodClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    creator<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | Null>, Prisma__userClient<userGetPayload<T> | Null>>;

    user<T extends user_on_methodsFindManyArgs = {}>(args?: Subset<T, user_on_methodsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user_on_methods>| Null>, PrismaPromise<Array<user_on_methodsGetPayload<T>>| Null>>;

    category<T extends categoryArgs = {}>(args?: Subset<T, categoryArgs>): CheckSelect<T, Prisma__categoryClient<category | Null>, Prisma__categoryClient<categoryGetPayload<T> | Null>>;

    reagents<T extends reagents_on_methodsFindManyArgs = {}>(args?: Subset<T, reagents_on_methodsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<reagents_on_methods>| Null>, PrismaPromise<Array<reagents_on_methodsGetPayload<T>>| Null>>;

    devices<T extends devices_on_methodsFindManyArgs = {}>(args?: Subset<T, devices_on_methodsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<devices_on_methods>| Null>, PrismaPromise<Array<devices_on_methodsGetPayload<T>>| Null>>;

    method_samples<T extends method_sampleFindManyArgs = {}>(args?: Subset<T, method_sampleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<method_sample>| Null>, PrismaPromise<Array<method_sampleGetPayload<T>>| Null>>;

    method_steps<T extends method_stepFindManyArgs = {}>(args?: Subset<T, method_stepFindManyArgs>): CheckSelect<T, PrismaPromise<Array<method_step>| Null>, PrismaPromise<Array<method_stepGetPayload<T>>| Null>>;

    comments<T extends commentFindManyArgs = {}>(args?: Subset<T, commentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<comment>| Null>, PrismaPromise<Array<commentGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * method base type for findUnique actions
   */
  export type methodFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the method
     * 
    **/
    select?: methodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: methodInclude | null
    /**
     * Filter, which method to fetch.
     * 
    **/
    where: methodWhereUniqueInput
  }

  /**
   * method: findUnique
   */
  export interface methodFindUniqueArgs extends methodFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * method base type for findFirst actions
   */
  export type methodFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the method
     * 
    **/
    select?: methodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: methodInclude | null
    /**
     * Filter, which method to fetch.
     * 
    **/
    where?: methodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of methods to fetch.
     * 
    **/
    orderBy?: Enumerable<methodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for methods.
     * 
    **/
    cursor?: methodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` methods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of methods.
     * 
    **/
    distinct?: Enumerable<MethodScalarFieldEnum>
  }

  /**
   * method: findFirst
   */
  export interface methodFindFirstArgs extends methodFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * method findMany
   */
  export type methodFindManyArgs = {
    /**
     * Select specific fields to fetch from the method
     * 
    **/
    select?: methodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: methodInclude | null
    /**
     * Filter, which methods to fetch.
     * 
    **/
    where?: methodWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of methods to fetch.
     * 
    **/
    orderBy?: Enumerable<methodOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing methods.
     * 
    **/
    cursor?: methodWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` methods.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MethodScalarFieldEnum>
  }


  /**
   * method create
   */
  export type methodCreateArgs = {
    /**
     * Select specific fields to fetch from the method
     * 
    **/
    select?: methodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: methodInclude | null
    /**
     * The data needed to create a method.
     * 
    **/
    data: XOR<methodCreateInput, methodUncheckedCreateInput>
  }


  /**
   * method createMany
   */
  export type methodCreateManyArgs = {
    /**
     * The data used to create many methods.
     * 
    **/
    data: Enumerable<methodCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * method update
   */
  export type methodUpdateArgs = {
    /**
     * Select specific fields to fetch from the method
     * 
    **/
    select?: methodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: methodInclude | null
    /**
     * The data needed to update a method.
     * 
    **/
    data: XOR<methodUpdateInput, methodUncheckedUpdateInput>
    /**
     * Choose, which method to update.
     * 
    **/
    where: methodWhereUniqueInput
  }


  /**
   * method updateMany
   */
  export type methodUpdateManyArgs = {
    /**
     * The data used to update methods.
     * 
    **/
    data: XOR<methodUpdateManyMutationInput, methodUncheckedUpdateManyInput>
    /**
     * Filter which methods to update
     * 
    **/
    where?: methodWhereInput
  }


  /**
   * method upsert
   */
  export type methodUpsertArgs = {
    /**
     * Select specific fields to fetch from the method
     * 
    **/
    select?: methodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: methodInclude | null
    /**
     * The filter to search for the method to update in case it exists.
     * 
    **/
    where: methodWhereUniqueInput
    /**
     * In case the method found by the `where` argument doesn't exist, create a new method with this data.
     * 
    **/
    create: XOR<methodCreateInput, methodUncheckedCreateInput>
    /**
     * In case the method was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<methodUpdateInput, methodUncheckedUpdateInput>
  }


  /**
   * method delete
   */
  export type methodDeleteArgs = {
    /**
     * Select specific fields to fetch from the method
     * 
    **/
    select?: methodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: methodInclude | null
    /**
     * Filter which method to delete.
     * 
    **/
    where: methodWhereUniqueInput
  }


  /**
   * method deleteMany
   */
  export type methodDeleteManyArgs = {
    /**
     * Filter which methods to delete
     * 
    **/
    where?: methodWhereInput
  }


  /**
   * method: findUniqueOrThrow
   */
  export type methodFindUniqueOrThrowArgs = methodFindUniqueArgsBase
      

  /**
   * method: findFirstOrThrow
   */
  export type methodFindFirstOrThrowArgs = methodFindFirstArgsBase
      

  /**
   * method without action
   */
  export type methodArgs = {
    /**
     * Select specific fields to fetch from the method
     * 
    **/
    select?: methodSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: methodInclude | null
  }



  /**
   * Model comment
   */


  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    y_position: number | null
    x_position: number | null
    method_id: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    y_position: number | null
    x_position: number | null
    method_id: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    content: string | null
    y_position: number | null
    x_position: number | null
    is_important: boolean | null
    method_id: number | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    content: string | null
    y_position: number | null
    x_position: number | null
    is_important: boolean | null
    method_id: number | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    y_position: number
    x_position: number
    is_important: number
    method_id: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    y_position?: true
    x_position?: true
    method_id?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    y_position?: true
    x_position?: true
    method_id?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    y_position?: true
    x_position?: true
    is_important?: true
    method_id?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    y_position?: true
    x_position?: true
    is_important?: true
    method_id?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    y_position?: true
    x_position?: true
    is_important?: true
    method_id?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which comment to aggregate.
     * 
    **/
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     * 
    **/
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs = {
    where?: commentWhereInput
    orderBy?: Enumerable<commentOrderByWithAggregationInput>
    by: Array<CommentScalarFieldEnum>
    having?: commentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }


  export type CommentGroupByOutputType = {
    id: number
    content: string
    y_position: number
    x_position: number | null
    is_important: boolean | null
    method_id: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type commentSelect = {
    id?: boolean
    content?: boolean
    y_position?: boolean
    x_position?: boolean
    is_important?: boolean
    method?: boolean | methodArgs
    method_id?: boolean
  }

  export type commentInclude = {
    method?: boolean | methodArgs
  }

  export type commentGetPayload<
    S extends boolean | null | undefined | commentArgs,
    U = keyof S
      > = S extends true
        ? comment
    : S extends undefined
    ? never
    : S extends commentArgs | commentFindManyArgs
    ?'include' extends U
    ? comment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'method' ? methodGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'method' ? methodGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof comment ? comment[P] : never
  } 
    : comment
  : comment


  type commentCountArgs = Merge<
    Omit<commentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }
  >

  export interface commentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Comment that matches the filter.
     * @param {commentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends commentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, commentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'comment'> extends True ? CheckSelect<T, Prisma__commentClient<comment>, Prisma__commentClient<commentGetPayload<T>>> : CheckSelect<T, Prisma__commentClient<comment | null, null>, Prisma__commentClient<commentGetPayload<T> | null, null>>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends commentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, commentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'comment'> extends True ? CheckSelect<T, Prisma__commentClient<comment>, Prisma__commentClient<commentGetPayload<T>>> : CheckSelect<T, Prisma__commentClient<comment | null, null>, Prisma__commentClient<commentGetPayload<T> | null, null>>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends commentFindManyArgs>(
      args?: SelectSubset<T, commentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<comment>>, PrismaPromise<Array<commentGetPayload<T>>>>

    /**
     * Create a Comment.
     * @param {commentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends commentCreateArgs>(
      args: SelectSubset<T, commentCreateArgs>
    ): CheckSelect<T, Prisma__commentClient<comment>, Prisma__commentClient<commentGetPayload<T>>>

    /**
     * Create many Comments.
     *     @param {commentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends commentCreateManyArgs>(
      args?: SelectSubset<T, commentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {commentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends commentDeleteArgs>(
      args: SelectSubset<T, commentDeleteArgs>
    ): CheckSelect<T, Prisma__commentClient<comment>, Prisma__commentClient<commentGetPayload<T>>>

    /**
     * Update one Comment.
     * @param {commentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentUpdateArgs>(
      args: SelectSubset<T, commentUpdateArgs>
    ): CheckSelect<T, Prisma__commentClient<comment>, Prisma__commentClient<commentGetPayload<T>>>

    /**
     * Delete zero or more Comments.
     * @param {commentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentDeleteManyArgs>(
      args?: SelectSubset<T, commentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentUpdateManyArgs>(
      args: SelectSubset<T, commentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {commentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends commentUpsertArgs>(
      args: SelectSubset<T, commentUpsertArgs>
    ): CheckSelect<T, Prisma__commentClient<comment>, Prisma__commentClient<commentGetPayload<T>>>

    /**
     * Find one Comment that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {commentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends commentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, commentFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__commentClient<comment>, Prisma__commentClient<commentGetPayload<T>>>

    /**
     * Find the first Comment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends commentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, commentFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__commentClient<comment>, Prisma__commentClient<commentGetPayload<T>>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {commentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends commentCountArgs>(
      args?: Subset<T, commentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__commentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    method<T extends methodArgs = {}>(args?: Subset<T, methodArgs>): CheckSelect<T, Prisma__methodClient<method | Null>, Prisma__methodClient<methodGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * comment base type for findUnique actions
   */
  export type commentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the comment
     * 
    **/
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentInclude | null
    /**
     * Filter, which comment to fetch.
     * 
    **/
    where: commentWhereUniqueInput
  }

  /**
   * comment: findUnique
   */
  export interface commentFindUniqueArgs extends commentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * comment base type for findFirst actions
   */
  export type commentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the comment
     * 
    **/
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentInclude | null
    /**
     * Filter, which comment to fetch.
     * 
    **/
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     * 
    **/
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for comments.
     * 
    **/
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of comments.
     * 
    **/
    distinct?: Enumerable<CommentScalarFieldEnum>
  }

  /**
   * comment: findFirst
   */
  export interface commentFindFirstArgs extends commentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * comment findMany
   */
  export type commentFindManyArgs = {
    /**
     * Select specific fields to fetch from the comment
     * 
    **/
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentInclude | null
    /**
     * Filter, which comments to fetch.
     * 
    **/
    where?: commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of comments to fetch.
     * 
    **/
    orderBy?: Enumerable<commentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing comments.
     * 
    **/
    cursor?: commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` comments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` comments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * comment create
   */
  export type commentCreateArgs = {
    /**
     * Select specific fields to fetch from the comment
     * 
    **/
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentInclude | null
    /**
     * The data needed to create a comment.
     * 
    **/
    data: XOR<commentCreateInput, commentUncheckedCreateInput>
  }


  /**
   * comment createMany
   */
  export type commentCreateManyArgs = {
    /**
     * The data used to create many comments.
     * 
    **/
    data: Enumerable<commentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * comment update
   */
  export type commentUpdateArgs = {
    /**
     * Select specific fields to fetch from the comment
     * 
    **/
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentInclude | null
    /**
     * The data needed to update a comment.
     * 
    **/
    data: XOR<commentUpdateInput, commentUncheckedUpdateInput>
    /**
     * Choose, which comment to update.
     * 
    **/
    where: commentWhereUniqueInput
  }


  /**
   * comment updateMany
   */
  export type commentUpdateManyArgs = {
    /**
     * The data used to update comments.
     * 
    **/
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyInput>
    /**
     * Filter which comments to update
     * 
    **/
    where?: commentWhereInput
  }


  /**
   * comment upsert
   */
  export type commentUpsertArgs = {
    /**
     * Select specific fields to fetch from the comment
     * 
    **/
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentInclude | null
    /**
     * The filter to search for the comment to update in case it exists.
     * 
    **/
    where: commentWhereUniqueInput
    /**
     * In case the comment found by the `where` argument doesn't exist, create a new comment with this data.
     * 
    **/
    create: XOR<commentCreateInput, commentUncheckedCreateInput>
    /**
     * In case the comment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<commentUpdateInput, commentUncheckedUpdateInput>
  }


  /**
   * comment delete
   */
  export type commentDeleteArgs = {
    /**
     * Select specific fields to fetch from the comment
     * 
    **/
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentInclude | null
    /**
     * Filter which comment to delete.
     * 
    **/
    where: commentWhereUniqueInput
  }


  /**
   * comment deleteMany
   */
  export type commentDeleteManyArgs = {
    /**
     * Filter which comments to delete
     * 
    **/
    where?: commentWhereInput
  }


  /**
   * comment: findUniqueOrThrow
   */
  export type commentFindUniqueOrThrowArgs = commentFindUniqueArgsBase
      

  /**
   * comment: findFirstOrThrow
   */
  export type commentFindFirstOrThrowArgs = commentFindFirstArgsBase
      

  /**
   * comment without action
   */
  export type commentArgs = {
    /**
     * Select specific fields to fetch from the comment
     * 
    **/
    select?: commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: commentInclude | null
  }



  /**
   * Model reagents_on_methods
   */


  export type AggregateReagents_on_methods = {
    _count: Reagents_on_methodsCountAggregateOutputType | null
    _avg: Reagents_on_methodsAvgAggregateOutputType | null
    _sum: Reagents_on_methodsSumAggregateOutputType | null
    _min: Reagents_on_methodsMinAggregateOutputType | null
    _max: Reagents_on_methodsMaxAggregateOutputType | null
  }

  export type Reagents_on_methodsAvgAggregateOutputType = {
    reagent_id: number | null
    method_id: number | null
  }

  export type Reagents_on_methodsSumAggregateOutputType = {
    reagent_id: number | null
    method_id: number | null
  }

  export type Reagents_on_methodsMinAggregateOutputType = {
    reagent_id: number | null
    method_id: number | null
    amount: string | null
  }

  export type Reagents_on_methodsMaxAggregateOutputType = {
    reagent_id: number | null
    method_id: number | null
    amount: string | null
  }

  export type Reagents_on_methodsCountAggregateOutputType = {
    reagent_id: number
    method_id: number
    amount: number
    _all: number
  }


  export type Reagents_on_methodsAvgAggregateInputType = {
    reagent_id?: true
    method_id?: true
  }

  export type Reagents_on_methodsSumAggregateInputType = {
    reagent_id?: true
    method_id?: true
  }

  export type Reagents_on_methodsMinAggregateInputType = {
    reagent_id?: true
    method_id?: true
    amount?: true
  }

  export type Reagents_on_methodsMaxAggregateInputType = {
    reagent_id?: true
    method_id?: true
    amount?: true
  }

  export type Reagents_on_methodsCountAggregateInputType = {
    reagent_id?: true
    method_id?: true
    amount?: true
    _all?: true
  }

  export type Reagents_on_methodsAggregateArgs = {
    /**
     * Filter which reagents_on_methods to aggregate.
     * 
    **/
    where?: reagents_on_methodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reagents_on_methods to fetch.
     * 
    **/
    orderBy?: Enumerable<reagents_on_methodsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: reagents_on_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reagents_on_methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reagents_on_methods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reagents_on_methods
    **/
    _count?: true | Reagents_on_methodsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Reagents_on_methodsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Reagents_on_methodsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Reagents_on_methodsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Reagents_on_methodsMaxAggregateInputType
  }

  export type GetReagents_on_methodsAggregateType<T extends Reagents_on_methodsAggregateArgs> = {
        [P in keyof T & keyof AggregateReagents_on_methods]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReagents_on_methods[P]>
      : GetScalarType<T[P], AggregateReagents_on_methods[P]>
  }




  export type Reagents_on_methodsGroupByArgs = {
    where?: reagents_on_methodsWhereInput
    orderBy?: Enumerable<reagents_on_methodsOrderByWithAggregationInput>
    by: Array<Reagents_on_methodsScalarFieldEnum>
    having?: reagents_on_methodsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Reagents_on_methodsCountAggregateInputType | true
    _avg?: Reagents_on_methodsAvgAggregateInputType
    _sum?: Reagents_on_methodsSumAggregateInputType
    _min?: Reagents_on_methodsMinAggregateInputType
    _max?: Reagents_on_methodsMaxAggregateInputType
  }


  export type Reagents_on_methodsGroupByOutputType = {
    reagent_id: number
    method_id: number
    amount: string | null
    _count: Reagents_on_methodsCountAggregateOutputType | null
    _avg: Reagents_on_methodsAvgAggregateOutputType | null
    _sum: Reagents_on_methodsSumAggregateOutputType | null
    _min: Reagents_on_methodsMinAggregateOutputType | null
    _max: Reagents_on_methodsMaxAggregateOutputType | null
  }

  type GetReagents_on_methodsGroupByPayload<T extends Reagents_on_methodsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Reagents_on_methodsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Reagents_on_methodsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Reagents_on_methodsGroupByOutputType[P]>
            : GetScalarType<T[P], Reagents_on_methodsGroupByOutputType[P]>
        }
      >
    >


  export type reagents_on_methodsSelect = {
    reagent?: boolean | reagentArgs
    reagent_id?: boolean
    method?: boolean | methodArgs
    method_id?: boolean
    amount?: boolean
  }

  export type reagents_on_methodsInclude = {
    reagent?: boolean | reagentArgs
    method?: boolean | methodArgs
  }

  export type reagents_on_methodsGetPayload<
    S extends boolean | null | undefined | reagents_on_methodsArgs,
    U = keyof S
      > = S extends true
        ? reagents_on_methods
    : S extends undefined
    ? never
    : S extends reagents_on_methodsArgs | reagents_on_methodsFindManyArgs
    ?'include' extends U
    ? reagents_on_methods  & {
    [P in TrueKeys<S['include']>]:
        P extends 'reagent' ? reagentGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'method' ? methodGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'reagent' ? reagentGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'method' ? methodGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof reagents_on_methods ? reagents_on_methods[P] : never
  } 
    : reagents_on_methods
  : reagents_on_methods


  type reagents_on_methodsCountArgs = Merge<
    Omit<reagents_on_methodsFindManyArgs, 'select' | 'include'> & {
      select?: Reagents_on_methodsCountAggregateInputType | true
    }
  >

  export interface reagents_on_methodsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Reagents_on_methods that matches the filter.
     * @param {reagents_on_methodsFindUniqueArgs} args - Arguments to find a Reagents_on_methods
     * @example
     * // Get one Reagents_on_methods
     * const reagents_on_methods = await prisma.reagents_on_methods.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends reagents_on_methodsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, reagents_on_methodsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'reagents_on_methods'> extends True ? CheckSelect<T, Prisma__reagents_on_methodsClient<reagents_on_methods>, Prisma__reagents_on_methodsClient<reagents_on_methodsGetPayload<T>>> : CheckSelect<T, Prisma__reagents_on_methodsClient<reagents_on_methods | null, null>, Prisma__reagents_on_methodsClient<reagents_on_methodsGetPayload<T> | null, null>>

    /**
     * Find the first Reagents_on_methods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reagents_on_methodsFindFirstArgs} args - Arguments to find a Reagents_on_methods
     * @example
     * // Get one Reagents_on_methods
     * const reagents_on_methods = await prisma.reagents_on_methods.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends reagents_on_methodsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, reagents_on_methodsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'reagents_on_methods'> extends True ? CheckSelect<T, Prisma__reagents_on_methodsClient<reagents_on_methods>, Prisma__reagents_on_methodsClient<reagents_on_methodsGetPayload<T>>> : CheckSelect<T, Prisma__reagents_on_methodsClient<reagents_on_methods | null, null>, Prisma__reagents_on_methodsClient<reagents_on_methodsGetPayload<T> | null, null>>

    /**
     * Find zero or more Reagents_on_methods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reagents_on_methodsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reagents_on_methods
     * const reagents_on_methods = await prisma.reagents_on_methods.findMany()
     * 
     * // Get first 10 Reagents_on_methods
     * const reagents_on_methods = await prisma.reagents_on_methods.findMany({ take: 10 })
     * 
     * // Only select the `reagent_id`
     * const reagents_on_methodsWithReagent_idOnly = await prisma.reagents_on_methods.findMany({ select: { reagent_id: true } })
     * 
    **/
    findMany<T extends reagents_on_methodsFindManyArgs>(
      args?: SelectSubset<T, reagents_on_methodsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<reagents_on_methods>>, PrismaPromise<Array<reagents_on_methodsGetPayload<T>>>>

    /**
     * Create a Reagents_on_methods.
     * @param {reagents_on_methodsCreateArgs} args - Arguments to create a Reagents_on_methods.
     * @example
     * // Create one Reagents_on_methods
     * const Reagents_on_methods = await prisma.reagents_on_methods.create({
     *   data: {
     *     // ... data to create a Reagents_on_methods
     *   }
     * })
     * 
    **/
    create<T extends reagents_on_methodsCreateArgs>(
      args: SelectSubset<T, reagents_on_methodsCreateArgs>
    ): CheckSelect<T, Prisma__reagents_on_methodsClient<reagents_on_methods>, Prisma__reagents_on_methodsClient<reagents_on_methodsGetPayload<T>>>

    /**
     * Create many Reagents_on_methods.
     *     @param {reagents_on_methodsCreateManyArgs} args - Arguments to create many Reagents_on_methods.
     *     @example
     *     // Create many Reagents_on_methods
     *     const reagents_on_methods = await prisma.reagents_on_methods.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends reagents_on_methodsCreateManyArgs>(
      args?: SelectSubset<T, reagents_on_methodsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reagents_on_methods.
     * @param {reagents_on_methodsDeleteArgs} args - Arguments to delete one Reagents_on_methods.
     * @example
     * // Delete one Reagents_on_methods
     * const Reagents_on_methods = await prisma.reagents_on_methods.delete({
     *   where: {
     *     // ... filter to delete one Reagents_on_methods
     *   }
     * })
     * 
    **/
    delete<T extends reagents_on_methodsDeleteArgs>(
      args: SelectSubset<T, reagents_on_methodsDeleteArgs>
    ): CheckSelect<T, Prisma__reagents_on_methodsClient<reagents_on_methods>, Prisma__reagents_on_methodsClient<reagents_on_methodsGetPayload<T>>>

    /**
     * Update one Reagents_on_methods.
     * @param {reagents_on_methodsUpdateArgs} args - Arguments to update one Reagents_on_methods.
     * @example
     * // Update one Reagents_on_methods
     * const reagents_on_methods = await prisma.reagents_on_methods.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends reagents_on_methodsUpdateArgs>(
      args: SelectSubset<T, reagents_on_methodsUpdateArgs>
    ): CheckSelect<T, Prisma__reagents_on_methodsClient<reagents_on_methods>, Prisma__reagents_on_methodsClient<reagents_on_methodsGetPayload<T>>>

    /**
     * Delete zero or more Reagents_on_methods.
     * @param {reagents_on_methodsDeleteManyArgs} args - Arguments to filter Reagents_on_methods to delete.
     * @example
     * // Delete a few Reagents_on_methods
     * const { count } = await prisma.reagents_on_methods.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends reagents_on_methodsDeleteManyArgs>(
      args?: SelectSubset<T, reagents_on_methodsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reagents_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reagents_on_methodsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reagents_on_methods
     * const reagents_on_methods = await prisma.reagents_on_methods.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends reagents_on_methodsUpdateManyArgs>(
      args: SelectSubset<T, reagents_on_methodsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reagents_on_methods.
     * @param {reagents_on_methodsUpsertArgs} args - Arguments to update or create a Reagents_on_methods.
     * @example
     * // Update or create a Reagents_on_methods
     * const reagents_on_methods = await prisma.reagents_on_methods.upsert({
     *   create: {
     *     // ... data to create a Reagents_on_methods
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reagents_on_methods we want to update
     *   }
     * })
    **/
    upsert<T extends reagents_on_methodsUpsertArgs>(
      args: SelectSubset<T, reagents_on_methodsUpsertArgs>
    ): CheckSelect<T, Prisma__reagents_on_methodsClient<reagents_on_methods>, Prisma__reagents_on_methodsClient<reagents_on_methodsGetPayload<T>>>

    /**
     * Find one Reagents_on_methods that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {reagents_on_methodsFindUniqueOrThrowArgs} args - Arguments to find a Reagents_on_methods
     * @example
     * // Get one Reagents_on_methods
     * const reagents_on_methods = await prisma.reagents_on_methods.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends reagents_on_methodsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, reagents_on_methodsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__reagents_on_methodsClient<reagents_on_methods>, Prisma__reagents_on_methodsClient<reagents_on_methodsGetPayload<T>>>

    /**
     * Find the first Reagents_on_methods that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reagents_on_methodsFindFirstOrThrowArgs} args - Arguments to find a Reagents_on_methods
     * @example
     * // Get one Reagents_on_methods
     * const reagents_on_methods = await prisma.reagents_on_methods.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends reagents_on_methodsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, reagents_on_methodsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__reagents_on_methodsClient<reagents_on_methods>, Prisma__reagents_on_methodsClient<reagents_on_methodsGetPayload<T>>>

    /**
     * Count the number of Reagents_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reagents_on_methodsCountArgs} args - Arguments to filter Reagents_on_methods to count.
     * @example
     * // Count the number of Reagents_on_methods
     * const count = await prisma.reagents_on_methods.count({
     *   where: {
     *     // ... the filter for the Reagents_on_methods we want to count
     *   }
     * })
    **/
    count<T extends reagents_on_methodsCountArgs>(
      args?: Subset<T, reagents_on_methodsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Reagents_on_methodsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reagents_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Reagents_on_methodsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Reagents_on_methodsAggregateArgs>(args: Subset<T, Reagents_on_methodsAggregateArgs>): PrismaPromise<GetReagents_on_methodsAggregateType<T>>

    /**
     * Group by Reagents_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Reagents_on_methodsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Reagents_on_methodsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Reagents_on_methodsGroupByArgs['orderBy'] }
        : { orderBy?: Reagents_on_methodsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Reagents_on_methodsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReagents_on_methodsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for reagents_on_methods.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__reagents_on_methodsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    reagent<T extends reagentArgs = {}>(args?: Subset<T, reagentArgs>): CheckSelect<T, Prisma__reagentClient<reagent | Null>, Prisma__reagentClient<reagentGetPayload<T> | Null>>;

    method<T extends methodArgs = {}>(args?: Subset<T, methodArgs>): CheckSelect<T, Prisma__methodClient<method | Null>, Prisma__methodClient<methodGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * reagents_on_methods base type for findUnique actions
   */
  export type reagents_on_methodsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the reagents_on_methods
     * 
    **/
    select?: reagents_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagents_on_methodsInclude | null
    /**
     * Filter, which reagents_on_methods to fetch.
     * 
    **/
    where: reagents_on_methodsWhereUniqueInput
  }

  /**
   * reagents_on_methods: findUnique
   */
  export interface reagents_on_methodsFindUniqueArgs extends reagents_on_methodsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reagents_on_methods base type for findFirst actions
   */
  export type reagents_on_methodsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the reagents_on_methods
     * 
    **/
    select?: reagents_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagents_on_methodsInclude | null
    /**
     * Filter, which reagents_on_methods to fetch.
     * 
    **/
    where?: reagents_on_methodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reagents_on_methods to fetch.
     * 
    **/
    orderBy?: Enumerable<reagents_on_methodsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reagents_on_methods.
     * 
    **/
    cursor?: reagents_on_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reagents_on_methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reagents_on_methods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reagents_on_methods.
     * 
    **/
    distinct?: Enumerable<Reagents_on_methodsScalarFieldEnum>
  }

  /**
   * reagents_on_methods: findFirst
   */
  export interface reagents_on_methodsFindFirstArgs extends reagents_on_methodsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reagents_on_methods findMany
   */
  export type reagents_on_methodsFindManyArgs = {
    /**
     * Select specific fields to fetch from the reagents_on_methods
     * 
    **/
    select?: reagents_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagents_on_methodsInclude | null
    /**
     * Filter, which reagents_on_methods to fetch.
     * 
    **/
    where?: reagents_on_methodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reagents_on_methods to fetch.
     * 
    **/
    orderBy?: Enumerable<reagents_on_methodsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reagents_on_methods.
     * 
    **/
    cursor?: reagents_on_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reagents_on_methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reagents_on_methods.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Reagents_on_methodsScalarFieldEnum>
  }


  /**
   * reagents_on_methods create
   */
  export type reagents_on_methodsCreateArgs = {
    /**
     * Select specific fields to fetch from the reagents_on_methods
     * 
    **/
    select?: reagents_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagents_on_methodsInclude | null
    /**
     * The data needed to create a reagents_on_methods.
     * 
    **/
    data: XOR<reagents_on_methodsCreateInput, reagents_on_methodsUncheckedCreateInput>
  }


  /**
   * reagents_on_methods createMany
   */
  export type reagents_on_methodsCreateManyArgs = {
    /**
     * The data used to create many reagents_on_methods.
     * 
    **/
    data: Enumerable<reagents_on_methodsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * reagents_on_methods update
   */
  export type reagents_on_methodsUpdateArgs = {
    /**
     * Select specific fields to fetch from the reagents_on_methods
     * 
    **/
    select?: reagents_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagents_on_methodsInclude | null
    /**
     * The data needed to update a reagents_on_methods.
     * 
    **/
    data: XOR<reagents_on_methodsUpdateInput, reagents_on_methodsUncheckedUpdateInput>
    /**
     * Choose, which reagents_on_methods to update.
     * 
    **/
    where: reagents_on_methodsWhereUniqueInput
  }


  /**
   * reagents_on_methods updateMany
   */
  export type reagents_on_methodsUpdateManyArgs = {
    /**
     * The data used to update reagents_on_methods.
     * 
    **/
    data: XOR<reagents_on_methodsUpdateManyMutationInput, reagents_on_methodsUncheckedUpdateManyInput>
    /**
     * Filter which reagents_on_methods to update
     * 
    **/
    where?: reagents_on_methodsWhereInput
  }


  /**
   * reagents_on_methods upsert
   */
  export type reagents_on_methodsUpsertArgs = {
    /**
     * Select specific fields to fetch from the reagents_on_methods
     * 
    **/
    select?: reagents_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagents_on_methodsInclude | null
    /**
     * The filter to search for the reagents_on_methods to update in case it exists.
     * 
    **/
    where: reagents_on_methodsWhereUniqueInput
    /**
     * In case the reagents_on_methods found by the `where` argument doesn't exist, create a new reagents_on_methods with this data.
     * 
    **/
    create: XOR<reagents_on_methodsCreateInput, reagents_on_methodsUncheckedCreateInput>
    /**
     * In case the reagents_on_methods was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<reagents_on_methodsUpdateInput, reagents_on_methodsUncheckedUpdateInput>
  }


  /**
   * reagents_on_methods delete
   */
  export type reagents_on_methodsDeleteArgs = {
    /**
     * Select specific fields to fetch from the reagents_on_methods
     * 
    **/
    select?: reagents_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagents_on_methodsInclude | null
    /**
     * Filter which reagents_on_methods to delete.
     * 
    **/
    where: reagents_on_methodsWhereUniqueInput
  }


  /**
   * reagents_on_methods deleteMany
   */
  export type reagents_on_methodsDeleteManyArgs = {
    /**
     * Filter which reagents_on_methods to delete
     * 
    **/
    where?: reagents_on_methodsWhereInput
  }


  /**
   * reagents_on_methods: findUniqueOrThrow
   */
  export type reagents_on_methodsFindUniqueOrThrowArgs = reagents_on_methodsFindUniqueArgsBase
      

  /**
   * reagents_on_methods: findFirstOrThrow
   */
  export type reagents_on_methodsFindFirstOrThrowArgs = reagents_on_methodsFindFirstArgsBase
      

  /**
   * reagents_on_methods without action
   */
  export type reagents_on_methodsArgs = {
    /**
     * Select specific fields to fetch from the reagents_on_methods
     * 
    **/
    select?: reagents_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reagents_on_methodsInclude | null
  }



  /**
   * Model devices_on_methods
   */


  export type AggregateDevices_on_methods = {
    _count: Devices_on_methodsCountAggregateOutputType | null
    _avg: Devices_on_methodsAvgAggregateOutputType | null
    _sum: Devices_on_methodsSumAggregateOutputType | null
    _min: Devices_on_methodsMinAggregateOutputType | null
    _max: Devices_on_methodsMaxAggregateOutputType | null
  }

  export type Devices_on_methodsAvgAggregateOutputType = {
    device_id: number | null
    method_id: number | null
  }

  export type Devices_on_methodsSumAggregateOutputType = {
    device_id: number | null
    method_id: number | null
  }

  export type Devices_on_methodsMinAggregateOutputType = {
    device_id: number | null
    method_id: number | null
  }

  export type Devices_on_methodsMaxAggregateOutputType = {
    device_id: number | null
    method_id: number | null
  }

  export type Devices_on_methodsCountAggregateOutputType = {
    device_id: number
    method_id: number
    _all: number
  }


  export type Devices_on_methodsAvgAggregateInputType = {
    device_id?: true
    method_id?: true
  }

  export type Devices_on_methodsSumAggregateInputType = {
    device_id?: true
    method_id?: true
  }

  export type Devices_on_methodsMinAggregateInputType = {
    device_id?: true
    method_id?: true
  }

  export type Devices_on_methodsMaxAggregateInputType = {
    device_id?: true
    method_id?: true
  }

  export type Devices_on_methodsCountAggregateInputType = {
    device_id?: true
    method_id?: true
    _all?: true
  }

  export type Devices_on_methodsAggregateArgs = {
    /**
     * Filter which devices_on_methods to aggregate.
     * 
    **/
    where?: devices_on_methodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices_on_methods to fetch.
     * 
    **/
    orderBy?: Enumerable<devices_on_methodsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: devices_on_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices_on_methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices_on_methods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned devices_on_methods
    **/
    _count?: true | Devices_on_methodsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Devices_on_methodsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Devices_on_methodsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Devices_on_methodsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Devices_on_methodsMaxAggregateInputType
  }

  export type GetDevices_on_methodsAggregateType<T extends Devices_on_methodsAggregateArgs> = {
        [P in keyof T & keyof AggregateDevices_on_methods]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDevices_on_methods[P]>
      : GetScalarType<T[P], AggregateDevices_on_methods[P]>
  }




  export type Devices_on_methodsGroupByArgs = {
    where?: devices_on_methodsWhereInput
    orderBy?: Enumerable<devices_on_methodsOrderByWithAggregationInput>
    by: Array<Devices_on_methodsScalarFieldEnum>
    having?: devices_on_methodsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Devices_on_methodsCountAggregateInputType | true
    _avg?: Devices_on_methodsAvgAggregateInputType
    _sum?: Devices_on_methodsSumAggregateInputType
    _min?: Devices_on_methodsMinAggregateInputType
    _max?: Devices_on_methodsMaxAggregateInputType
  }


  export type Devices_on_methodsGroupByOutputType = {
    device_id: number
    method_id: number
    _count: Devices_on_methodsCountAggregateOutputType | null
    _avg: Devices_on_methodsAvgAggregateOutputType | null
    _sum: Devices_on_methodsSumAggregateOutputType | null
    _min: Devices_on_methodsMinAggregateOutputType | null
    _max: Devices_on_methodsMaxAggregateOutputType | null
  }

  type GetDevices_on_methodsGroupByPayload<T extends Devices_on_methodsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Devices_on_methodsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Devices_on_methodsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Devices_on_methodsGroupByOutputType[P]>
            : GetScalarType<T[P], Devices_on_methodsGroupByOutputType[P]>
        }
      >
    >


  export type devices_on_methodsSelect = {
    device?: boolean | deviceArgs
    device_id?: boolean
    method?: boolean | methodArgs
    method_id?: boolean
  }

  export type devices_on_methodsInclude = {
    device?: boolean | deviceArgs
    method?: boolean | methodArgs
  }

  export type devices_on_methodsGetPayload<
    S extends boolean | null | undefined | devices_on_methodsArgs,
    U = keyof S
      > = S extends true
        ? devices_on_methods
    : S extends undefined
    ? never
    : S extends devices_on_methodsArgs | devices_on_methodsFindManyArgs
    ?'include' extends U
    ? devices_on_methods  & {
    [P in TrueKeys<S['include']>]:
        P extends 'device' ? deviceGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'method' ? methodGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'device' ? deviceGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'method' ? methodGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof devices_on_methods ? devices_on_methods[P] : never
  } 
    : devices_on_methods
  : devices_on_methods


  type devices_on_methodsCountArgs = Merge<
    Omit<devices_on_methodsFindManyArgs, 'select' | 'include'> & {
      select?: Devices_on_methodsCountAggregateInputType | true
    }
  >

  export interface devices_on_methodsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Devices_on_methods that matches the filter.
     * @param {devices_on_methodsFindUniqueArgs} args - Arguments to find a Devices_on_methods
     * @example
     * // Get one Devices_on_methods
     * const devices_on_methods = await prisma.devices_on_methods.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends devices_on_methodsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, devices_on_methodsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'devices_on_methods'> extends True ? CheckSelect<T, Prisma__devices_on_methodsClient<devices_on_methods>, Prisma__devices_on_methodsClient<devices_on_methodsGetPayload<T>>> : CheckSelect<T, Prisma__devices_on_methodsClient<devices_on_methods | null, null>, Prisma__devices_on_methodsClient<devices_on_methodsGetPayload<T> | null, null>>

    /**
     * Find the first Devices_on_methods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devices_on_methodsFindFirstArgs} args - Arguments to find a Devices_on_methods
     * @example
     * // Get one Devices_on_methods
     * const devices_on_methods = await prisma.devices_on_methods.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends devices_on_methodsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, devices_on_methodsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'devices_on_methods'> extends True ? CheckSelect<T, Prisma__devices_on_methodsClient<devices_on_methods>, Prisma__devices_on_methodsClient<devices_on_methodsGetPayload<T>>> : CheckSelect<T, Prisma__devices_on_methodsClient<devices_on_methods | null, null>, Prisma__devices_on_methodsClient<devices_on_methodsGetPayload<T> | null, null>>

    /**
     * Find zero or more Devices_on_methods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devices_on_methodsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Devices_on_methods
     * const devices_on_methods = await prisma.devices_on_methods.findMany()
     * 
     * // Get first 10 Devices_on_methods
     * const devices_on_methods = await prisma.devices_on_methods.findMany({ take: 10 })
     * 
     * // Only select the `device_id`
     * const devices_on_methodsWithDevice_idOnly = await prisma.devices_on_methods.findMany({ select: { device_id: true } })
     * 
    **/
    findMany<T extends devices_on_methodsFindManyArgs>(
      args?: SelectSubset<T, devices_on_methodsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<devices_on_methods>>, PrismaPromise<Array<devices_on_methodsGetPayload<T>>>>

    /**
     * Create a Devices_on_methods.
     * @param {devices_on_methodsCreateArgs} args - Arguments to create a Devices_on_methods.
     * @example
     * // Create one Devices_on_methods
     * const Devices_on_methods = await prisma.devices_on_methods.create({
     *   data: {
     *     // ... data to create a Devices_on_methods
     *   }
     * })
     * 
    **/
    create<T extends devices_on_methodsCreateArgs>(
      args: SelectSubset<T, devices_on_methodsCreateArgs>
    ): CheckSelect<T, Prisma__devices_on_methodsClient<devices_on_methods>, Prisma__devices_on_methodsClient<devices_on_methodsGetPayload<T>>>

    /**
     * Create many Devices_on_methods.
     *     @param {devices_on_methodsCreateManyArgs} args - Arguments to create many Devices_on_methods.
     *     @example
     *     // Create many Devices_on_methods
     *     const devices_on_methods = await prisma.devices_on_methods.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends devices_on_methodsCreateManyArgs>(
      args?: SelectSubset<T, devices_on_methodsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Devices_on_methods.
     * @param {devices_on_methodsDeleteArgs} args - Arguments to delete one Devices_on_methods.
     * @example
     * // Delete one Devices_on_methods
     * const Devices_on_methods = await prisma.devices_on_methods.delete({
     *   where: {
     *     // ... filter to delete one Devices_on_methods
     *   }
     * })
     * 
    **/
    delete<T extends devices_on_methodsDeleteArgs>(
      args: SelectSubset<T, devices_on_methodsDeleteArgs>
    ): CheckSelect<T, Prisma__devices_on_methodsClient<devices_on_methods>, Prisma__devices_on_methodsClient<devices_on_methodsGetPayload<T>>>

    /**
     * Update one Devices_on_methods.
     * @param {devices_on_methodsUpdateArgs} args - Arguments to update one Devices_on_methods.
     * @example
     * // Update one Devices_on_methods
     * const devices_on_methods = await prisma.devices_on_methods.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends devices_on_methodsUpdateArgs>(
      args: SelectSubset<T, devices_on_methodsUpdateArgs>
    ): CheckSelect<T, Prisma__devices_on_methodsClient<devices_on_methods>, Prisma__devices_on_methodsClient<devices_on_methodsGetPayload<T>>>

    /**
     * Delete zero or more Devices_on_methods.
     * @param {devices_on_methodsDeleteManyArgs} args - Arguments to filter Devices_on_methods to delete.
     * @example
     * // Delete a few Devices_on_methods
     * const { count } = await prisma.devices_on_methods.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends devices_on_methodsDeleteManyArgs>(
      args?: SelectSubset<T, devices_on_methodsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Devices_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devices_on_methodsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Devices_on_methods
     * const devices_on_methods = await prisma.devices_on_methods.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends devices_on_methodsUpdateManyArgs>(
      args: SelectSubset<T, devices_on_methodsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Devices_on_methods.
     * @param {devices_on_methodsUpsertArgs} args - Arguments to update or create a Devices_on_methods.
     * @example
     * // Update or create a Devices_on_methods
     * const devices_on_methods = await prisma.devices_on_methods.upsert({
     *   create: {
     *     // ... data to create a Devices_on_methods
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Devices_on_methods we want to update
     *   }
     * })
    **/
    upsert<T extends devices_on_methodsUpsertArgs>(
      args: SelectSubset<T, devices_on_methodsUpsertArgs>
    ): CheckSelect<T, Prisma__devices_on_methodsClient<devices_on_methods>, Prisma__devices_on_methodsClient<devices_on_methodsGetPayload<T>>>

    /**
     * Find one Devices_on_methods that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {devices_on_methodsFindUniqueOrThrowArgs} args - Arguments to find a Devices_on_methods
     * @example
     * // Get one Devices_on_methods
     * const devices_on_methods = await prisma.devices_on_methods.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends devices_on_methodsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, devices_on_methodsFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__devices_on_methodsClient<devices_on_methods>, Prisma__devices_on_methodsClient<devices_on_methodsGetPayload<T>>>

    /**
     * Find the first Devices_on_methods that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devices_on_methodsFindFirstOrThrowArgs} args - Arguments to find a Devices_on_methods
     * @example
     * // Get one Devices_on_methods
     * const devices_on_methods = await prisma.devices_on_methods.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends devices_on_methodsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, devices_on_methodsFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__devices_on_methodsClient<devices_on_methods>, Prisma__devices_on_methodsClient<devices_on_methodsGetPayload<T>>>

    /**
     * Count the number of Devices_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {devices_on_methodsCountArgs} args - Arguments to filter Devices_on_methods to count.
     * @example
     * // Count the number of Devices_on_methods
     * const count = await prisma.devices_on_methods.count({
     *   where: {
     *     // ... the filter for the Devices_on_methods we want to count
     *   }
     * })
    **/
    count<T extends devices_on_methodsCountArgs>(
      args?: Subset<T, devices_on_methodsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Devices_on_methodsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Devices_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Devices_on_methodsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Devices_on_methodsAggregateArgs>(args: Subset<T, Devices_on_methodsAggregateArgs>): PrismaPromise<GetDevices_on_methodsAggregateType<T>>

    /**
     * Group by Devices_on_methods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Devices_on_methodsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Devices_on_methodsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Devices_on_methodsGroupByArgs['orderBy'] }
        : { orderBy?: Devices_on_methodsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Devices_on_methodsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDevices_on_methodsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for devices_on_methods.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__devices_on_methodsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    device<T extends deviceArgs = {}>(args?: Subset<T, deviceArgs>): CheckSelect<T, Prisma__deviceClient<device | Null>, Prisma__deviceClient<deviceGetPayload<T> | Null>>;

    method<T extends methodArgs = {}>(args?: Subset<T, methodArgs>): CheckSelect<T, Prisma__methodClient<method | Null>, Prisma__methodClient<methodGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * devices_on_methods base type for findUnique actions
   */
  export type devices_on_methodsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the devices_on_methods
     * 
    **/
    select?: devices_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: devices_on_methodsInclude | null
    /**
     * Filter, which devices_on_methods to fetch.
     * 
    **/
    where: devices_on_methodsWhereUniqueInput
  }

  /**
   * devices_on_methods: findUnique
   */
  export interface devices_on_methodsFindUniqueArgs extends devices_on_methodsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * devices_on_methods base type for findFirst actions
   */
  export type devices_on_methodsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the devices_on_methods
     * 
    **/
    select?: devices_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: devices_on_methodsInclude | null
    /**
     * Filter, which devices_on_methods to fetch.
     * 
    **/
    where?: devices_on_methodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices_on_methods to fetch.
     * 
    **/
    orderBy?: Enumerable<devices_on_methodsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for devices_on_methods.
     * 
    **/
    cursor?: devices_on_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices_on_methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices_on_methods.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of devices_on_methods.
     * 
    **/
    distinct?: Enumerable<Devices_on_methodsScalarFieldEnum>
  }

  /**
   * devices_on_methods: findFirst
   */
  export interface devices_on_methodsFindFirstArgs extends devices_on_methodsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * devices_on_methods findMany
   */
  export type devices_on_methodsFindManyArgs = {
    /**
     * Select specific fields to fetch from the devices_on_methods
     * 
    **/
    select?: devices_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: devices_on_methodsInclude | null
    /**
     * Filter, which devices_on_methods to fetch.
     * 
    **/
    where?: devices_on_methodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of devices_on_methods to fetch.
     * 
    **/
    orderBy?: Enumerable<devices_on_methodsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing devices_on_methods.
     * 
    **/
    cursor?: devices_on_methodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` devices_on_methods from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` devices_on_methods.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Devices_on_methodsScalarFieldEnum>
  }


  /**
   * devices_on_methods create
   */
  export type devices_on_methodsCreateArgs = {
    /**
     * Select specific fields to fetch from the devices_on_methods
     * 
    **/
    select?: devices_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: devices_on_methodsInclude | null
    /**
     * The data needed to create a devices_on_methods.
     * 
    **/
    data: XOR<devices_on_methodsCreateInput, devices_on_methodsUncheckedCreateInput>
  }


  /**
   * devices_on_methods createMany
   */
  export type devices_on_methodsCreateManyArgs = {
    /**
     * The data used to create many devices_on_methods.
     * 
    **/
    data: Enumerable<devices_on_methodsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * devices_on_methods update
   */
  export type devices_on_methodsUpdateArgs = {
    /**
     * Select specific fields to fetch from the devices_on_methods
     * 
    **/
    select?: devices_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: devices_on_methodsInclude | null
    /**
     * The data needed to update a devices_on_methods.
     * 
    **/
    data: XOR<devices_on_methodsUpdateInput, devices_on_methodsUncheckedUpdateInput>
    /**
     * Choose, which devices_on_methods to update.
     * 
    **/
    where: devices_on_methodsWhereUniqueInput
  }


  /**
   * devices_on_methods updateMany
   */
  export type devices_on_methodsUpdateManyArgs = {
    /**
     * The data used to update devices_on_methods.
     * 
    **/
    data: XOR<devices_on_methodsUpdateManyMutationInput, devices_on_methodsUncheckedUpdateManyInput>
    /**
     * Filter which devices_on_methods to update
     * 
    **/
    where?: devices_on_methodsWhereInput
  }


  /**
   * devices_on_methods upsert
   */
  export type devices_on_methodsUpsertArgs = {
    /**
     * Select specific fields to fetch from the devices_on_methods
     * 
    **/
    select?: devices_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: devices_on_methodsInclude | null
    /**
     * The filter to search for the devices_on_methods to update in case it exists.
     * 
    **/
    where: devices_on_methodsWhereUniqueInput
    /**
     * In case the devices_on_methods found by the `where` argument doesn't exist, create a new devices_on_methods with this data.
     * 
    **/
    create: XOR<devices_on_methodsCreateInput, devices_on_methodsUncheckedCreateInput>
    /**
     * In case the devices_on_methods was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<devices_on_methodsUpdateInput, devices_on_methodsUncheckedUpdateInput>
  }


  /**
   * devices_on_methods delete
   */
  export type devices_on_methodsDeleteArgs = {
    /**
     * Select specific fields to fetch from the devices_on_methods
     * 
    **/
    select?: devices_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: devices_on_methodsInclude | null
    /**
     * Filter which devices_on_methods to delete.
     * 
    **/
    where: devices_on_methodsWhereUniqueInput
  }


  /**
   * devices_on_methods deleteMany
   */
  export type devices_on_methodsDeleteManyArgs = {
    /**
     * Filter which devices_on_methods to delete
     * 
    **/
    where?: devices_on_methodsWhereInput
  }


  /**
   * devices_on_methods: findUniqueOrThrow
   */
  export type devices_on_methodsFindUniqueOrThrowArgs = devices_on_methodsFindUniqueArgsBase
      

  /**
   * devices_on_methods: findFirstOrThrow
   */
  export type devices_on_methodsFindFirstOrThrowArgs = devices_on_methodsFindFirstArgsBase
      

  /**
   * devices_on_methods without action
   */
  export type devices_on_methodsArgs = {
    /**
     * Select specific fields to fetch from the devices_on_methods
     * 
    **/
    select?: devices_on_methodsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: devices_on_methodsInclude | null
  }



  /**
   * Model method_step
   */


  export type AggregateMethod_step = {
    _count: Method_stepCountAggregateOutputType | null
    _avg: Method_stepAvgAggregateOutputType | null
    _sum: Method_stepSumAggregateOutputType | null
    _min: Method_stepMinAggregateOutputType | null
    _max: Method_stepMaxAggregateOutputType | null
  }

  export type Method_stepAvgAggregateOutputType = {
    id: number | null
    number: number | null
    method_id: number | null
  }

  export type Method_stepSumAggregateOutputType = {
    id: number | null
    number: number | null
    method_id: number | null
  }

  export type Method_stepMinAggregateOutputType = {
    id: number | null
    number: number | null
    day: string | null
    time: string | null
    description: string | null
    temperature: string | null
    duration: string | null
    link: string | null
    method_id: number | null
  }

  export type Method_stepMaxAggregateOutputType = {
    id: number | null
    number: number | null
    day: string | null
    time: string | null
    description: string | null
    temperature: string | null
    duration: string | null
    link: string | null
    method_id: number | null
  }

  export type Method_stepCountAggregateOutputType = {
    id: number
    number: number
    day: number
    time: number
    description: number
    temperature: number
    duration: number
    link: number
    method_id: number
    _all: number
  }


  export type Method_stepAvgAggregateInputType = {
    id?: true
    number?: true
    method_id?: true
  }

  export type Method_stepSumAggregateInputType = {
    id?: true
    number?: true
    method_id?: true
  }

  export type Method_stepMinAggregateInputType = {
    id?: true
    number?: true
    day?: true
    time?: true
    description?: true
    temperature?: true
    duration?: true
    link?: true
    method_id?: true
  }

  export type Method_stepMaxAggregateInputType = {
    id?: true
    number?: true
    day?: true
    time?: true
    description?: true
    temperature?: true
    duration?: true
    link?: true
    method_id?: true
  }

  export type Method_stepCountAggregateInputType = {
    id?: true
    number?: true
    day?: true
    time?: true
    description?: true
    temperature?: true
    duration?: true
    link?: true
    method_id?: true
    _all?: true
  }

  export type Method_stepAggregateArgs = {
    /**
     * Filter which method_step to aggregate.
     * 
    **/
    where?: method_stepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of method_steps to fetch.
     * 
    **/
    orderBy?: Enumerable<method_stepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: method_stepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` method_steps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` method_steps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned method_steps
    **/
    _count?: true | Method_stepCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Method_stepAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Method_stepSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Method_stepMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Method_stepMaxAggregateInputType
  }

  export type GetMethod_stepAggregateType<T extends Method_stepAggregateArgs> = {
        [P in keyof T & keyof AggregateMethod_step]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMethod_step[P]>
      : GetScalarType<T[P], AggregateMethod_step[P]>
  }




  export type Method_stepGroupByArgs = {
    where?: method_stepWhereInput
    orderBy?: Enumerable<method_stepOrderByWithAggregationInput>
    by: Array<Method_stepScalarFieldEnum>
    having?: method_stepScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Method_stepCountAggregateInputType | true
    _avg?: Method_stepAvgAggregateInputType
    _sum?: Method_stepSumAggregateInputType
    _min?: Method_stepMinAggregateInputType
    _max?: Method_stepMaxAggregateInputType
  }


  export type Method_stepGroupByOutputType = {
    id: number
    number: number
    day: string
    time: string
    description: string
    temperature: string | null
    duration: string | null
    link: string | null
    method_id: number | null
    _count: Method_stepCountAggregateOutputType | null
    _avg: Method_stepAvgAggregateOutputType | null
    _sum: Method_stepSumAggregateOutputType | null
    _min: Method_stepMinAggregateOutputType | null
    _max: Method_stepMaxAggregateOutputType | null
  }

  type GetMethod_stepGroupByPayload<T extends Method_stepGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Method_stepGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Method_stepGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Method_stepGroupByOutputType[P]>
            : GetScalarType<T[P], Method_stepGroupByOutputType[P]>
        }
      >
    >


  export type method_stepSelect = {
    id?: boolean
    number?: boolean
    day?: boolean
    time?: boolean
    description?: boolean
    temperature?: boolean
    duration?: boolean
    link?: boolean
    method?: boolean | methodArgs
    method_id?: boolean
  }

  export type method_stepInclude = {
    method?: boolean | methodArgs
  }

  export type method_stepGetPayload<
    S extends boolean | null | undefined | method_stepArgs,
    U = keyof S
      > = S extends true
        ? method_step
    : S extends undefined
    ? never
    : S extends method_stepArgs | method_stepFindManyArgs
    ?'include' extends U
    ? method_step  & {
    [P in TrueKeys<S['include']>]:
        P extends 'method' ? methodGetPayload<Exclude<S['include'], undefined | null>[P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'method' ? methodGetPayload<Exclude<S['select'], undefined | null>[P]> | null :  P extends keyof method_step ? method_step[P] : never
  } 
    : method_step
  : method_step


  type method_stepCountArgs = Merge<
    Omit<method_stepFindManyArgs, 'select' | 'include'> & {
      select?: Method_stepCountAggregateInputType | true
    }
  >

  export interface method_stepDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Method_step that matches the filter.
     * @param {method_stepFindUniqueArgs} args - Arguments to find a Method_step
     * @example
     * // Get one Method_step
     * const method_step = await prisma.method_step.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends method_stepFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, method_stepFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'method_step'> extends True ? CheckSelect<T, Prisma__method_stepClient<method_step>, Prisma__method_stepClient<method_stepGetPayload<T>>> : CheckSelect<T, Prisma__method_stepClient<method_step | null, null>, Prisma__method_stepClient<method_stepGetPayload<T> | null, null>>

    /**
     * Find the first Method_step that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {method_stepFindFirstArgs} args - Arguments to find a Method_step
     * @example
     * // Get one Method_step
     * const method_step = await prisma.method_step.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends method_stepFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, method_stepFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'method_step'> extends True ? CheckSelect<T, Prisma__method_stepClient<method_step>, Prisma__method_stepClient<method_stepGetPayload<T>>> : CheckSelect<T, Prisma__method_stepClient<method_step | null, null>, Prisma__method_stepClient<method_stepGetPayload<T> | null, null>>

    /**
     * Find zero or more Method_steps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {method_stepFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Method_steps
     * const method_steps = await prisma.method_step.findMany()
     * 
     * // Get first 10 Method_steps
     * const method_steps = await prisma.method_step.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const method_stepWithIdOnly = await prisma.method_step.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends method_stepFindManyArgs>(
      args?: SelectSubset<T, method_stepFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<method_step>>, PrismaPromise<Array<method_stepGetPayload<T>>>>

    /**
     * Create a Method_step.
     * @param {method_stepCreateArgs} args - Arguments to create a Method_step.
     * @example
     * // Create one Method_step
     * const Method_step = await prisma.method_step.create({
     *   data: {
     *     // ... data to create a Method_step
     *   }
     * })
     * 
    **/
    create<T extends method_stepCreateArgs>(
      args: SelectSubset<T, method_stepCreateArgs>
    ): CheckSelect<T, Prisma__method_stepClient<method_step>, Prisma__method_stepClient<method_stepGetPayload<T>>>

    /**
     * Create many Method_steps.
     *     @param {method_stepCreateManyArgs} args - Arguments to create many Method_steps.
     *     @example
     *     // Create many Method_steps
     *     const method_step = await prisma.method_step.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends method_stepCreateManyArgs>(
      args?: SelectSubset<T, method_stepCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Method_step.
     * @param {method_stepDeleteArgs} args - Arguments to delete one Method_step.
     * @example
     * // Delete one Method_step
     * const Method_step = await prisma.method_step.delete({
     *   where: {
     *     // ... filter to delete one Method_step
     *   }
     * })
     * 
    **/
    delete<T extends method_stepDeleteArgs>(
      args: SelectSubset<T, method_stepDeleteArgs>
    ): CheckSelect<T, Prisma__method_stepClient<method_step>, Prisma__method_stepClient<method_stepGetPayload<T>>>

    /**
     * Update one Method_step.
     * @param {method_stepUpdateArgs} args - Arguments to update one Method_step.
     * @example
     * // Update one Method_step
     * const method_step = await prisma.method_step.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends method_stepUpdateArgs>(
      args: SelectSubset<T, method_stepUpdateArgs>
    ): CheckSelect<T, Prisma__method_stepClient<method_step>, Prisma__method_stepClient<method_stepGetPayload<T>>>

    /**
     * Delete zero or more Method_steps.
     * @param {method_stepDeleteManyArgs} args - Arguments to filter Method_steps to delete.
     * @example
     * // Delete a few Method_steps
     * const { count } = await prisma.method_step.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends method_stepDeleteManyArgs>(
      args?: SelectSubset<T, method_stepDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Method_steps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {method_stepUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Method_steps
     * const method_step = await prisma.method_step.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends method_stepUpdateManyArgs>(
      args: SelectSubset<T, method_stepUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Method_step.
     * @param {method_stepUpsertArgs} args - Arguments to update or create a Method_step.
     * @example
     * // Update or create a Method_step
     * const method_step = await prisma.method_step.upsert({
     *   create: {
     *     // ... data to create a Method_step
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Method_step we want to update
     *   }
     * })
    **/
    upsert<T extends method_stepUpsertArgs>(
      args: SelectSubset<T, method_stepUpsertArgs>
    ): CheckSelect<T, Prisma__method_stepClient<method_step>, Prisma__method_stepClient<method_stepGetPayload<T>>>

    /**
     * Find one Method_step that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {method_stepFindUniqueOrThrowArgs} args - Arguments to find a Method_step
     * @example
     * // Get one Method_step
     * const method_step = await prisma.method_step.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends method_stepFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, method_stepFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__method_stepClient<method_step>, Prisma__method_stepClient<method_stepGetPayload<T>>>

    /**
     * Find the first Method_step that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {method_stepFindFirstOrThrowArgs} args - Arguments to find a Method_step
     * @example
     * // Get one Method_step
     * const method_step = await prisma.method_step.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends method_stepFindFirstOrThrowArgs>(
      args?: SelectSubset<T, method_stepFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__method_stepClient<method_step>, Prisma__method_stepClient<method_stepGetPayload<T>>>

    /**
     * Count the number of Method_steps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {method_stepCountArgs} args - Arguments to filter Method_steps to count.
     * @example
     * // Count the number of Method_steps
     * const count = await prisma.method_step.count({
     *   where: {
     *     // ... the filter for the Method_steps we want to count
     *   }
     * })
    **/
    count<T extends method_stepCountArgs>(
      args?: Subset<T, method_stepCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Method_stepCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Method_step.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Method_stepAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Method_stepAggregateArgs>(args: Subset<T, Method_stepAggregateArgs>): PrismaPromise<GetMethod_stepAggregateType<T>>

    /**
     * Group by Method_step.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Method_stepGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Method_stepGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Method_stepGroupByArgs['orderBy'] }
        : { orderBy?: Method_stepGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Method_stepGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMethod_stepGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for method_step.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__method_stepClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    method<T extends methodArgs = {}>(args?: Subset<T, methodArgs>): CheckSelect<T, Prisma__methodClient<method | Null>, Prisma__methodClient<methodGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * method_step base type for findUnique actions
   */
  export type method_stepFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the method_step
     * 
    **/
    select?: method_stepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_stepInclude | null
    /**
     * Filter, which method_step to fetch.
     * 
    **/
    where: method_stepWhereUniqueInput
  }

  /**
   * method_step: findUnique
   */
  export interface method_stepFindUniqueArgs extends method_stepFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * method_step base type for findFirst actions
   */
  export type method_stepFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the method_step
     * 
    **/
    select?: method_stepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_stepInclude | null
    /**
     * Filter, which method_step to fetch.
     * 
    **/
    where?: method_stepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of method_steps to fetch.
     * 
    **/
    orderBy?: Enumerable<method_stepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for method_steps.
     * 
    **/
    cursor?: method_stepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` method_steps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` method_steps.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of method_steps.
     * 
    **/
    distinct?: Enumerable<Method_stepScalarFieldEnum>
  }

  /**
   * method_step: findFirst
   */
  export interface method_stepFindFirstArgs extends method_stepFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * method_step findMany
   */
  export type method_stepFindManyArgs = {
    /**
     * Select specific fields to fetch from the method_step
     * 
    **/
    select?: method_stepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_stepInclude | null
    /**
     * Filter, which method_steps to fetch.
     * 
    **/
    where?: method_stepWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of method_steps to fetch.
     * 
    **/
    orderBy?: Enumerable<method_stepOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing method_steps.
     * 
    **/
    cursor?: method_stepWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` method_steps from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` method_steps.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Method_stepScalarFieldEnum>
  }


  /**
   * method_step create
   */
  export type method_stepCreateArgs = {
    /**
     * Select specific fields to fetch from the method_step
     * 
    **/
    select?: method_stepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_stepInclude | null
    /**
     * The data needed to create a method_step.
     * 
    **/
    data: XOR<method_stepCreateInput, method_stepUncheckedCreateInput>
  }


  /**
   * method_step createMany
   */
  export type method_stepCreateManyArgs = {
    /**
     * The data used to create many method_steps.
     * 
    **/
    data: Enumerable<method_stepCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * method_step update
   */
  export type method_stepUpdateArgs = {
    /**
     * Select specific fields to fetch from the method_step
     * 
    **/
    select?: method_stepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_stepInclude | null
    /**
     * The data needed to update a method_step.
     * 
    **/
    data: XOR<method_stepUpdateInput, method_stepUncheckedUpdateInput>
    /**
     * Choose, which method_step to update.
     * 
    **/
    where: method_stepWhereUniqueInput
  }


  /**
   * method_step updateMany
   */
  export type method_stepUpdateManyArgs = {
    /**
     * The data used to update method_steps.
     * 
    **/
    data: XOR<method_stepUpdateManyMutationInput, method_stepUncheckedUpdateManyInput>
    /**
     * Filter which method_steps to update
     * 
    **/
    where?: method_stepWhereInput
  }


  /**
   * method_step upsert
   */
  export type method_stepUpsertArgs = {
    /**
     * Select specific fields to fetch from the method_step
     * 
    **/
    select?: method_stepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_stepInclude | null
    /**
     * The filter to search for the method_step to update in case it exists.
     * 
    **/
    where: method_stepWhereUniqueInput
    /**
     * In case the method_step found by the `where` argument doesn't exist, create a new method_step with this data.
     * 
    **/
    create: XOR<method_stepCreateInput, method_stepUncheckedCreateInput>
    /**
     * In case the method_step was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<method_stepUpdateInput, method_stepUncheckedUpdateInput>
  }


  /**
   * method_step delete
   */
  export type method_stepDeleteArgs = {
    /**
     * Select specific fields to fetch from the method_step
     * 
    **/
    select?: method_stepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_stepInclude | null
    /**
     * Filter which method_step to delete.
     * 
    **/
    where: method_stepWhereUniqueInput
  }


  /**
   * method_step deleteMany
   */
  export type method_stepDeleteManyArgs = {
    /**
     * Filter which method_steps to delete
     * 
    **/
    where?: method_stepWhereInput
  }


  /**
   * method_step: findUniqueOrThrow
   */
  export type method_stepFindUniqueOrThrowArgs = method_stepFindUniqueArgsBase
      

  /**
   * method_step: findFirstOrThrow
   */
  export type method_stepFindFirstOrThrowArgs = method_stepFindFirstArgsBase
      

  /**
   * method_step without action
   */
  export type method_stepArgs = {
    /**
     * Select specific fields to fetch from the method_step
     * 
    **/
    select?: method_stepSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_stepInclude | null
  }



  /**
   * Model method_sample
   */


  export type AggregateMethod_sample = {
    _count: Method_sampleCountAggregateOutputType | null
    _avg: Method_sampleAvgAggregateOutputType | null
    _sum: Method_sampleSumAggregateOutputType | null
    _min: Method_sampleMinAggregateOutputType | null
    _max: Method_sampleMaxAggregateOutputType | null
  }

  export type Method_sampleAvgAggregateOutputType = {
    id: number | null
    reference_number: number | null
    method_id: number | null
  }

  export type Method_sampleSumAggregateOutputType = {
    id: number | null
    reference_number: number | null
    method_id: number | null
  }

  export type Method_sampleMinAggregateOutputType = {
    id: number | null
    reference_number: number | null
    name: string | null
    method_id: number | null
  }

  export type Method_sampleMaxAggregateOutputType = {
    id: number | null
    reference_number: number | null
    name: string | null
    method_id: number | null
  }

  export type Method_sampleCountAggregateOutputType = {
    id: number
    reference_number: number
    name: number
    conditions: number
    method_id: number
    _all: number
  }


  export type Method_sampleAvgAggregateInputType = {
    id?: true
    reference_number?: true
    method_id?: true
  }

  export type Method_sampleSumAggregateInputType = {
    id?: true
    reference_number?: true
    method_id?: true
  }

  export type Method_sampleMinAggregateInputType = {
    id?: true
    reference_number?: true
    name?: true
    method_id?: true
  }

  export type Method_sampleMaxAggregateInputType = {
    id?: true
    reference_number?: true
    name?: true
    method_id?: true
  }

  export type Method_sampleCountAggregateInputType = {
    id?: true
    reference_number?: true
    name?: true
    conditions?: true
    method_id?: true
    _all?: true
  }

  export type Method_sampleAggregateArgs = {
    /**
     * Filter which method_sample to aggregate.
     * 
    **/
    where?: method_sampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of method_samples to fetch.
     * 
    **/
    orderBy?: Enumerable<method_sampleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: method_sampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` method_samples from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` method_samples.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned method_samples
    **/
    _count?: true | Method_sampleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Method_sampleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Method_sampleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Method_sampleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Method_sampleMaxAggregateInputType
  }

  export type GetMethod_sampleAggregateType<T extends Method_sampleAggregateArgs> = {
        [P in keyof T & keyof AggregateMethod_sample]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMethod_sample[P]>
      : GetScalarType<T[P], AggregateMethod_sample[P]>
  }




  export type Method_sampleGroupByArgs = {
    where?: method_sampleWhereInput
    orderBy?: Enumerable<method_sampleOrderByWithAggregationInput>
    by: Array<Method_sampleScalarFieldEnum>
    having?: method_sampleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Method_sampleCountAggregateInputType | true
    _avg?: Method_sampleAvgAggregateInputType
    _sum?: Method_sampleSumAggregateInputType
    _min?: Method_sampleMinAggregateInputType
    _max?: Method_sampleMaxAggregateInputType
  }


  export type Method_sampleGroupByOutputType = {
    id: number
    reference_number: number
    name: string | null
    conditions: JsonValue | null
    method_id: number
    _count: Method_sampleCountAggregateOutputType | null
    _avg: Method_sampleAvgAggregateOutputType | null
    _sum: Method_sampleSumAggregateOutputType | null
    _min: Method_sampleMinAggregateOutputType | null
    _max: Method_sampleMaxAggregateOutputType | null
  }

  type GetMethod_sampleGroupByPayload<T extends Method_sampleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Method_sampleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Method_sampleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Method_sampleGroupByOutputType[P]>
            : GetScalarType<T[P], Method_sampleGroupByOutputType[P]>
        }
      >
    >


  export type method_sampleSelect = {
    id?: boolean
    reference_number?: boolean
    name?: boolean
    conditions?: boolean
    method?: boolean | methodArgs
    method_id?: boolean
  }

  export type method_sampleInclude = {
    method?: boolean | methodArgs
  }

  export type method_sampleGetPayload<
    S extends boolean | null | undefined | method_sampleArgs,
    U = keyof S
      > = S extends true
        ? method_sample
    : S extends undefined
    ? never
    : S extends method_sampleArgs | method_sampleFindManyArgs
    ?'include' extends U
    ? method_sample  & {
    [P in TrueKeys<S['include']>]:
        P extends 'method' ? methodGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'method' ? methodGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof method_sample ? method_sample[P] : never
  } 
    : method_sample
  : method_sample


  type method_sampleCountArgs = Merge<
    Omit<method_sampleFindManyArgs, 'select' | 'include'> & {
      select?: Method_sampleCountAggregateInputType | true
    }
  >

  export interface method_sampleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Method_sample that matches the filter.
     * @param {method_sampleFindUniqueArgs} args - Arguments to find a Method_sample
     * @example
     * // Get one Method_sample
     * const method_sample = await prisma.method_sample.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends method_sampleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, method_sampleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'method_sample'> extends True ? CheckSelect<T, Prisma__method_sampleClient<method_sample>, Prisma__method_sampleClient<method_sampleGetPayload<T>>> : CheckSelect<T, Prisma__method_sampleClient<method_sample | null, null>, Prisma__method_sampleClient<method_sampleGetPayload<T> | null, null>>

    /**
     * Find the first Method_sample that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {method_sampleFindFirstArgs} args - Arguments to find a Method_sample
     * @example
     * // Get one Method_sample
     * const method_sample = await prisma.method_sample.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends method_sampleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, method_sampleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'method_sample'> extends True ? CheckSelect<T, Prisma__method_sampleClient<method_sample>, Prisma__method_sampleClient<method_sampleGetPayload<T>>> : CheckSelect<T, Prisma__method_sampleClient<method_sample | null, null>, Prisma__method_sampleClient<method_sampleGetPayload<T> | null, null>>

    /**
     * Find zero or more Method_samples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {method_sampleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Method_samples
     * const method_samples = await prisma.method_sample.findMany()
     * 
     * // Get first 10 Method_samples
     * const method_samples = await prisma.method_sample.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const method_sampleWithIdOnly = await prisma.method_sample.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends method_sampleFindManyArgs>(
      args?: SelectSubset<T, method_sampleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<method_sample>>, PrismaPromise<Array<method_sampleGetPayload<T>>>>

    /**
     * Create a Method_sample.
     * @param {method_sampleCreateArgs} args - Arguments to create a Method_sample.
     * @example
     * // Create one Method_sample
     * const Method_sample = await prisma.method_sample.create({
     *   data: {
     *     // ... data to create a Method_sample
     *   }
     * })
     * 
    **/
    create<T extends method_sampleCreateArgs>(
      args: SelectSubset<T, method_sampleCreateArgs>
    ): CheckSelect<T, Prisma__method_sampleClient<method_sample>, Prisma__method_sampleClient<method_sampleGetPayload<T>>>

    /**
     * Create many Method_samples.
     *     @param {method_sampleCreateManyArgs} args - Arguments to create many Method_samples.
     *     @example
     *     // Create many Method_samples
     *     const method_sample = await prisma.method_sample.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends method_sampleCreateManyArgs>(
      args?: SelectSubset<T, method_sampleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Method_sample.
     * @param {method_sampleDeleteArgs} args - Arguments to delete one Method_sample.
     * @example
     * // Delete one Method_sample
     * const Method_sample = await prisma.method_sample.delete({
     *   where: {
     *     // ... filter to delete one Method_sample
     *   }
     * })
     * 
    **/
    delete<T extends method_sampleDeleteArgs>(
      args: SelectSubset<T, method_sampleDeleteArgs>
    ): CheckSelect<T, Prisma__method_sampleClient<method_sample>, Prisma__method_sampleClient<method_sampleGetPayload<T>>>

    /**
     * Update one Method_sample.
     * @param {method_sampleUpdateArgs} args - Arguments to update one Method_sample.
     * @example
     * // Update one Method_sample
     * const method_sample = await prisma.method_sample.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends method_sampleUpdateArgs>(
      args: SelectSubset<T, method_sampleUpdateArgs>
    ): CheckSelect<T, Prisma__method_sampleClient<method_sample>, Prisma__method_sampleClient<method_sampleGetPayload<T>>>

    /**
     * Delete zero or more Method_samples.
     * @param {method_sampleDeleteManyArgs} args - Arguments to filter Method_samples to delete.
     * @example
     * // Delete a few Method_samples
     * const { count } = await prisma.method_sample.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends method_sampleDeleteManyArgs>(
      args?: SelectSubset<T, method_sampleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Method_samples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {method_sampleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Method_samples
     * const method_sample = await prisma.method_sample.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends method_sampleUpdateManyArgs>(
      args: SelectSubset<T, method_sampleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Method_sample.
     * @param {method_sampleUpsertArgs} args - Arguments to update or create a Method_sample.
     * @example
     * // Update or create a Method_sample
     * const method_sample = await prisma.method_sample.upsert({
     *   create: {
     *     // ... data to create a Method_sample
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Method_sample we want to update
     *   }
     * })
    **/
    upsert<T extends method_sampleUpsertArgs>(
      args: SelectSubset<T, method_sampleUpsertArgs>
    ): CheckSelect<T, Prisma__method_sampleClient<method_sample>, Prisma__method_sampleClient<method_sampleGetPayload<T>>>

    /**
     * Find one Method_sample that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {method_sampleFindUniqueOrThrowArgs} args - Arguments to find a Method_sample
     * @example
     * // Get one Method_sample
     * const method_sample = await prisma.method_sample.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends method_sampleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, method_sampleFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__method_sampleClient<method_sample>, Prisma__method_sampleClient<method_sampleGetPayload<T>>>

    /**
     * Find the first Method_sample that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {method_sampleFindFirstOrThrowArgs} args - Arguments to find a Method_sample
     * @example
     * // Get one Method_sample
     * const method_sample = await prisma.method_sample.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends method_sampleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, method_sampleFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__method_sampleClient<method_sample>, Prisma__method_sampleClient<method_sampleGetPayload<T>>>

    /**
     * Count the number of Method_samples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {method_sampleCountArgs} args - Arguments to filter Method_samples to count.
     * @example
     * // Count the number of Method_samples
     * const count = await prisma.method_sample.count({
     *   where: {
     *     // ... the filter for the Method_samples we want to count
     *   }
     * })
    **/
    count<T extends method_sampleCountArgs>(
      args?: Subset<T, method_sampleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Method_sampleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Method_sample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Method_sampleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Method_sampleAggregateArgs>(args: Subset<T, Method_sampleAggregateArgs>): PrismaPromise<GetMethod_sampleAggregateType<T>>

    /**
     * Group by Method_sample.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Method_sampleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Method_sampleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Method_sampleGroupByArgs['orderBy'] }
        : { orderBy?: Method_sampleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Method_sampleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMethod_sampleGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for method_sample.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__method_sampleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    method<T extends methodArgs = {}>(args?: Subset<T, methodArgs>): CheckSelect<T, Prisma__methodClient<method | Null>, Prisma__methodClient<methodGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * method_sample base type for findUnique actions
   */
  export type method_sampleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the method_sample
     * 
    **/
    select?: method_sampleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_sampleInclude | null
    /**
     * Filter, which method_sample to fetch.
     * 
    **/
    where: method_sampleWhereUniqueInput
  }

  /**
   * method_sample: findUnique
   */
  export interface method_sampleFindUniqueArgs extends method_sampleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * method_sample base type for findFirst actions
   */
  export type method_sampleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the method_sample
     * 
    **/
    select?: method_sampleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_sampleInclude | null
    /**
     * Filter, which method_sample to fetch.
     * 
    **/
    where?: method_sampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of method_samples to fetch.
     * 
    **/
    orderBy?: Enumerable<method_sampleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for method_samples.
     * 
    **/
    cursor?: method_sampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` method_samples from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` method_samples.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of method_samples.
     * 
    **/
    distinct?: Enumerable<Method_sampleScalarFieldEnum>
  }

  /**
   * method_sample: findFirst
   */
  export interface method_sampleFindFirstArgs extends method_sampleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * method_sample findMany
   */
  export type method_sampleFindManyArgs = {
    /**
     * Select specific fields to fetch from the method_sample
     * 
    **/
    select?: method_sampleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_sampleInclude | null
    /**
     * Filter, which method_samples to fetch.
     * 
    **/
    where?: method_sampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of method_samples to fetch.
     * 
    **/
    orderBy?: Enumerable<method_sampleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing method_samples.
     * 
    **/
    cursor?: method_sampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` method_samples from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` method_samples.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Method_sampleScalarFieldEnum>
  }


  /**
   * method_sample create
   */
  export type method_sampleCreateArgs = {
    /**
     * Select specific fields to fetch from the method_sample
     * 
    **/
    select?: method_sampleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_sampleInclude | null
    /**
     * The data needed to create a method_sample.
     * 
    **/
    data: XOR<method_sampleCreateInput, method_sampleUncheckedCreateInput>
  }


  /**
   * method_sample createMany
   */
  export type method_sampleCreateManyArgs = {
    /**
     * The data used to create many method_samples.
     * 
    **/
    data: Enumerable<method_sampleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * method_sample update
   */
  export type method_sampleUpdateArgs = {
    /**
     * Select specific fields to fetch from the method_sample
     * 
    **/
    select?: method_sampleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_sampleInclude | null
    /**
     * The data needed to update a method_sample.
     * 
    **/
    data: XOR<method_sampleUpdateInput, method_sampleUncheckedUpdateInput>
    /**
     * Choose, which method_sample to update.
     * 
    **/
    where: method_sampleWhereUniqueInput
  }


  /**
   * method_sample updateMany
   */
  export type method_sampleUpdateManyArgs = {
    /**
     * The data used to update method_samples.
     * 
    **/
    data: XOR<method_sampleUpdateManyMutationInput, method_sampleUncheckedUpdateManyInput>
    /**
     * Filter which method_samples to update
     * 
    **/
    where?: method_sampleWhereInput
  }


  /**
   * method_sample upsert
   */
  export type method_sampleUpsertArgs = {
    /**
     * Select specific fields to fetch from the method_sample
     * 
    **/
    select?: method_sampleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_sampleInclude | null
    /**
     * The filter to search for the method_sample to update in case it exists.
     * 
    **/
    where: method_sampleWhereUniqueInput
    /**
     * In case the method_sample found by the `where` argument doesn't exist, create a new method_sample with this data.
     * 
    **/
    create: XOR<method_sampleCreateInput, method_sampleUncheckedCreateInput>
    /**
     * In case the method_sample was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<method_sampleUpdateInput, method_sampleUncheckedUpdateInput>
  }


  /**
   * method_sample delete
   */
  export type method_sampleDeleteArgs = {
    /**
     * Select specific fields to fetch from the method_sample
     * 
    **/
    select?: method_sampleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_sampleInclude | null
    /**
     * Filter which method_sample to delete.
     * 
    **/
    where: method_sampleWhereUniqueInput
  }


  /**
   * method_sample deleteMany
   */
  export type method_sampleDeleteManyArgs = {
    /**
     * Filter which method_samples to delete
     * 
    **/
    where?: method_sampleWhereInput
  }


  /**
   * method_sample: findUniqueOrThrow
   */
  export type method_sampleFindUniqueOrThrowArgs = method_sampleFindUniqueArgsBase
      

  /**
   * method_sample: findFirstOrThrow
   */
  export type method_sampleFindFirstOrThrowArgs = method_sampleFindFirstArgsBase
      

  /**
   * method_sample without action
   */
  export type method_sampleArgs = {
    /**
     * Select specific fields to fetch from the method_sample
     * 
    **/
    select?: method_sampleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: method_sampleInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    user_id: 'user_id'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    y_position: 'y_position',
    x_position: 'x_position',
    is_important: 'is_important',
    method_id: 'method_id'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const DeviceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    company: 'company',
    product_id: 'product_id',
    link: 'link',
    type: 'type',
    user_id: 'user_id'
  };

  export type DeviceScalarFieldEnum = (typeof DeviceScalarFieldEnum)[keyof typeof DeviceScalarFieldEnum]


  export const Devices_on_methodsScalarFieldEnum: {
    device_id: 'device_id',
    method_id: 'method_id'
  };

  export type Devices_on_methodsScalarFieldEnum = (typeof Devices_on_methodsScalarFieldEnum)[keyof typeof Devices_on_methodsScalarFieldEnum]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const MethodScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    updated_at: 'updated_at',
    duration: 'duration',
    description: 'description',
    sections: 'sections',
    number_of_samples: 'number_of_samples',
    creator_id: 'creator_id',
    category_id: 'category_id'
  };

  export type MethodScalarFieldEnum = (typeof MethodScalarFieldEnum)[keyof typeof MethodScalarFieldEnum]


  export const Method_sampleScalarFieldEnum: {
    id: 'id',
    reference_number: 'reference_number',
    name: 'name',
    conditions: 'conditions',
    method_id: 'method_id'
  };

  export type Method_sampleScalarFieldEnum = (typeof Method_sampleScalarFieldEnum)[keyof typeof Method_sampleScalarFieldEnum]


  export const Method_stepScalarFieldEnum: {
    id: 'id',
    number: 'number',
    day: 'day',
    time: 'time',
    description: 'description',
    temperature: 'temperature',
    duration: 'duration',
    link: 'link',
    method_id: 'method_id'
  };

  export type Method_stepScalarFieldEnum = (typeof Method_stepScalarFieldEnum)[keyof typeof Method_stepScalarFieldEnum]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ReagentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    company: 'company',
    product_id: 'product_id',
    link: 'link',
    type: 'type',
    user_id: 'user_id'
  };

  export type ReagentScalarFieldEnum = (typeof ReagentScalarFieldEnum)[keyof typeof ReagentScalarFieldEnum]


  export const Reagents_on_methodsScalarFieldEnum: {
    reagent_id: 'reagent_id',
    method_id: 'method_id',
    amount: 'amount'
  };

  export type Reagents_on_methodsScalarFieldEnum = (typeof Reagents_on_methodsScalarFieldEnum)[keyof typeof Reagents_on_methodsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    first_name: 'first_name',
    last_name: 'last_name',
    expertise: 'expertise'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const User_on_methodsScalarFieldEnum: {
    user_id: 'user_id',
    method_id: 'method_id'
  };

  export type User_on_methodsScalarFieldEnum = (typeof User_on_methodsScalarFieldEnum)[keyof typeof User_on_methodsScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    password?: StringFilter | string
    first_name?: StringFilter | string
    last_name?: StringFilter | string
    expertise?: StringNullableFilter | string | null
    categories?: CategoryListRelationFilter
    created_methods?: MethodListRelationFilter
    safed_method?: User_on_methodsListRelationFilter
    reagents?: ReagentListRelationFilter
    devices?: DeviceListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    expertise?: SortOrder
    categories?: categoryOrderByRelationAggregateInput
    created_methods?: methodOrderByRelationAggregateInput
    safed_method?: user_on_methodsOrderByRelationAggregateInput
    reagents?: reagentOrderByRelationAggregateInput
    devices?: deviceOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    id?: number
    username?: string
  }

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    expertise?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    first_name?: StringWithAggregatesFilter | string
    last_name?: StringWithAggregatesFilter | string
    expertise?: StringNullableWithAggregatesFilter | string | null
  }

  export type user_on_methodsWhereInput = {
    AND?: Enumerable<user_on_methodsWhereInput>
    OR?: Enumerable<user_on_methodsWhereInput>
    NOT?: Enumerable<user_on_methodsWhereInput>
    user?: XOR<UserRelationFilter, userWhereInput>
    user_id?: IntFilter | number
    method?: XOR<MethodRelationFilter, methodWhereInput>
    method_id?: IntFilter | number
  }

  export type user_on_methodsOrderByWithRelationInput = {
    user?: userOrderByWithRelationInput
    user_id?: SortOrder
    method?: methodOrderByWithRelationInput
    method_id?: SortOrder
  }

  export type user_on_methodsWhereUniqueInput = {
    user_id_method_id?: user_on_methodsUser_idMethod_idCompoundUniqueInput
  }

  export type user_on_methodsOrderByWithAggregationInput = {
    user_id?: SortOrder
    method_id?: SortOrder
    _count?: user_on_methodsCountOrderByAggregateInput
    _avg?: user_on_methodsAvgOrderByAggregateInput
    _max?: user_on_methodsMaxOrderByAggregateInput
    _min?: user_on_methodsMinOrderByAggregateInput
    _sum?: user_on_methodsSumOrderByAggregateInput
  }

  export type user_on_methodsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<user_on_methodsScalarWhereWithAggregatesInput>
    OR?: Enumerable<user_on_methodsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<user_on_methodsScalarWhereWithAggregatesInput>
    user_id?: IntWithAggregatesFilter | number
    method_id?: IntWithAggregatesFilter | number
  }

  export type categoryWhereInput = {
    AND?: Enumerable<categoryWhereInput>
    OR?: Enumerable<categoryWhereInput>
    NOT?: Enumerable<categoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    methods?: MethodListRelationFilter
    user?: XOR<UserRelationFilter, userWhereInput>
    user_id?: IntFilter | number
  }

  export type categoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    methods?: methodOrderByRelationAggregateInput
    user?: userOrderByWithRelationInput
    user_id?: SortOrder
  }

  export type categoryWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type categoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
    _count?: categoryCountOrderByAggregateInput
    _avg?: categoryAvgOrderByAggregateInput
    _max?: categoryMaxOrderByAggregateInput
    _min?: categoryMinOrderByAggregateInput
    _sum?: categorySumOrderByAggregateInput
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<categoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<categoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<categoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    user_id?: IntWithAggregatesFilter | number
  }

  export type reagentWhereInput = {
    AND?: Enumerable<reagentWhereInput>
    OR?: Enumerable<reagentWhereInput>
    NOT?: Enumerable<reagentWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    company?: StringFilter | string
    product_id?: StringNullableFilter | string | null
    link?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, userWhereInput>
    user_id?: IntFilter | number
    methods?: Reagents_on_methodsListRelationFilter
  }

  export type reagentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    product_id?: SortOrder
    link?: SortOrder
    type?: SortOrder
    user?: userOrderByWithRelationInput
    user_id?: SortOrder
    methods?: reagents_on_methodsOrderByRelationAggregateInput
  }

  export type reagentWhereUniqueInput = {
    id?: number
  }

  export type reagentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    product_id?: SortOrder
    link?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
    _count?: reagentCountOrderByAggregateInput
    _avg?: reagentAvgOrderByAggregateInput
    _max?: reagentMaxOrderByAggregateInput
    _min?: reagentMinOrderByAggregateInput
    _sum?: reagentSumOrderByAggregateInput
  }

  export type reagentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<reagentScalarWhereWithAggregatesInput>
    OR?: Enumerable<reagentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<reagentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    company?: StringWithAggregatesFilter | string
    product_id?: StringNullableWithAggregatesFilter | string | null
    link?: StringNullableWithAggregatesFilter | string | null
    type?: StringNullableWithAggregatesFilter | string | null
    user_id?: IntWithAggregatesFilter | number
  }

  export type deviceWhereInput = {
    AND?: Enumerable<deviceWhereInput>
    OR?: Enumerable<deviceWhereInput>
    NOT?: Enumerable<deviceWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    company?: StringFilter | string
    product_id?: StringNullableFilter | string | null
    link?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    user?: XOR<UserRelationFilter, userWhereInput>
    user_id?: IntFilter | number
    methods?: Devices_on_methodsListRelationFilter
  }

  export type deviceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    product_id?: SortOrder
    link?: SortOrder
    type?: SortOrder
    user?: userOrderByWithRelationInput
    user_id?: SortOrder
    methods?: devices_on_methodsOrderByRelationAggregateInput
  }

  export type deviceWhereUniqueInput = {
    id?: number
  }

  export type deviceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    product_id?: SortOrder
    link?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
    _count?: deviceCountOrderByAggregateInput
    _avg?: deviceAvgOrderByAggregateInput
    _max?: deviceMaxOrderByAggregateInput
    _min?: deviceMinOrderByAggregateInput
    _sum?: deviceSumOrderByAggregateInput
  }

  export type deviceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<deviceScalarWhereWithAggregatesInput>
    OR?: Enumerable<deviceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<deviceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    company?: StringWithAggregatesFilter | string
    product_id?: StringNullableWithAggregatesFilter | string | null
    link?: StringNullableWithAggregatesFilter | string | null
    type?: StringNullableWithAggregatesFilter | string | null
    user_id?: IntWithAggregatesFilter | number
  }

  export type methodWhereInput = {
    AND?: Enumerable<methodWhereInput>
    OR?: Enumerable<methodWhereInput>
    NOT?: Enumerable<methodWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    duration?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    sections?: StringNullableListFilter
    number_of_samples?: IntNullableFilter | number | null
    creator?: XOR<UserRelationFilter, userWhereInput>
    creator_id?: IntFilter | number
    user?: User_on_methodsListRelationFilter
    category?: XOR<CategoryRelationFilter, categoryWhereInput> | null
    category_id?: IntNullableFilter | number | null
    reagents?: Reagents_on_methodsListRelationFilter
    devices?: Devices_on_methodsListRelationFilter
    method_samples?: Method_sampleListRelationFilter
    method_steps?: Method_stepListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type methodOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    duration?: SortOrder
    description?: SortOrder
    sections?: SortOrder
    number_of_samples?: SortOrder
    creator?: userOrderByWithRelationInput
    creator_id?: SortOrder
    user?: user_on_methodsOrderByRelationAggregateInput
    category?: categoryOrderByWithRelationInput
    category_id?: SortOrder
    reagents?: reagents_on_methodsOrderByRelationAggregateInput
    devices?: devices_on_methodsOrderByRelationAggregateInput
    method_samples?: method_sampleOrderByRelationAggregateInput
    method_steps?: method_stepOrderByRelationAggregateInput
    comments?: commentOrderByRelationAggregateInput
  }

  export type methodWhereUniqueInput = {
    id?: number
  }

  export type methodOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    duration?: SortOrder
    description?: SortOrder
    sections?: SortOrder
    number_of_samples?: SortOrder
    creator_id?: SortOrder
    category_id?: SortOrder
    _count?: methodCountOrderByAggregateInput
    _avg?: methodAvgOrderByAggregateInput
    _max?: methodMaxOrderByAggregateInput
    _min?: methodMinOrderByAggregateInput
    _sum?: methodSumOrderByAggregateInput
  }

  export type methodScalarWhereWithAggregatesInput = {
    AND?: Enumerable<methodScalarWhereWithAggregatesInput>
    OR?: Enumerable<methodScalarWhereWithAggregatesInput>
    NOT?: Enumerable<methodScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
    duration?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    sections?: StringNullableListFilter
    number_of_samples?: IntNullableWithAggregatesFilter | number | null
    creator_id?: IntWithAggregatesFilter | number
    category_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type commentWhereInput = {
    AND?: Enumerable<commentWhereInput>
    OR?: Enumerable<commentWhereInput>
    NOT?: Enumerable<commentWhereInput>
    id?: IntFilter | number
    content?: StringFilter | string
    y_position?: IntFilter | number
    x_position?: IntNullableFilter | number | null
    is_important?: BoolNullableFilter | boolean | null
    method?: XOR<MethodRelationFilter, methodWhereInput>
    method_id?: IntFilter | number
  }

  export type commentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    y_position?: SortOrder
    x_position?: SortOrder
    is_important?: SortOrder
    method?: methodOrderByWithRelationInput
    method_id?: SortOrder
  }

  export type commentWhereUniqueInput = {
    id?: number
  }

  export type commentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    y_position?: SortOrder
    x_position?: SortOrder
    is_important?: SortOrder
    method_id?: SortOrder
    _count?: commentCountOrderByAggregateInput
    _avg?: commentAvgOrderByAggregateInput
    _max?: commentMaxOrderByAggregateInput
    _min?: commentMinOrderByAggregateInput
    _sum?: commentSumOrderByAggregateInput
  }

  export type commentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<commentScalarWhereWithAggregatesInput>
    OR?: Enumerable<commentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<commentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    content?: StringWithAggregatesFilter | string
    y_position?: IntWithAggregatesFilter | number
    x_position?: IntNullableWithAggregatesFilter | number | null
    is_important?: BoolNullableWithAggregatesFilter | boolean | null
    method_id?: IntWithAggregatesFilter | number
  }

  export type reagents_on_methodsWhereInput = {
    AND?: Enumerable<reagents_on_methodsWhereInput>
    OR?: Enumerable<reagents_on_methodsWhereInput>
    NOT?: Enumerable<reagents_on_methodsWhereInput>
    reagent?: XOR<ReagentRelationFilter, reagentWhereInput>
    reagent_id?: IntFilter | number
    method?: XOR<MethodRelationFilter, methodWhereInput>
    method_id?: IntFilter | number
    amount?: StringNullableFilter | string | null
  }

  export type reagents_on_methodsOrderByWithRelationInput = {
    reagent?: reagentOrderByWithRelationInput
    reagent_id?: SortOrder
    method?: methodOrderByWithRelationInput
    method_id?: SortOrder
    amount?: SortOrder
  }

  export type reagents_on_methodsWhereUniqueInput = {
    reagent_id_method_id?: reagents_on_methodsReagent_idMethod_idCompoundUniqueInput
  }

  export type reagents_on_methodsOrderByWithAggregationInput = {
    reagent_id?: SortOrder
    method_id?: SortOrder
    amount?: SortOrder
    _count?: reagents_on_methodsCountOrderByAggregateInput
    _avg?: reagents_on_methodsAvgOrderByAggregateInput
    _max?: reagents_on_methodsMaxOrderByAggregateInput
    _min?: reagents_on_methodsMinOrderByAggregateInput
    _sum?: reagents_on_methodsSumOrderByAggregateInput
  }

  export type reagents_on_methodsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<reagents_on_methodsScalarWhereWithAggregatesInput>
    OR?: Enumerable<reagents_on_methodsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<reagents_on_methodsScalarWhereWithAggregatesInput>
    reagent_id?: IntWithAggregatesFilter | number
    method_id?: IntWithAggregatesFilter | number
    amount?: StringNullableWithAggregatesFilter | string | null
  }

  export type devices_on_methodsWhereInput = {
    AND?: Enumerable<devices_on_methodsWhereInput>
    OR?: Enumerable<devices_on_methodsWhereInput>
    NOT?: Enumerable<devices_on_methodsWhereInput>
    device?: XOR<DeviceRelationFilter, deviceWhereInput>
    device_id?: IntFilter | number
    method?: XOR<MethodRelationFilter, methodWhereInput>
    method_id?: IntFilter | number
  }

  export type devices_on_methodsOrderByWithRelationInput = {
    device?: deviceOrderByWithRelationInput
    device_id?: SortOrder
    method?: methodOrderByWithRelationInput
    method_id?: SortOrder
  }

  export type devices_on_methodsWhereUniqueInput = {
    device_id_method_id?: devices_on_methodsDevice_idMethod_idCompoundUniqueInput
  }

  export type devices_on_methodsOrderByWithAggregationInput = {
    device_id?: SortOrder
    method_id?: SortOrder
    _count?: devices_on_methodsCountOrderByAggregateInput
    _avg?: devices_on_methodsAvgOrderByAggregateInput
    _max?: devices_on_methodsMaxOrderByAggregateInput
    _min?: devices_on_methodsMinOrderByAggregateInput
    _sum?: devices_on_methodsSumOrderByAggregateInput
  }

  export type devices_on_methodsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<devices_on_methodsScalarWhereWithAggregatesInput>
    OR?: Enumerable<devices_on_methodsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<devices_on_methodsScalarWhereWithAggregatesInput>
    device_id?: IntWithAggregatesFilter | number
    method_id?: IntWithAggregatesFilter | number
  }

  export type method_stepWhereInput = {
    AND?: Enumerable<method_stepWhereInput>
    OR?: Enumerable<method_stepWhereInput>
    NOT?: Enumerable<method_stepWhereInput>
    id?: IntFilter | number
    number?: IntFilter | number
    day?: StringFilter | string
    time?: StringFilter | string
    description?: StringFilter | string
    temperature?: StringNullableFilter | string | null
    duration?: StringNullableFilter | string | null
    link?: StringNullableFilter | string | null
    method?: XOR<MethodRelationFilter, methodWhereInput> | null
    method_id?: IntNullableFilter | number | null
  }

  export type method_stepOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    day?: SortOrder
    time?: SortOrder
    description?: SortOrder
    temperature?: SortOrder
    duration?: SortOrder
    link?: SortOrder
    method?: methodOrderByWithRelationInput
    method_id?: SortOrder
  }

  export type method_stepWhereUniqueInput = {
    id?: number
  }

  export type method_stepOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    day?: SortOrder
    time?: SortOrder
    description?: SortOrder
    temperature?: SortOrder
    duration?: SortOrder
    link?: SortOrder
    method_id?: SortOrder
    _count?: method_stepCountOrderByAggregateInput
    _avg?: method_stepAvgOrderByAggregateInput
    _max?: method_stepMaxOrderByAggregateInput
    _min?: method_stepMinOrderByAggregateInput
    _sum?: method_stepSumOrderByAggregateInput
  }

  export type method_stepScalarWhereWithAggregatesInput = {
    AND?: Enumerable<method_stepScalarWhereWithAggregatesInput>
    OR?: Enumerable<method_stepScalarWhereWithAggregatesInput>
    NOT?: Enumerable<method_stepScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    number?: IntWithAggregatesFilter | number
    day?: StringWithAggregatesFilter | string
    time?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    temperature?: StringNullableWithAggregatesFilter | string | null
    duration?: StringNullableWithAggregatesFilter | string | null
    link?: StringNullableWithAggregatesFilter | string | null
    method_id?: IntNullableWithAggregatesFilter | number | null
  }

  export type method_sampleWhereInput = {
    AND?: Enumerable<method_sampleWhereInput>
    OR?: Enumerable<method_sampleWhereInput>
    NOT?: Enumerable<method_sampleWhereInput>
    id?: IntFilter | number
    reference_number?: IntFilter | number
    name?: StringNullableFilter | string | null
    conditions?: JsonNullableFilter
    method?: XOR<MethodRelationFilter, methodWhereInput>
    method_id?: IntFilter | number
  }

  export type method_sampleOrderByWithRelationInput = {
    id?: SortOrder
    reference_number?: SortOrder
    name?: SortOrder
    conditions?: SortOrder
    method?: methodOrderByWithRelationInput
    method_id?: SortOrder
  }

  export type method_sampleWhereUniqueInput = {
    id?: number
  }

  export type method_sampleOrderByWithAggregationInput = {
    id?: SortOrder
    reference_number?: SortOrder
    name?: SortOrder
    conditions?: SortOrder
    method_id?: SortOrder
    _count?: method_sampleCountOrderByAggregateInput
    _avg?: method_sampleAvgOrderByAggregateInput
    _max?: method_sampleMaxOrderByAggregateInput
    _min?: method_sampleMinOrderByAggregateInput
    _sum?: method_sampleSumOrderByAggregateInput
  }

  export type method_sampleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<method_sampleScalarWhereWithAggregatesInput>
    OR?: Enumerable<method_sampleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<method_sampleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    reference_number?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    conditions?: JsonNullableWithAggregatesFilter
    method_id?: IntWithAggregatesFilter | number
  }

  export type userCreateInput = {
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    categories?: categoryCreateNestedManyWithoutUserInput
    created_methods?: methodCreateNestedManyWithoutCreatorInput
    safed_method?: user_on_methodsCreateNestedManyWithoutUserInput
    reagents?: reagentCreateNestedManyWithoutUserInput
    devices?: deviceCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    categories?: categoryUncheckedCreateNestedManyWithoutUserInput
    created_methods?: methodUncheckedCreateNestedManyWithoutCreatorInput
    safed_method?: user_on_methodsUncheckedCreateNestedManyWithoutUserInput
    reagents?: reagentUncheckedCreateNestedManyWithoutUserInput
    devices?: deviceUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: categoryUpdateManyWithoutUserNestedInput
    created_methods?: methodUpdateManyWithoutCreatorNestedInput
    safed_method?: user_on_methodsUpdateManyWithoutUserNestedInput
    reagents?: reagentUpdateManyWithoutUserNestedInput
    devices?: deviceUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: categoryUncheckedUpdateManyWithoutUserNestedInput
    created_methods?: methodUncheckedUpdateManyWithoutCreatorNestedInput
    safed_method?: user_on_methodsUncheckedUpdateManyWithoutUserNestedInput
    reagents?: reagentUncheckedUpdateManyWithoutUserNestedInput
    devices?: deviceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
  }

  export type userUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type user_on_methodsCreateInput = {
    user: userCreateNestedOneWithoutSafed_methodInput
    method: methodCreateNestedOneWithoutUserInput
  }

  export type user_on_methodsUncheckedCreateInput = {
    user_id: number
    method_id: number
  }

  export type user_on_methodsUpdateInput = {
    user?: userUpdateOneRequiredWithoutSafed_methodNestedInput
    method?: methodUpdateOneRequiredWithoutUserNestedInput
  }

  export type user_on_methodsUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_on_methodsCreateManyInput = {
    user_id: number
    method_id: number
  }

  export type user_on_methodsUpdateManyMutationInput = {

  }

  export type user_on_methodsUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type categoryCreateInput = {
    name: string
    methods?: methodCreateNestedManyWithoutCategoryInput
    user: userCreateNestedOneWithoutCategoriesInput
  }

  export type categoryUncheckedCreateInput = {
    id?: number
    name: string
    methods?: methodUncheckedCreateNestedManyWithoutCategoryInput
    user_id: number
  }

  export type categoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    methods?: methodUpdateManyWithoutCategoryNestedInput
    user?: userUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type categoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    methods?: methodUncheckedUpdateManyWithoutCategoryNestedInput
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type categoryCreateManyInput = {
    id?: number
    name: string
    user_id: number
  }

  export type categoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type categoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type reagentCreateInput = {
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    user: userCreateNestedOneWithoutReagentsInput
    methods?: reagents_on_methodsCreateNestedManyWithoutReagentInput
  }

  export type reagentUncheckedCreateInput = {
    id?: number
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    user_id: number
    methods?: reagents_on_methodsUncheckedCreateNestedManyWithoutReagentInput
  }

  export type reagentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutReagentsNestedInput
    methods?: reagents_on_methodsUpdateManyWithoutReagentNestedInput
  }

  export type reagentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    methods?: reagents_on_methodsUncheckedUpdateManyWithoutReagentNestedInput
  }

  export type reagentCreateManyInput = {
    id?: number
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    user_id: number
  }

  export type reagentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reagentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type deviceCreateInput = {
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    user: userCreateNestedOneWithoutDevicesInput
    methods?: devices_on_methodsCreateNestedManyWithoutDeviceInput
  }

  export type deviceUncheckedCreateInput = {
    id?: number
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    user_id: number
    methods?: devices_on_methodsUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type deviceUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutDevicesNestedInput
    methods?: devices_on_methodsUpdateManyWithoutDeviceNestedInput
  }

  export type deviceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
    methods?: devices_on_methodsUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type deviceCreateManyInput = {
    id?: number
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    user_id: number
  }

  export type deviceUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type deviceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type methodCreateInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator: userCreateNestedOneWithoutCreated_methodsInput
    user?: user_on_methodsCreateNestedManyWithoutMethodInput
    category?: categoryCreateNestedOneWithoutMethodsInput
    reagents?: reagents_on_methodsCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleCreateNestedManyWithoutMethodInput
    method_steps?: method_stepCreateNestedManyWithoutMethodInput
    comments?: commentCreateNestedManyWithoutMethodInput
  }

  export type methodUncheckedCreateInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator_id: number
    user?: user_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    category_id?: number | null
    reagents?: reagents_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleUncheckedCreateNestedManyWithoutMethodInput
    method_steps?: method_stepUncheckedCreateNestedManyWithoutMethodInput
    comments?: commentUncheckedCreateNestedManyWithoutMethodInput
  }

  export type methodUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator?: userUpdateOneRequiredWithoutCreated_methodsNestedInput
    user?: user_on_methodsUpdateManyWithoutMethodNestedInput
    category?: categoryUpdateOneWithoutMethodsNestedInput
    reagents?: reagents_on_methodsUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUpdateManyWithoutMethodNestedInput
    comments?: commentUpdateManyWithoutMethodNestedInput
  }

  export type methodUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator_id?: IntFieldUpdateOperationsInput | number
    user?: user_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    reagents?: reagents_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUncheckedUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUncheckedUpdateManyWithoutMethodNestedInput
    comments?: commentUncheckedUpdateManyWithoutMethodNestedInput
  }

  export type methodCreateManyInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator_id: number
    category_id?: number | null
  }

  export type methodUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type methodUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator_id?: IntFieldUpdateOperationsInput | number
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type commentCreateInput = {
    content: string
    y_position: number
    x_position?: number | null
    is_important?: boolean | null
    method: methodCreateNestedOneWithoutCommentsInput
  }

  export type commentUncheckedCreateInput = {
    id?: number
    content: string
    y_position: number
    x_position?: number | null
    is_important?: boolean | null
    method_id: number
  }

  export type commentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    y_position?: IntFieldUpdateOperationsInput | number
    x_position?: NullableIntFieldUpdateOperationsInput | number | null
    is_important?: NullableBoolFieldUpdateOperationsInput | boolean | null
    method?: methodUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type commentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    y_position?: IntFieldUpdateOperationsInput | number
    x_position?: NullableIntFieldUpdateOperationsInput | number | null
    is_important?: NullableBoolFieldUpdateOperationsInput | boolean | null
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type commentCreateManyInput = {
    id?: number
    content: string
    y_position: number
    x_position?: number | null
    is_important?: boolean | null
    method_id: number
  }

  export type commentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    y_position?: IntFieldUpdateOperationsInput | number
    x_position?: NullableIntFieldUpdateOperationsInput | number | null
    is_important?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type commentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    y_position?: IntFieldUpdateOperationsInput | number
    x_position?: NullableIntFieldUpdateOperationsInput | number | null
    is_important?: NullableBoolFieldUpdateOperationsInput | boolean | null
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type reagents_on_methodsCreateInput = {
    reagent: reagentCreateNestedOneWithoutMethodsInput
    method: methodCreateNestedOneWithoutReagentsInput
    amount?: string | null
  }

  export type reagents_on_methodsUncheckedCreateInput = {
    reagent_id: number
    method_id: number
    amount?: string | null
  }

  export type reagents_on_methodsUpdateInput = {
    reagent?: reagentUpdateOneRequiredWithoutMethodsNestedInput
    method?: methodUpdateOneRequiredWithoutReagentsNestedInput
    amount?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reagents_on_methodsUncheckedUpdateInput = {
    reagent_id?: IntFieldUpdateOperationsInput | number
    method_id?: IntFieldUpdateOperationsInput | number
    amount?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reagents_on_methodsCreateManyInput = {
    reagent_id: number
    method_id: number
    amount?: string | null
  }

  export type reagents_on_methodsUpdateManyMutationInput = {
    amount?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reagents_on_methodsUncheckedUpdateManyInput = {
    reagent_id?: IntFieldUpdateOperationsInput | number
    method_id?: IntFieldUpdateOperationsInput | number
    amount?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type devices_on_methodsCreateInput = {
    device: deviceCreateNestedOneWithoutMethodsInput
    method: methodCreateNestedOneWithoutDevicesInput
  }

  export type devices_on_methodsUncheckedCreateInput = {
    device_id: number
    method_id: number
  }

  export type devices_on_methodsUpdateInput = {
    device?: deviceUpdateOneRequiredWithoutMethodsNestedInput
    method?: methodUpdateOneRequiredWithoutDevicesNestedInput
  }

  export type devices_on_methodsUncheckedUpdateInput = {
    device_id?: IntFieldUpdateOperationsInput | number
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type devices_on_methodsCreateManyInput = {
    device_id: number
    method_id: number
  }

  export type devices_on_methodsUpdateManyMutationInput = {

  }

  export type devices_on_methodsUncheckedUpdateManyInput = {
    device_id?: IntFieldUpdateOperationsInput | number
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type method_stepCreateInput = {
    number: number
    day: string
    time: string
    description: string
    temperature?: string | null
    duration?: string | null
    link?: string | null
    method?: methodCreateNestedOneWithoutMethod_stepsInput
  }

  export type method_stepUncheckedCreateInput = {
    id?: number
    number: number
    day: string
    time: string
    description: string
    temperature?: string | null
    duration?: string | null
    link?: string | null
    method_id?: number | null
  }

  export type method_stepUpdateInput = {
    number?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    method?: methodUpdateOneWithoutMethod_stepsNestedInput
  }

  export type method_stepUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    method_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type method_stepCreateManyInput = {
    id?: number
    number: number
    day: string
    time: string
    description: string
    temperature?: string | null
    duration?: string | null
    link?: string | null
    method_id?: number | null
  }

  export type method_stepUpdateManyMutationInput = {
    number?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type method_stepUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    method_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type method_sampleCreateInput = {
    reference_number: number
    name?: string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
    method: methodCreateNestedOneWithoutMethod_samplesInput
  }

  export type method_sampleUncheckedCreateInput = {
    id?: number
    reference_number: number
    name?: string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
    method_id: number
  }

  export type method_sampleUpdateInput = {
    reference_number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
    method?: methodUpdateOneRequiredWithoutMethod_samplesNestedInput
  }

  export type method_sampleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference_number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type method_sampleCreateManyInput = {
    id?: number
    reference_number: number
    name?: string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
    method_id: number
  }

  export type method_sampleUpdateManyMutationInput = {
    reference_number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
  }

  export type method_sampleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference_number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type CategoryListRelationFilter = {
    every?: categoryWhereInput
    some?: categoryWhereInput
    none?: categoryWhereInput
  }

  export type MethodListRelationFilter = {
    every?: methodWhereInput
    some?: methodWhereInput
    none?: methodWhereInput
  }

  export type User_on_methodsListRelationFilter = {
    every?: user_on_methodsWhereInput
    some?: user_on_methodsWhereInput
    none?: user_on_methodsWhereInput
  }

  export type ReagentListRelationFilter = {
    every?: reagentWhereInput
    some?: reagentWhereInput
    none?: reagentWhereInput
  }

  export type DeviceListRelationFilter = {
    every?: deviceWhereInput
    some?: deviceWhereInput
    none?: deviceWhereInput
  }

  export type categoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type methodOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_on_methodsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reagentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type deviceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    expertise?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    expertise?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    expertise?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type MethodRelationFilter = {
    is?: methodWhereInput
    isNot?: methodWhereInput
  }

  export type user_on_methodsUser_idMethod_idCompoundUniqueInput = {
    user_id: number
    method_id: number
  }

  export type user_on_methodsCountOrderByAggregateInput = {
    user_id?: SortOrder
    method_id?: SortOrder
  }

  export type user_on_methodsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    method_id?: SortOrder
  }

  export type user_on_methodsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    method_id?: SortOrder
  }

  export type user_on_methodsMinOrderByAggregateInput = {
    user_id?: SortOrder
    method_id?: SortOrder
  }

  export type user_on_methodsSumOrderByAggregateInput = {
    user_id?: SortOrder
    method_id?: SortOrder
  }

  export type categoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
  }

  export type categoryAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
  }

  export type categoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    user_id?: SortOrder
  }

  export type categorySumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type Reagents_on_methodsListRelationFilter = {
    every?: reagents_on_methodsWhereInput
    some?: reagents_on_methodsWhereInput
    none?: reagents_on_methodsWhereInput
  }

  export type reagents_on_methodsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reagentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    product_id?: SortOrder
    link?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
  }

  export type reagentAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type reagentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    product_id?: SortOrder
    link?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
  }

  export type reagentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    product_id?: SortOrder
    link?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
  }

  export type reagentSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type Devices_on_methodsListRelationFilter = {
    every?: devices_on_methodsWhereInput
    some?: devices_on_methodsWhereInput
    none?: devices_on_methodsWhereInput
  }

  export type devices_on_methodsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type deviceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    product_id?: SortOrder
    link?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
  }

  export type deviceAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type deviceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    product_id?: SortOrder
    link?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
  }

  export type deviceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    company?: SortOrder
    product_id?: SortOrder
    link?: SortOrder
    type?: SortOrder
    user_id?: SortOrder
  }

  export type deviceSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CategoryRelationFilter = {
    is?: categoryWhereInput | null
    isNot?: categoryWhereInput | null
  }

  export type Method_sampleListRelationFilter = {
    every?: method_sampleWhereInput
    some?: method_sampleWhereInput
    none?: method_sampleWhereInput
  }

  export type Method_stepListRelationFilter = {
    every?: method_stepWhereInput
    some?: method_stepWhereInput
    none?: method_stepWhereInput
  }

  export type CommentListRelationFilter = {
    every?: commentWhereInput
    some?: commentWhereInput
    none?: commentWhereInput
  }

  export type method_sampleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type method_stepOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type commentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type methodCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    duration?: SortOrder
    description?: SortOrder
    sections?: SortOrder
    number_of_samples?: SortOrder
    creator_id?: SortOrder
    category_id?: SortOrder
  }

  export type methodAvgOrderByAggregateInput = {
    id?: SortOrder
    number_of_samples?: SortOrder
    creator_id?: SortOrder
    category_id?: SortOrder
  }

  export type methodMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    duration?: SortOrder
    description?: SortOrder
    number_of_samples?: SortOrder
    creator_id?: SortOrder
    category_id?: SortOrder
  }

  export type methodMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    duration?: SortOrder
    description?: SortOrder
    number_of_samples?: SortOrder
    creator_id?: SortOrder
    category_id?: SortOrder
  }

  export type methodSumOrderByAggregateInput = {
    id?: SortOrder
    number_of_samples?: SortOrder
    creator_id?: SortOrder
    category_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type commentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    y_position?: SortOrder
    x_position?: SortOrder
    is_important?: SortOrder
    method_id?: SortOrder
  }

  export type commentAvgOrderByAggregateInput = {
    id?: SortOrder
    y_position?: SortOrder
    x_position?: SortOrder
    method_id?: SortOrder
  }

  export type commentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    y_position?: SortOrder
    x_position?: SortOrder
    is_important?: SortOrder
    method_id?: SortOrder
  }

  export type commentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    y_position?: SortOrder
    x_position?: SortOrder
    is_important?: SortOrder
    method_id?: SortOrder
  }

  export type commentSumOrderByAggregateInput = {
    id?: SortOrder
    y_position?: SortOrder
    x_position?: SortOrder
    method_id?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type ReagentRelationFilter = {
    is?: reagentWhereInput
    isNot?: reagentWhereInput
  }

  export type reagents_on_methodsReagent_idMethod_idCompoundUniqueInput = {
    reagent_id: number
    method_id: number
  }

  export type reagents_on_methodsCountOrderByAggregateInput = {
    reagent_id?: SortOrder
    method_id?: SortOrder
    amount?: SortOrder
  }

  export type reagents_on_methodsAvgOrderByAggregateInput = {
    reagent_id?: SortOrder
    method_id?: SortOrder
  }

  export type reagents_on_methodsMaxOrderByAggregateInput = {
    reagent_id?: SortOrder
    method_id?: SortOrder
    amount?: SortOrder
  }

  export type reagents_on_methodsMinOrderByAggregateInput = {
    reagent_id?: SortOrder
    method_id?: SortOrder
    amount?: SortOrder
  }

  export type reagents_on_methodsSumOrderByAggregateInput = {
    reagent_id?: SortOrder
    method_id?: SortOrder
  }

  export type DeviceRelationFilter = {
    is?: deviceWhereInput
    isNot?: deviceWhereInput
  }

  export type devices_on_methodsDevice_idMethod_idCompoundUniqueInput = {
    device_id: number
    method_id: number
  }

  export type devices_on_methodsCountOrderByAggregateInput = {
    device_id?: SortOrder
    method_id?: SortOrder
  }

  export type devices_on_methodsAvgOrderByAggregateInput = {
    device_id?: SortOrder
    method_id?: SortOrder
  }

  export type devices_on_methodsMaxOrderByAggregateInput = {
    device_id?: SortOrder
    method_id?: SortOrder
  }

  export type devices_on_methodsMinOrderByAggregateInput = {
    device_id?: SortOrder
    method_id?: SortOrder
  }

  export type devices_on_methodsSumOrderByAggregateInput = {
    device_id?: SortOrder
    method_id?: SortOrder
  }

  export type method_stepCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    day?: SortOrder
    time?: SortOrder
    description?: SortOrder
    temperature?: SortOrder
    duration?: SortOrder
    link?: SortOrder
    method_id?: SortOrder
  }

  export type method_stepAvgOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    method_id?: SortOrder
  }

  export type method_stepMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    day?: SortOrder
    time?: SortOrder
    description?: SortOrder
    temperature?: SortOrder
    duration?: SortOrder
    link?: SortOrder
    method_id?: SortOrder
  }

  export type method_stepMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    day?: SortOrder
    time?: SortOrder
    description?: SortOrder
    temperature?: SortOrder
    duration?: SortOrder
    link?: SortOrder
    method_id?: SortOrder
  }

  export type method_stepSumOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    method_id?: SortOrder
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type method_sampleCountOrderByAggregateInput = {
    id?: SortOrder
    reference_number?: SortOrder
    name?: SortOrder
    conditions?: SortOrder
    method_id?: SortOrder
  }

  export type method_sampleAvgOrderByAggregateInput = {
    id?: SortOrder
    reference_number?: SortOrder
    method_id?: SortOrder
  }

  export type method_sampleMaxOrderByAggregateInput = {
    id?: SortOrder
    reference_number?: SortOrder
    name?: SortOrder
    method_id?: SortOrder
  }

  export type method_sampleMinOrderByAggregateInput = {
    id?: SortOrder
    reference_number?: SortOrder
    name?: SortOrder
    method_id?: SortOrder
  }

  export type method_sampleSumOrderByAggregateInput = {
    id?: SortOrder
    reference_number?: SortOrder
    method_id?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type categoryCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<categoryCreateWithoutUserInput>, Enumerable<categoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<categoryCreateOrConnectWithoutUserInput>
    createMany?: categoryCreateManyUserInputEnvelope
    connect?: Enumerable<categoryWhereUniqueInput>
  }

  export type methodCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<methodCreateWithoutCreatorInput>, Enumerable<methodUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<methodCreateOrConnectWithoutCreatorInput>
    createMany?: methodCreateManyCreatorInputEnvelope
    connect?: Enumerable<methodWhereUniqueInput>
  }

  export type user_on_methodsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<user_on_methodsCreateWithoutUserInput>, Enumerable<user_on_methodsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_on_methodsCreateOrConnectWithoutUserInput>
    createMany?: user_on_methodsCreateManyUserInputEnvelope
    connect?: Enumerable<user_on_methodsWhereUniqueInput>
  }

  export type reagentCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<reagentCreateWithoutUserInput>, Enumerable<reagentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<reagentCreateOrConnectWithoutUserInput>
    createMany?: reagentCreateManyUserInputEnvelope
    connect?: Enumerable<reagentWhereUniqueInput>
  }

  export type deviceCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<deviceCreateWithoutUserInput>, Enumerable<deviceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<deviceCreateOrConnectWithoutUserInput>
    createMany?: deviceCreateManyUserInputEnvelope
    connect?: Enumerable<deviceWhereUniqueInput>
  }

  export type categoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<categoryCreateWithoutUserInput>, Enumerable<categoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<categoryCreateOrConnectWithoutUserInput>
    createMany?: categoryCreateManyUserInputEnvelope
    connect?: Enumerable<categoryWhereUniqueInput>
  }

  export type methodUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<Enumerable<methodCreateWithoutCreatorInput>, Enumerable<methodUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<methodCreateOrConnectWithoutCreatorInput>
    createMany?: methodCreateManyCreatorInputEnvelope
    connect?: Enumerable<methodWhereUniqueInput>
  }

  export type user_on_methodsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<user_on_methodsCreateWithoutUserInput>, Enumerable<user_on_methodsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_on_methodsCreateOrConnectWithoutUserInput>
    createMany?: user_on_methodsCreateManyUserInputEnvelope
    connect?: Enumerable<user_on_methodsWhereUniqueInput>
  }

  export type reagentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<reagentCreateWithoutUserInput>, Enumerable<reagentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<reagentCreateOrConnectWithoutUserInput>
    createMany?: reagentCreateManyUserInputEnvelope
    connect?: Enumerable<reagentWhereUniqueInput>
  }

  export type deviceUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<deviceCreateWithoutUserInput>, Enumerable<deviceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<deviceCreateOrConnectWithoutUserInput>
    createMany?: deviceCreateManyUserInputEnvelope
    connect?: Enumerable<deviceWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type categoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<categoryCreateWithoutUserInput>, Enumerable<categoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<categoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<categoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: categoryCreateManyUserInputEnvelope
    set?: Enumerable<categoryWhereUniqueInput>
    disconnect?: Enumerable<categoryWhereUniqueInput>
    delete?: Enumerable<categoryWhereUniqueInput>
    connect?: Enumerable<categoryWhereUniqueInput>
    update?: Enumerable<categoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<categoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<categoryScalarWhereInput>
  }

  export type methodUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<methodCreateWithoutCreatorInput>, Enumerable<methodUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<methodCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<methodUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: methodCreateManyCreatorInputEnvelope
    set?: Enumerable<methodWhereUniqueInput>
    disconnect?: Enumerable<methodWhereUniqueInput>
    delete?: Enumerable<methodWhereUniqueInput>
    connect?: Enumerable<methodWhereUniqueInput>
    update?: Enumerable<methodUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<methodUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<methodScalarWhereInput>
  }

  export type user_on_methodsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<user_on_methodsCreateWithoutUserInput>, Enumerable<user_on_methodsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_on_methodsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<user_on_methodsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: user_on_methodsCreateManyUserInputEnvelope
    set?: Enumerable<user_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<user_on_methodsWhereUniqueInput>
    delete?: Enumerable<user_on_methodsWhereUniqueInput>
    connect?: Enumerable<user_on_methodsWhereUniqueInput>
    update?: Enumerable<user_on_methodsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<user_on_methodsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<user_on_methodsScalarWhereInput>
  }

  export type reagentUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<reagentCreateWithoutUserInput>, Enumerable<reagentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<reagentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<reagentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: reagentCreateManyUserInputEnvelope
    set?: Enumerable<reagentWhereUniqueInput>
    disconnect?: Enumerable<reagentWhereUniqueInput>
    delete?: Enumerable<reagentWhereUniqueInput>
    connect?: Enumerable<reagentWhereUniqueInput>
    update?: Enumerable<reagentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<reagentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<reagentScalarWhereInput>
  }

  export type deviceUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<deviceCreateWithoutUserInput>, Enumerable<deviceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<deviceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<deviceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: deviceCreateManyUserInputEnvelope
    set?: Enumerable<deviceWhereUniqueInput>
    disconnect?: Enumerable<deviceWhereUniqueInput>
    delete?: Enumerable<deviceWhereUniqueInput>
    connect?: Enumerable<deviceWhereUniqueInput>
    update?: Enumerable<deviceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<deviceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<deviceScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type categoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<categoryCreateWithoutUserInput>, Enumerable<categoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<categoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<categoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: categoryCreateManyUserInputEnvelope
    set?: Enumerable<categoryWhereUniqueInput>
    disconnect?: Enumerable<categoryWhereUniqueInput>
    delete?: Enumerable<categoryWhereUniqueInput>
    connect?: Enumerable<categoryWhereUniqueInput>
    update?: Enumerable<categoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<categoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<categoryScalarWhereInput>
  }

  export type methodUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<Enumerable<methodCreateWithoutCreatorInput>, Enumerable<methodUncheckedCreateWithoutCreatorInput>>
    connectOrCreate?: Enumerable<methodCreateOrConnectWithoutCreatorInput>
    upsert?: Enumerable<methodUpsertWithWhereUniqueWithoutCreatorInput>
    createMany?: methodCreateManyCreatorInputEnvelope
    set?: Enumerable<methodWhereUniqueInput>
    disconnect?: Enumerable<methodWhereUniqueInput>
    delete?: Enumerable<methodWhereUniqueInput>
    connect?: Enumerable<methodWhereUniqueInput>
    update?: Enumerable<methodUpdateWithWhereUniqueWithoutCreatorInput>
    updateMany?: Enumerable<methodUpdateManyWithWhereWithoutCreatorInput>
    deleteMany?: Enumerable<methodScalarWhereInput>
  }

  export type user_on_methodsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<user_on_methodsCreateWithoutUserInput>, Enumerable<user_on_methodsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<user_on_methodsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<user_on_methodsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: user_on_methodsCreateManyUserInputEnvelope
    set?: Enumerable<user_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<user_on_methodsWhereUniqueInput>
    delete?: Enumerable<user_on_methodsWhereUniqueInput>
    connect?: Enumerable<user_on_methodsWhereUniqueInput>
    update?: Enumerable<user_on_methodsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<user_on_methodsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<user_on_methodsScalarWhereInput>
  }

  export type reagentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<reagentCreateWithoutUserInput>, Enumerable<reagentUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<reagentCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<reagentUpsertWithWhereUniqueWithoutUserInput>
    createMany?: reagentCreateManyUserInputEnvelope
    set?: Enumerable<reagentWhereUniqueInput>
    disconnect?: Enumerable<reagentWhereUniqueInput>
    delete?: Enumerable<reagentWhereUniqueInput>
    connect?: Enumerable<reagentWhereUniqueInput>
    update?: Enumerable<reagentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<reagentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<reagentScalarWhereInput>
  }

  export type deviceUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<deviceCreateWithoutUserInput>, Enumerable<deviceUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<deviceCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<deviceUpsertWithWhereUniqueWithoutUserInput>
    createMany?: deviceCreateManyUserInputEnvelope
    set?: Enumerable<deviceWhereUniqueInput>
    disconnect?: Enumerable<deviceWhereUniqueInput>
    delete?: Enumerable<deviceWhereUniqueInput>
    connect?: Enumerable<deviceWhereUniqueInput>
    update?: Enumerable<deviceUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<deviceUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<deviceScalarWhereInput>
  }

  export type userCreateNestedOneWithoutSafed_methodInput = {
    create?: XOR<userCreateWithoutSafed_methodInput, userUncheckedCreateWithoutSafed_methodInput>
    connectOrCreate?: userCreateOrConnectWithoutSafed_methodInput
    connect?: userWhereUniqueInput
  }

  export type methodCreateNestedOneWithoutUserInput = {
    create?: XOR<methodCreateWithoutUserInput, methodUncheckedCreateWithoutUserInput>
    connectOrCreate?: methodCreateOrConnectWithoutUserInput
    connect?: methodWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutSafed_methodNestedInput = {
    create?: XOR<userCreateWithoutSafed_methodInput, userUncheckedCreateWithoutSafed_methodInput>
    connectOrCreate?: userCreateOrConnectWithoutSafed_methodInput
    upsert?: userUpsertWithoutSafed_methodInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutSafed_methodInput, userUncheckedUpdateWithoutSafed_methodInput>
  }

  export type methodUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<methodCreateWithoutUserInput, methodUncheckedCreateWithoutUserInput>
    connectOrCreate?: methodCreateOrConnectWithoutUserInput
    upsert?: methodUpsertWithoutUserInput
    connect?: methodWhereUniqueInput
    update?: XOR<methodUpdateWithoutUserInput, methodUncheckedUpdateWithoutUserInput>
  }

  export type methodCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<methodCreateWithoutCategoryInput>, Enumerable<methodUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<methodCreateOrConnectWithoutCategoryInput>
    createMany?: methodCreateManyCategoryInputEnvelope
    connect?: Enumerable<methodWhereUniqueInput>
  }

  export type userCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<userCreateWithoutCategoriesInput, userUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: userCreateOrConnectWithoutCategoriesInput
    connect?: userWhereUniqueInput
  }

  export type methodUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<methodCreateWithoutCategoryInput>, Enumerable<methodUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<methodCreateOrConnectWithoutCategoryInput>
    createMany?: methodCreateManyCategoryInputEnvelope
    connect?: Enumerable<methodWhereUniqueInput>
  }

  export type methodUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<methodCreateWithoutCategoryInput>, Enumerable<methodUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<methodCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<methodUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: methodCreateManyCategoryInputEnvelope
    set?: Enumerable<methodWhereUniqueInput>
    disconnect?: Enumerable<methodWhereUniqueInput>
    delete?: Enumerable<methodWhereUniqueInput>
    connect?: Enumerable<methodWhereUniqueInput>
    update?: Enumerable<methodUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<methodUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<methodScalarWhereInput>
  }

  export type userUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<userCreateWithoutCategoriesInput, userUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: userCreateOrConnectWithoutCategoriesInput
    upsert?: userUpsertWithoutCategoriesInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutCategoriesInput, userUncheckedUpdateWithoutCategoriesInput>
  }

  export type methodUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<methodCreateWithoutCategoryInput>, Enumerable<methodUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<methodCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<methodUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: methodCreateManyCategoryInputEnvelope
    set?: Enumerable<methodWhereUniqueInput>
    disconnect?: Enumerable<methodWhereUniqueInput>
    delete?: Enumerable<methodWhereUniqueInput>
    connect?: Enumerable<methodWhereUniqueInput>
    update?: Enumerable<methodUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<methodUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<methodScalarWhereInput>
  }

  export type userCreateNestedOneWithoutReagentsInput = {
    create?: XOR<userCreateWithoutReagentsInput, userUncheckedCreateWithoutReagentsInput>
    connectOrCreate?: userCreateOrConnectWithoutReagentsInput
    connect?: userWhereUniqueInput
  }

  export type reagents_on_methodsCreateNestedManyWithoutReagentInput = {
    create?: XOR<Enumerable<reagents_on_methodsCreateWithoutReagentInput>, Enumerable<reagents_on_methodsUncheckedCreateWithoutReagentInput>>
    connectOrCreate?: Enumerable<reagents_on_methodsCreateOrConnectWithoutReagentInput>
    createMany?: reagents_on_methodsCreateManyReagentInputEnvelope
    connect?: Enumerable<reagents_on_methodsWhereUniqueInput>
  }

  export type reagents_on_methodsUncheckedCreateNestedManyWithoutReagentInput = {
    create?: XOR<Enumerable<reagents_on_methodsCreateWithoutReagentInput>, Enumerable<reagents_on_methodsUncheckedCreateWithoutReagentInput>>
    connectOrCreate?: Enumerable<reagents_on_methodsCreateOrConnectWithoutReagentInput>
    createMany?: reagents_on_methodsCreateManyReagentInputEnvelope
    connect?: Enumerable<reagents_on_methodsWhereUniqueInput>
  }

  export type userUpdateOneRequiredWithoutReagentsNestedInput = {
    create?: XOR<userCreateWithoutReagentsInput, userUncheckedCreateWithoutReagentsInput>
    connectOrCreate?: userCreateOrConnectWithoutReagentsInput
    upsert?: userUpsertWithoutReagentsInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutReagentsInput, userUncheckedUpdateWithoutReagentsInput>
  }

  export type reagents_on_methodsUpdateManyWithoutReagentNestedInput = {
    create?: XOR<Enumerable<reagents_on_methodsCreateWithoutReagentInput>, Enumerable<reagents_on_methodsUncheckedCreateWithoutReagentInput>>
    connectOrCreate?: Enumerable<reagents_on_methodsCreateOrConnectWithoutReagentInput>
    upsert?: Enumerable<reagents_on_methodsUpsertWithWhereUniqueWithoutReagentInput>
    createMany?: reagents_on_methodsCreateManyReagentInputEnvelope
    set?: Enumerable<reagents_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<reagents_on_methodsWhereUniqueInput>
    delete?: Enumerable<reagents_on_methodsWhereUniqueInput>
    connect?: Enumerable<reagents_on_methodsWhereUniqueInput>
    update?: Enumerable<reagents_on_methodsUpdateWithWhereUniqueWithoutReagentInput>
    updateMany?: Enumerable<reagents_on_methodsUpdateManyWithWhereWithoutReagentInput>
    deleteMany?: Enumerable<reagents_on_methodsScalarWhereInput>
  }

  export type reagents_on_methodsUncheckedUpdateManyWithoutReagentNestedInput = {
    create?: XOR<Enumerable<reagents_on_methodsCreateWithoutReagentInput>, Enumerable<reagents_on_methodsUncheckedCreateWithoutReagentInput>>
    connectOrCreate?: Enumerable<reagents_on_methodsCreateOrConnectWithoutReagentInput>
    upsert?: Enumerable<reagents_on_methodsUpsertWithWhereUniqueWithoutReagentInput>
    createMany?: reagents_on_methodsCreateManyReagentInputEnvelope
    set?: Enumerable<reagents_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<reagents_on_methodsWhereUniqueInput>
    delete?: Enumerable<reagents_on_methodsWhereUniqueInput>
    connect?: Enumerable<reagents_on_methodsWhereUniqueInput>
    update?: Enumerable<reagents_on_methodsUpdateWithWhereUniqueWithoutReagentInput>
    updateMany?: Enumerable<reagents_on_methodsUpdateManyWithWhereWithoutReagentInput>
    deleteMany?: Enumerable<reagents_on_methodsScalarWhereInput>
  }

  export type userCreateNestedOneWithoutDevicesInput = {
    create?: XOR<userCreateWithoutDevicesInput, userUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: userCreateOrConnectWithoutDevicesInput
    connect?: userWhereUniqueInput
  }

  export type devices_on_methodsCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<devices_on_methodsCreateWithoutDeviceInput>, Enumerable<devices_on_methodsUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<devices_on_methodsCreateOrConnectWithoutDeviceInput>
    createMany?: devices_on_methodsCreateManyDeviceInputEnvelope
    connect?: Enumerable<devices_on_methodsWhereUniqueInput>
  }

  export type devices_on_methodsUncheckedCreateNestedManyWithoutDeviceInput = {
    create?: XOR<Enumerable<devices_on_methodsCreateWithoutDeviceInput>, Enumerable<devices_on_methodsUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<devices_on_methodsCreateOrConnectWithoutDeviceInput>
    createMany?: devices_on_methodsCreateManyDeviceInputEnvelope
    connect?: Enumerable<devices_on_methodsWhereUniqueInput>
  }

  export type userUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<userCreateWithoutDevicesInput, userUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: userCreateOrConnectWithoutDevicesInput
    upsert?: userUpsertWithoutDevicesInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutDevicesInput, userUncheckedUpdateWithoutDevicesInput>
  }

  export type devices_on_methodsUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<devices_on_methodsCreateWithoutDeviceInput>, Enumerable<devices_on_methodsUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<devices_on_methodsCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<devices_on_methodsUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: devices_on_methodsCreateManyDeviceInputEnvelope
    set?: Enumerable<devices_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<devices_on_methodsWhereUniqueInput>
    delete?: Enumerable<devices_on_methodsWhereUniqueInput>
    connect?: Enumerable<devices_on_methodsWhereUniqueInput>
    update?: Enumerable<devices_on_methodsUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<devices_on_methodsUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<devices_on_methodsScalarWhereInput>
  }

  export type devices_on_methodsUncheckedUpdateManyWithoutDeviceNestedInput = {
    create?: XOR<Enumerable<devices_on_methodsCreateWithoutDeviceInput>, Enumerable<devices_on_methodsUncheckedCreateWithoutDeviceInput>>
    connectOrCreate?: Enumerable<devices_on_methodsCreateOrConnectWithoutDeviceInput>
    upsert?: Enumerable<devices_on_methodsUpsertWithWhereUniqueWithoutDeviceInput>
    createMany?: devices_on_methodsCreateManyDeviceInputEnvelope
    set?: Enumerable<devices_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<devices_on_methodsWhereUniqueInput>
    delete?: Enumerable<devices_on_methodsWhereUniqueInput>
    connect?: Enumerable<devices_on_methodsWhereUniqueInput>
    update?: Enumerable<devices_on_methodsUpdateWithWhereUniqueWithoutDeviceInput>
    updateMany?: Enumerable<devices_on_methodsUpdateManyWithWhereWithoutDeviceInput>
    deleteMany?: Enumerable<devices_on_methodsScalarWhereInput>
  }

  export type methodCreatesectionsInput = {
    set: Enumerable<string>
  }

  export type userCreateNestedOneWithoutCreated_methodsInput = {
    create?: XOR<userCreateWithoutCreated_methodsInput, userUncheckedCreateWithoutCreated_methodsInput>
    connectOrCreate?: userCreateOrConnectWithoutCreated_methodsInput
    connect?: userWhereUniqueInput
  }

  export type user_on_methodsCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<user_on_methodsCreateWithoutMethodInput>, Enumerable<user_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<user_on_methodsCreateOrConnectWithoutMethodInput>
    createMany?: user_on_methodsCreateManyMethodInputEnvelope
    connect?: Enumerable<user_on_methodsWhereUniqueInput>
  }

  export type categoryCreateNestedOneWithoutMethodsInput = {
    create?: XOR<categoryCreateWithoutMethodsInput, categoryUncheckedCreateWithoutMethodsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutMethodsInput
    connect?: categoryWhereUniqueInput
  }

  export type reagents_on_methodsCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<reagents_on_methodsCreateWithoutMethodInput>, Enumerable<reagents_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<reagents_on_methodsCreateOrConnectWithoutMethodInput>
    createMany?: reagents_on_methodsCreateManyMethodInputEnvelope
    connect?: Enumerable<reagents_on_methodsWhereUniqueInput>
  }

  export type devices_on_methodsCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<devices_on_methodsCreateWithoutMethodInput>, Enumerable<devices_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<devices_on_methodsCreateOrConnectWithoutMethodInput>
    createMany?: devices_on_methodsCreateManyMethodInputEnvelope
    connect?: Enumerable<devices_on_methodsWhereUniqueInput>
  }

  export type method_sampleCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<method_sampleCreateWithoutMethodInput>, Enumerable<method_sampleUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<method_sampleCreateOrConnectWithoutMethodInput>
    createMany?: method_sampleCreateManyMethodInputEnvelope
    connect?: Enumerable<method_sampleWhereUniqueInput>
  }

  export type method_stepCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<method_stepCreateWithoutMethodInput>, Enumerable<method_stepUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<method_stepCreateOrConnectWithoutMethodInput>
    createMany?: method_stepCreateManyMethodInputEnvelope
    connect?: Enumerable<method_stepWhereUniqueInput>
  }

  export type commentCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<commentCreateWithoutMethodInput>, Enumerable<commentUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutMethodInput>
    createMany?: commentCreateManyMethodInputEnvelope
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type user_on_methodsUncheckedCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<user_on_methodsCreateWithoutMethodInput>, Enumerable<user_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<user_on_methodsCreateOrConnectWithoutMethodInput>
    createMany?: user_on_methodsCreateManyMethodInputEnvelope
    connect?: Enumerable<user_on_methodsWhereUniqueInput>
  }

  export type reagents_on_methodsUncheckedCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<reagents_on_methodsCreateWithoutMethodInput>, Enumerable<reagents_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<reagents_on_methodsCreateOrConnectWithoutMethodInput>
    createMany?: reagents_on_methodsCreateManyMethodInputEnvelope
    connect?: Enumerable<reagents_on_methodsWhereUniqueInput>
  }

  export type devices_on_methodsUncheckedCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<devices_on_methodsCreateWithoutMethodInput>, Enumerable<devices_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<devices_on_methodsCreateOrConnectWithoutMethodInput>
    createMany?: devices_on_methodsCreateManyMethodInputEnvelope
    connect?: Enumerable<devices_on_methodsWhereUniqueInput>
  }

  export type method_sampleUncheckedCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<method_sampleCreateWithoutMethodInput>, Enumerable<method_sampleUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<method_sampleCreateOrConnectWithoutMethodInput>
    createMany?: method_sampleCreateManyMethodInputEnvelope
    connect?: Enumerable<method_sampleWhereUniqueInput>
  }

  export type method_stepUncheckedCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<method_stepCreateWithoutMethodInput>, Enumerable<method_stepUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<method_stepCreateOrConnectWithoutMethodInput>
    createMany?: method_stepCreateManyMethodInputEnvelope
    connect?: Enumerable<method_stepWhereUniqueInput>
  }

  export type commentUncheckedCreateNestedManyWithoutMethodInput = {
    create?: XOR<Enumerable<commentCreateWithoutMethodInput>, Enumerable<commentUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutMethodInput>
    createMany?: commentCreateManyMethodInputEnvelope
    connect?: Enumerable<commentWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type methodUpdatesectionsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type userUpdateOneRequiredWithoutCreated_methodsNestedInput = {
    create?: XOR<userCreateWithoutCreated_methodsInput, userUncheckedCreateWithoutCreated_methodsInput>
    connectOrCreate?: userCreateOrConnectWithoutCreated_methodsInput
    upsert?: userUpsertWithoutCreated_methodsInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutCreated_methodsInput, userUncheckedUpdateWithoutCreated_methodsInput>
  }

  export type user_on_methodsUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<user_on_methodsCreateWithoutMethodInput>, Enumerable<user_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<user_on_methodsCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<user_on_methodsUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: user_on_methodsCreateManyMethodInputEnvelope
    set?: Enumerable<user_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<user_on_methodsWhereUniqueInput>
    delete?: Enumerable<user_on_methodsWhereUniqueInput>
    connect?: Enumerable<user_on_methodsWhereUniqueInput>
    update?: Enumerable<user_on_methodsUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<user_on_methodsUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<user_on_methodsScalarWhereInput>
  }

  export type categoryUpdateOneWithoutMethodsNestedInput = {
    create?: XOR<categoryCreateWithoutMethodsInput, categoryUncheckedCreateWithoutMethodsInput>
    connectOrCreate?: categoryCreateOrConnectWithoutMethodsInput
    upsert?: categoryUpsertWithoutMethodsInput
    disconnect?: boolean
    delete?: boolean
    connect?: categoryWhereUniqueInput
    update?: XOR<categoryUpdateWithoutMethodsInput, categoryUncheckedUpdateWithoutMethodsInput>
  }

  export type reagents_on_methodsUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<reagents_on_methodsCreateWithoutMethodInput>, Enumerable<reagents_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<reagents_on_methodsCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<reagents_on_methodsUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: reagents_on_methodsCreateManyMethodInputEnvelope
    set?: Enumerable<reagents_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<reagents_on_methodsWhereUniqueInput>
    delete?: Enumerable<reagents_on_methodsWhereUniqueInput>
    connect?: Enumerable<reagents_on_methodsWhereUniqueInput>
    update?: Enumerable<reagents_on_methodsUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<reagents_on_methodsUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<reagents_on_methodsScalarWhereInput>
  }

  export type devices_on_methodsUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<devices_on_methodsCreateWithoutMethodInput>, Enumerable<devices_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<devices_on_methodsCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<devices_on_methodsUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: devices_on_methodsCreateManyMethodInputEnvelope
    set?: Enumerable<devices_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<devices_on_methodsWhereUniqueInput>
    delete?: Enumerable<devices_on_methodsWhereUniqueInput>
    connect?: Enumerable<devices_on_methodsWhereUniqueInput>
    update?: Enumerable<devices_on_methodsUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<devices_on_methodsUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<devices_on_methodsScalarWhereInput>
  }

  export type method_sampleUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<method_sampleCreateWithoutMethodInput>, Enumerable<method_sampleUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<method_sampleCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<method_sampleUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: method_sampleCreateManyMethodInputEnvelope
    set?: Enumerable<method_sampleWhereUniqueInput>
    disconnect?: Enumerable<method_sampleWhereUniqueInput>
    delete?: Enumerable<method_sampleWhereUniqueInput>
    connect?: Enumerable<method_sampleWhereUniqueInput>
    update?: Enumerable<method_sampleUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<method_sampleUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<method_sampleScalarWhereInput>
  }

  export type method_stepUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<method_stepCreateWithoutMethodInput>, Enumerable<method_stepUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<method_stepCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<method_stepUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: method_stepCreateManyMethodInputEnvelope
    set?: Enumerable<method_stepWhereUniqueInput>
    disconnect?: Enumerable<method_stepWhereUniqueInput>
    delete?: Enumerable<method_stepWhereUniqueInput>
    connect?: Enumerable<method_stepWhereUniqueInput>
    update?: Enumerable<method_stepUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<method_stepUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<method_stepScalarWhereInput>
  }

  export type commentUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutMethodInput>, Enumerable<commentUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: commentCreateManyMethodInputEnvelope
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type user_on_methodsUncheckedUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<user_on_methodsCreateWithoutMethodInput>, Enumerable<user_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<user_on_methodsCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<user_on_methodsUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: user_on_methodsCreateManyMethodInputEnvelope
    set?: Enumerable<user_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<user_on_methodsWhereUniqueInput>
    delete?: Enumerable<user_on_methodsWhereUniqueInput>
    connect?: Enumerable<user_on_methodsWhereUniqueInput>
    update?: Enumerable<user_on_methodsUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<user_on_methodsUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<user_on_methodsScalarWhereInput>
  }

  export type reagents_on_methodsUncheckedUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<reagents_on_methodsCreateWithoutMethodInput>, Enumerable<reagents_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<reagents_on_methodsCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<reagents_on_methodsUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: reagents_on_methodsCreateManyMethodInputEnvelope
    set?: Enumerable<reagents_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<reagents_on_methodsWhereUniqueInput>
    delete?: Enumerable<reagents_on_methodsWhereUniqueInput>
    connect?: Enumerable<reagents_on_methodsWhereUniqueInput>
    update?: Enumerable<reagents_on_methodsUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<reagents_on_methodsUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<reagents_on_methodsScalarWhereInput>
  }

  export type devices_on_methodsUncheckedUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<devices_on_methodsCreateWithoutMethodInput>, Enumerable<devices_on_methodsUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<devices_on_methodsCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<devices_on_methodsUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: devices_on_methodsCreateManyMethodInputEnvelope
    set?: Enumerable<devices_on_methodsWhereUniqueInput>
    disconnect?: Enumerable<devices_on_methodsWhereUniqueInput>
    delete?: Enumerable<devices_on_methodsWhereUniqueInput>
    connect?: Enumerable<devices_on_methodsWhereUniqueInput>
    update?: Enumerable<devices_on_methodsUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<devices_on_methodsUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<devices_on_methodsScalarWhereInput>
  }

  export type method_sampleUncheckedUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<method_sampleCreateWithoutMethodInput>, Enumerable<method_sampleUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<method_sampleCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<method_sampleUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: method_sampleCreateManyMethodInputEnvelope
    set?: Enumerable<method_sampleWhereUniqueInput>
    disconnect?: Enumerable<method_sampleWhereUniqueInput>
    delete?: Enumerable<method_sampleWhereUniqueInput>
    connect?: Enumerable<method_sampleWhereUniqueInput>
    update?: Enumerable<method_sampleUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<method_sampleUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<method_sampleScalarWhereInput>
  }

  export type method_stepUncheckedUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<method_stepCreateWithoutMethodInput>, Enumerable<method_stepUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<method_stepCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<method_stepUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: method_stepCreateManyMethodInputEnvelope
    set?: Enumerable<method_stepWhereUniqueInput>
    disconnect?: Enumerable<method_stepWhereUniqueInput>
    delete?: Enumerable<method_stepWhereUniqueInput>
    connect?: Enumerable<method_stepWhereUniqueInput>
    update?: Enumerable<method_stepUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<method_stepUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<method_stepScalarWhereInput>
  }

  export type commentUncheckedUpdateManyWithoutMethodNestedInput = {
    create?: XOR<Enumerable<commentCreateWithoutMethodInput>, Enumerable<commentUncheckedCreateWithoutMethodInput>>
    connectOrCreate?: Enumerable<commentCreateOrConnectWithoutMethodInput>
    upsert?: Enumerable<commentUpsertWithWhereUniqueWithoutMethodInput>
    createMany?: commentCreateManyMethodInputEnvelope
    set?: Enumerable<commentWhereUniqueInput>
    disconnect?: Enumerable<commentWhereUniqueInput>
    delete?: Enumerable<commentWhereUniqueInput>
    connect?: Enumerable<commentWhereUniqueInput>
    update?: Enumerable<commentUpdateWithWhereUniqueWithoutMethodInput>
    updateMany?: Enumerable<commentUpdateManyWithWhereWithoutMethodInput>
    deleteMany?: Enumerable<commentScalarWhereInput>
  }

  export type methodCreateNestedOneWithoutCommentsInput = {
    create?: XOR<methodCreateWithoutCommentsInput, methodUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: methodCreateOrConnectWithoutCommentsInput
    connect?: methodWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type methodUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<methodCreateWithoutCommentsInput, methodUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: methodCreateOrConnectWithoutCommentsInput
    upsert?: methodUpsertWithoutCommentsInput
    connect?: methodWhereUniqueInput
    update?: XOR<methodUpdateWithoutCommentsInput, methodUncheckedUpdateWithoutCommentsInput>
  }

  export type reagentCreateNestedOneWithoutMethodsInput = {
    create?: XOR<reagentCreateWithoutMethodsInput, reagentUncheckedCreateWithoutMethodsInput>
    connectOrCreate?: reagentCreateOrConnectWithoutMethodsInput
    connect?: reagentWhereUniqueInput
  }

  export type methodCreateNestedOneWithoutReagentsInput = {
    create?: XOR<methodCreateWithoutReagentsInput, methodUncheckedCreateWithoutReagentsInput>
    connectOrCreate?: methodCreateOrConnectWithoutReagentsInput
    connect?: methodWhereUniqueInput
  }

  export type reagentUpdateOneRequiredWithoutMethodsNestedInput = {
    create?: XOR<reagentCreateWithoutMethodsInput, reagentUncheckedCreateWithoutMethodsInput>
    connectOrCreate?: reagentCreateOrConnectWithoutMethodsInput
    upsert?: reagentUpsertWithoutMethodsInput
    connect?: reagentWhereUniqueInput
    update?: XOR<reagentUpdateWithoutMethodsInput, reagentUncheckedUpdateWithoutMethodsInput>
  }

  export type methodUpdateOneRequiredWithoutReagentsNestedInput = {
    create?: XOR<methodCreateWithoutReagentsInput, methodUncheckedCreateWithoutReagentsInput>
    connectOrCreate?: methodCreateOrConnectWithoutReagentsInput
    upsert?: methodUpsertWithoutReagentsInput
    connect?: methodWhereUniqueInput
    update?: XOR<methodUpdateWithoutReagentsInput, methodUncheckedUpdateWithoutReagentsInput>
  }

  export type deviceCreateNestedOneWithoutMethodsInput = {
    create?: XOR<deviceCreateWithoutMethodsInput, deviceUncheckedCreateWithoutMethodsInput>
    connectOrCreate?: deviceCreateOrConnectWithoutMethodsInput
    connect?: deviceWhereUniqueInput
  }

  export type methodCreateNestedOneWithoutDevicesInput = {
    create?: XOR<methodCreateWithoutDevicesInput, methodUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: methodCreateOrConnectWithoutDevicesInput
    connect?: methodWhereUniqueInput
  }

  export type deviceUpdateOneRequiredWithoutMethodsNestedInput = {
    create?: XOR<deviceCreateWithoutMethodsInput, deviceUncheckedCreateWithoutMethodsInput>
    connectOrCreate?: deviceCreateOrConnectWithoutMethodsInput
    upsert?: deviceUpsertWithoutMethodsInput
    connect?: deviceWhereUniqueInput
    update?: XOR<deviceUpdateWithoutMethodsInput, deviceUncheckedUpdateWithoutMethodsInput>
  }

  export type methodUpdateOneRequiredWithoutDevicesNestedInput = {
    create?: XOR<methodCreateWithoutDevicesInput, methodUncheckedCreateWithoutDevicesInput>
    connectOrCreate?: methodCreateOrConnectWithoutDevicesInput
    upsert?: methodUpsertWithoutDevicesInput
    connect?: methodWhereUniqueInput
    update?: XOR<methodUpdateWithoutDevicesInput, methodUncheckedUpdateWithoutDevicesInput>
  }

  export type methodCreateNestedOneWithoutMethod_stepsInput = {
    create?: XOR<methodCreateWithoutMethod_stepsInput, methodUncheckedCreateWithoutMethod_stepsInput>
    connectOrCreate?: methodCreateOrConnectWithoutMethod_stepsInput
    connect?: methodWhereUniqueInput
  }

  export type methodUpdateOneWithoutMethod_stepsNestedInput = {
    create?: XOR<methodCreateWithoutMethod_stepsInput, methodUncheckedCreateWithoutMethod_stepsInput>
    connectOrCreate?: methodCreateOrConnectWithoutMethod_stepsInput
    upsert?: methodUpsertWithoutMethod_stepsInput
    disconnect?: boolean
    delete?: boolean
    connect?: methodWhereUniqueInput
    update?: XOR<methodUpdateWithoutMethod_stepsInput, methodUncheckedUpdateWithoutMethod_stepsInput>
  }

  export type methodCreateNestedOneWithoutMethod_samplesInput = {
    create?: XOR<methodCreateWithoutMethod_samplesInput, methodUncheckedCreateWithoutMethod_samplesInput>
    connectOrCreate?: methodCreateOrConnectWithoutMethod_samplesInput
    connect?: methodWhereUniqueInput
  }

  export type methodUpdateOneRequiredWithoutMethod_samplesNestedInput = {
    create?: XOR<methodCreateWithoutMethod_samplesInput, methodUncheckedCreateWithoutMethod_samplesInput>
    connectOrCreate?: methodCreateOrConnectWithoutMethod_samplesInput
    upsert?: methodUpsertWithoutMethod_samplesInput
    connect?: methodWhereUniqueInput
    update?: XOR<methodUpdateWithoutMethod_samplesInput, methodUncheckedUpdateWithoutMethod_samplesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: Array<string>
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type categoryCreateWithoutUserInput = {
    name: string
    methods?: methodCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    methods?: methodUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryCreateOrConnectWithoutUserInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutUserInput, categoryUncheckedCreateWithoutUserInput>
  }

  export type categoryCreateManyUserInputEnvelope = {
    data: Enumerable<categoryCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type methodCreateWithoutCreatorInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    user?: user_on_methodsCreateNestedManyWithoutMethodInput
    category?: categoryCreateNestedOneWithoutMethodsInput
    reagents?: reagents_on_methodsCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleCreateNestedManyWithoutMethodInput
    method_steps?: method_stepCreateNestedManyWithoutMethodInput
    comments?: commentCreateNestedManyWithoutMethodInput
  }

  export type methodUncheckedCreateWithoutCreatorInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    user?: user_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    category_id?: number | null
    reagents?: reagents_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleUncheckedCreateNestedManyWithoutMethodInput
    method_steps?: method_stepUncheckedCreateNestedManyWithoutMethodInput
    comments?: commentUncheckedCreateNestedManyWithoutMethodInput
  }

  export type methodCreateOrConnectWithoutCreatorInput = {
    where: methodWhereUniqueInput
    create: XOR<methodCreateWithoutCreatorInput, methodUncheckedCreateWithoutCreatorInput>
  }

  export type methodCreateManyCreatorInputEnvelope = {
    data: Enumerable<methodCreateManyCreatorInput>
    skipDuplicates?: boolean
  }

  export type user_on_methodsCreateWithoutUserInput = {
    method: methodCreateNestedOneWithoutUserInput
  }

  export type user_on_methodsUncheckedCreateWithoutUserInput = {
    method_id: number
  }

  export type user_on_methodsCreateOrConnectWithoutUserInput = {
    where: user_on_methodsWhereUniqueInput
    create: XOR<user_on_methodsCreateWithoutUserInput, user_on_methodsUncheckedCreateWithoutUserInput>
  }

  export type user_on_methodsCreateManyUserInputEnvelope = {
    data: Enumerable<user_on_methodsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type reagentCreateWithoutUserInput = {
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    methods?: reagents_on_methodsCreateNestedManyWithoutReagentInput
  }

  export type reagentUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    methods?: reagents_on_methodsUncheckedCreateNestedManyWithoutReagentInput
  }

  export type reagentCreateOrConnectWithoutUserInput = {
    where: reagentWhereUniqueInput
    create: XOR<reagentCreateWithoutUserInput, reagentUncheckedCreateWithoutUserInput>
  }

  export type reagentCreateManyUserInputEnvelope = {
    data: Enumerable<reagentCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type deviceCreateWithoutUserInput = {
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    methods?: devices_on_methodsCreateNestedManyWithoutDeviceInput
  }

  export type deviceUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    methods?: devices_on_methodsUncheckedCreateNestedManyWithoutDeviceInput
  }

  export type deviceCreateOrConnectWithoutUserInput = {
    where: deviceWhereUniqueInput
    create: XOR<deviceCreateWithoutUserInput, deviceUncheckedCreateWithoutUserInput>
  }

  export type deviceCreateManyUserInputEnvelope = {
    data: Enumerable<deviceCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type categoryUpsertWithWhereUniqueWithoutUserInput = {
    where: categoryWhereUniqueInput
    update: XOR<categoryUpdateWithoutUserInput, categoryUncheckedUpdateWithoutUserInput>
    create: XOR<categoryCreateWithoutUserInput, categoryUncheckedCreateWithoutUserInput>
  }

  export type categoryUpdateWithWhereUniqueWithoutUserInput = {
    where: categoryWhereUniqueInput
    data: XOR<categoryUpdateWithoutUserInput, categoryUncheckedUpdateWithoutUserInput>
  }

  export type categoryUpdateManyWithWhereWithoutUserInput = {
    where: categoryScalarWhereInput
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type categoryScalarWhereInput = {
    AND?: Enumerable<categoryScalarWhereInput>
    OR?: Enumerable<categoryScalarWhereInput>
    NOT?: Enumerable<categoryScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    user_id?: IntFilter | number
  }

  export type methodUpsertWithWhereUniqueWithoutCreatorInput = {
    where: methodWhereUniqueInput
    update: XOR<methodUpdateWithoutCreatorInput, methodUncheckedUpdateWithoutCreatorInput>
    create: XOR<methodCreateWithoutCreatorInput, methodUncheckedCreateWithoutCreatorInput>
  }

  export type methodUpdateWithWhereUniqueWithoutCreatorInput = {
    where: methodWhereUniqueInput
    data: XOR<methodUpdateWithoutCreatorInput, methodUncheckedUpdateWithoutCreatorInput>
  }

  export type methodUpdateManyWithWhereWithoutCreatorInput = {
    where: methodScalarWhereInput
    data: XOR<methodUpdateManyMutationInput, methodUncheckedUpdateManyWithoutCreated_methodsInput>
  }

  export type methodScalarWhereInput = {
    AND?: Enumerable<methodScalarWhereInput>
    OR?: Enumerable<methodScalarWhereInput>
    NOT?: Enumerable<methodScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
    duration?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    sections?: StringNullableListFilter
    number_of_samples?: IntNullableFilter | number | null
    creator_id?: IntFilter | number
    category_id?: IntNullableFilter | number | null
  }

  export type user_on_methodsUpsertWithWhereUniqueWithoutUserInput = {
    where: user_on_methodsWhereUniqueInput
    update: XOR<user_on_methodsUpdateWithoutUserInput, user_on_methodsUncheckedUpdateWithoutUserInput>
    create: XOR<user_on_methodsCreateWithoutUserInput, user_on_methodsUncheckedCreateWithoutUserInput>
  }

  export type user_on_methodsUpdateWithWhereUniqueWithoutUserInput = {
    where: user_on_methodsWhereUniqueInput
    data: XOR<user_on_methodsUpdateWithoutUserInput, user_on_methodsUncheckedUpdateWithoutUserInput>
  }

  export type user_on_methodsUpdateManyWithWhereWithoutUserInput = {
    where: user_on_methodsScalarWhereInput
    data: XOR<user_on_methodsUpdateManyMutationInput, user_on_methodsUncheckedUpdateManyWithoutSafed_methodInput>
  }

  export type user_on_methodsScalarWhereInput = {
    AND?: Enumerable<user_on_methodsScalarWhereInput>
    OR?: Enumerable<user_on_methodsScalarWhereInput>
    NOT?: Enumerable<user_on_methodsScalarWhereInput>
    user_id?: IntFilter | number
    method_id?: IntFilter | number
  }

  export type reagentUpsertWithWhereUniqueWithoutUserInput = {
    where: reagentWhereUniqueInput
    update: XOR<reagentUpdateWithoutUserInput, reagentUncheckedUpdateWithoutUserInput>
    create: XOR<reagentCreateWithoutUserInput, reagentUncheckedCreateWithoutUserInput>
  }

  export type reagentUpdateWithWhereUniqueWithoutUserInput = {
    where: reagentWhereUniqueInput
    data: XOR<reagentUpdateWithoutUserInput, reagentUncheckedUpdateWithoutUserInput>
  }

  export type reagentUpdateManyWithWhereWithoutUserInput = {
    where: reagentScalarWhereInput
    data: XOR<reagentUpdateManyMutationInput, reagentUncheckedUpdateManyWithoutReagentsInput>
  }

  export type reagentScalarWhereInput = {
    AND?: Enumerable<reagentScalarWhereInput>
    OR?: Enumerable<reagentScalarWhereInput>
    NOT?: Enumerable<reagentScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    company?: StringFilter | string
    product_id?: StringNullableFilter | string | null
    link?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    user_id?: IntFilter | number
  }

  export type deviceUpsertWithWhereUniqueWithoutUserInput = {
    where: deviceWhereUniqueInput
    update: XOR<deviceUpdateWithoutUserInput, deviceUncheckedUpdateWithoutUserInput>
    create: XOR<deviceCreateWithoutUserInput, deviceUncheckedCreateWithoutUserInput>
  }

  export type deviceUpdateWithWhereUniqueWithoutUserInput = {
    where: deviceWhereUniqueInput
    data: XOR<deviceUpdateWithoutUserInput, deviceUncheckedUpdateWithoutUserInput>
  }

  export type deviceUpdateManyWithWhereWithoutUserInput = {
    where: deviceScalarWhereInput
    data: XOR<deviceUpdateManyMutationInput, deviceUncheckedUpdateManyWithoutDevicesInput>
  }

  export type deviceScalarWhereInput = {
    AND?: Enumerable<deviceScalarWhereInput>
    OR?: Enumerable<deviceScalarWhereInput>
    NOT?: Enumerable<deviceScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    company?: StringFilter | string
    product_id?: StringNullableFilter | string | null
    link?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    user_id?: IntFilter | number
  }

  export type userCreateWithoutSafed_methodInput = {
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    categories?: categoryCreateNestedManyWithoutUserInput
    created_methods?: methodCreateNestedManyWithoutCreatorInput
    reagents?: reagentCreateNestedManyWithoutUserInput
    devices?: deviceCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutSafed_methodInput = {
    id?: number
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    categories?: categoryUncheckedCreateNestedManyWithoutUserInput
    created_methods?: methodUncheckedCreateNestedManyWithoutCreatorInput
    reagents?: reagentUncheckedCreateNestedManyWithoutUserInput
    devices?: deviceUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutSafed_methodInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutSafed_methodInput, userUncheckedCreateWithoutSafed_methodInput>
  }

  export type methodCreateWithoutUserInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator: userCreateNestedOneWithoutCreated_methodsInput
    category?: categoryCreateNestedOneWithoutMethodsInput
    reagents?: reagents_on_methodsCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleCreateNestedManyWithoutMethodInput
    method_steps?: method_stepCreateNestedManyWithoutMethodInput
    comments?: commentCreateNestedManyWithoutMethodInput
  }

  export type methodUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator_id: number
    category_id?: number | null
    reagents?: reagents_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleUncheckedCreateNestedManyWithoutMethodInput
    method_steps?: method_stepUncheckedCreateNestedManyWithoutMethodInput
    comments?: commentUncheckedCreateNestedManyWithoutMethodInput
  }

  export type methodCreateOrConnectWithoutUserInput = {
    where: methodWhereUniqueInput
    create: XOR<methodCreateWithoutUserInput, methodUncheckedCreateWithoutUserInput>
  }

  export type userUpsertWithoutSafed_methodInput = {
    update: XOR<userUpdateWithoutSafed_methodInput, userUncheckedUpdateWithoutSafed_methodInput>
    create: XOR<userCreateWithoutSafed_methodInput, userUncheckedCreateWithoutSafed_methodInput>
  }

  export type userUpdateWithoutSafed_methodInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: categoryUpdateManyWithoutUserNestedInput
    created_methods?: methodUpdateManyWithoutCreatorNestedInput
    reagents?: reagentUpdateManyWithoutUserNestedInput
    devices?: deviceUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutSafed_methodInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: categoryUncheckedUpdateManyWithoutUserNestedInput
    created_methods?: methodUncheckedUpdateManyWithoutCreatorNestedInput
    reagents?: reagentUncheckedUpdateManyWithoutUserNestedInput
    devices?: deviceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type methodUpsertWithoutUserInput = {
    update: XOR<methodUpdateWithoutUserInput, methodUncheckedUpdateWithoutUserInput>
    create: XOR<methodCreateWithoutUserInput, methodUncheckedCreateWithoutUserInput>
  }

  export type methodUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator?: userUpdateOneRequiredWithoutCreated_methodsNestedInput
    category?: categoryUpdateOneWithoutMethodsNestedInput
    reagents?: reagents_on_methodsUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUpdateManyWithoutMethodNestedInput
    comments?: commentUpdateManyWithoutMethodNestedInput
  }

  export type methodUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator_id?: IntFieldUpdateOperationsInput | number
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    reagents?: reagents_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUncheckedUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUncheckedUpdateManyWithoutMethodNestedInput
    comments?: commentUncheckedUpdateManyWithoutMethodNestedInput
  }

  export type methodCreateWithoutCategoryInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator: userCreateNestedOneWithoutCreated_methodsInput
    user?: user_on_methodsCreateNestedManyWithoutMethodInput
    reagents?: reagents_on_methodsCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleCreateNestedManyWithoutMethodInput
    method_steps?: method_stepCreateNestedManyWithoutMethodInput
    comments?: commentCreateNestedManyWithoutMethodInput
  }

  export type methodUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator_id: number
    user?: user_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    reagents?: reagents_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleUncheckedCreateNestedManyWithoutMethodInput
    method_steps?: method_stepUncheckedCreateNestedManyWithoutMethodInput
    comments?: commentUncheckedCreateNestedManyWithoutMethodInput
  }

  export type methodCreateOrConnectWithoutCategoryInput = {
    where: methodWhereUniqueInput
    create: XOR<methodCreateWithoutCategoryInput, methodUncheckedCreateWithoutCategoryInput>
  }

  export type methodCreateManyCategoryInputEnvelope = {
    data: Enumerable<methodCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type userCreateWithoutCategoriesInput = {
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    created_methods?: methodCreateNestedManyWithoutCreatorInput
    safed_method?: user_on_methodsCreateNestedManyWithoutUserInput
    reagents?: reagentCreateNestedManyWithoutUserInput
    devices?: deviceCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutCategoriesInput = {
    id?: number
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    created_methods?: methodUncheckedCreateNestedManyWithoutCreatorInput
    safed_method?: user_on_methodsUncheckedCreateNestedManyWithoutUserInput
    reagents?: reagentUncheckedCreateNestedManyWithoutUserInput
    devices?: deviceUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutCategoriesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCategoriesInput, userUncheckedCreateWithoutCategoriesInput>
  }

  export type methodUpsertWithWhereUniqueWithoutCategoryInput = {
    where: methodWhereUniqueInput
    update: XOR<methodUpdateWithoutCategoryInput, methodUncheckedUpdateWithoutCategoryInput>
    create: XOR<methodCreateWithoutCategoryInput, methodUncheckedCreateWithoutCategoryInput>
  }

  export type methodUpdateWithWhereUniqueWithoutCategoryInput = {
    where: methodWhereUniqueInput
    data: XOR<methodUpdateWithoutCategoryInput, methodUncheckedUpdateWithoutCategoryInput>
  }

  export type methodUpdateManyWithWhereWithoutCategoryInput = {
    where: methodScalarWhereInput
    data: XOR<methodUpdateManyMutationInput, methodUncheckedUpdateManyWithoutMethodsInput>
  }

  export type userUpsertWithoutCategoriesInput = {
    update: XOR<userUpdateWithoutCategoriesInput, userUncheckedUpdateWithoutCategoriesInput>
    create: XOR<userCreateWithoutCategoriesInput, userUncheckedCreateWithoutCategoriesInput>
  }

  export type userUpdateWithoutCategoriesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    created_methods?: methodUpdateManyWithoutCreatorNestedInput
    safed_method?: user_on_methodsUpdateManyWithoutUserNestedInput
    reagents?: reagentUpdateManyWithoutUserNestedInput
    devices?: deviceUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    created_methods?: methodUncheckedUpdateManyWithoutCreatorNestedInput
    safed_method?: user_on_methodsUncheckedUpdateManyWithoutUserNestedInput
    reagents?: reagentUncheckedUpdateManyWithoutUserNestedInput
    devices?: deviceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateWithoutReagentsInput = {
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    categories?: categoryCreateNestedManyWithoutUserInput
    created_methods?: methodCreateNestedManyWithoutCreatorInput
    safed_method?: user_on_methodsCreateNestedManyWithoutUserInput
    devices?: deviceCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutReagentsInput = {
    id?: number
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    categories?: categoryUncheckedCreateNestedManyWithoutUserInput
    created_methods?: methodUncheckedCreateNestedManyWithoutCreatorInput
    safed_method?: user_on_methodsUncheckedCreateNestedManyWithoutUserInput
    devices?: deviceUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutReagentsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutReagentsInput, userUncheckedCreateWithoutReagentsInput>
  }

  export type reagents_on_methodsCreateWithoutReagentInput = {
    method: methodCreateNestedOneWithoutReagentsInput
    amount?: string | null
  }

  export type reagents_on_methodsUncheckedCreateWithoutReagentInput = {
    method_id: number
    amount?: string | null
  }

  export type reagents_on_methodsCreateOrConnectWithoutReagentInput = {
    where: reagents_on_methodsWhereUniqueInput
    create: XOR<reagents_on_methodsCreateWithoutReagentInput, reagents_on_methodsUncheckedCreateWithoutReagentInput>
  }

  export type reagents_on_methodsCreateManyReagentInputEnvelope = {
    data: Enumerable<reagents_on_methodsCreateManyReagentInput>
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutReagentsInput = {
    update: XOR<userUpdateWithoutReagentsInput, userUncheckedUpdateWithoutReagentsInput>
    create: XOR<userCreateWithoutReagentsInput, userUncheckedCreateWithoutReagentsInput>
  }

  export type userUpdateWithoutReagentsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: categoryUpdateManyWithoutUserNestedInput
    created_methods?: methodUpdateManyWithoutCreatorNestedInput
    safed_method?: user_on_methodsUpdateManyWithoutUserNestedInput
    devices?: deviceUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutReagentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: categoryUncheckedUpdateManyWithoutUserNestedInput
    created_methods?: methodUncheckedUpdateManyWithoutCreatorNestedInput
    safed_method?: user_on_methodsUncheckedUpdateManyWithoutUserNestedInput
    devices?: deviceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type reagents_on_methodsUpsertWithWhereUniqueWithoutReagentInput = {
    where: reagents_on_methodsWhereUniqueInput
    update: XOR<reagents_on_methodsUpdateWithoutReagentInput, reagents_on_methodsUncheckedUpdateWithoutReagentInput>
    create: XOR<reagents_on_methodsCreateWithoutReagentInput, reagents_on_methodsUncheckedCreateWithoutReagentInput>
  }

  export type reagents_on_methodsUpdateWithWhereUniqueWithoutReagentInput = {
    where: reagents_on_methodsWhereUniqueInput
    data: XOR<reagents_on_methodsUpdateWithoutReagentInput, reagents_on_methodsUncheckedUpdateWithoutReagentInput>
  }

  export type reagents_on_methodsUpdateManyWithWhereWithoutReagentInput = {
    where: reagents_on_methodsScalarWhereInput
    data: XOR<reagents_on_methodsUpdateManyMutationInput, reagents_on_methodsUncheckedUpdateManyWithoutMethodsInput>
  }

  export type reagents_on_methodsScalarWhereInput = {
    AND?: Enumerable<reagents_on_methodsScalarWhereInput>
    OR?: Enumerable<reagents_on_methodsScalarWhereInput>
    NOT?: Enumerable<reagents_on_methodsScalarWhereInput>
    reagent_id?: IntFilter | number
    method_id?: IntFilter | number
    amount?: StringNullableFilter | string | null
  }

  export type userCreateWithoutDevicesInput = {
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    categories?: categoryCreateNestedManyWithoutUserInput
    created_methods?: methodCreateNestedManyWithoutCreatorInput
    safed_method?: user_on_methodsCreateNestedManyWithoutUserInput
    reagents?: reagentCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutDevicesInput = {
    id?: number
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    categories?: categoryUncheckedCreateNestedManyWithoutUserInput
    created_methods?: methodUncheckedCreateNestedManyWithoutCreatorInput
    safed_method?: user_on_methodsUncheckedCreateNestedManyWithoutUserInput
    reagents?: reagentUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutDevicesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutDevicesInput, userUncheckedCreateWithoutDevicesInput>
  }

  export type devices_on_methodsCreateWithoutDeviceInput = {
    method: methodCreateNestedOneWithoutDevicesInput
  }

  export type devices_on_methodsUncheckedCreateWithoutDeviceInput = {
    method_id: number
  }

  export type devices_on_methodsCreateOrConnectWithoutDeviceInput = {
    where: devices_on_methodsWhereUniqueInput
    create: XOR<devices_on_methodsCreateWithoutDeviceInput, devices_on_methodsUncheckedCreateWithoutDeviceInput>
  }

  export type devices_on_methodsCreateManyDeviceInputEnvelope = {
    data: Enumerable<devices_on_methodsCreateManyDeviceInput>
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutDevicesInput = {
    update: XOR<userUpdateWithoutDevicesInput, userUncheckedUpdateWithoutDevicesInput>
    create: XOR<userCreateWithoutDevicesInput, userUncheckedCreateWithoutDevicesInput>
  }

  export type userUpdateWithoutDevicesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: categoryUpdateManyWithoutUserNestedInput
    created_methods?: methodUpdateManyWithoutCreatorNestedInput
    safed_method?: user_on_methodsUpdateManyWithoutUserNestedInput
    reagents?: reagentUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutDevicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: categoryUncheckedUpdateManyWithoutUserNestedInput
    created_methods?: methodUncheckedUpdateManyWithoutCreatorNestedInput
    safed_method?: user_on_methodsUncheckedUpdateManyWithoutUserNestedInput
    reagents?: reagentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type devices_on_methodsUpsertWithWhereUniqueWithoutDeviceInput = {
    where: devices_on_methodsWhereUniqueInput
    update: XOR<devices_on_methodsUpdateWithoutDeviceInput, devices_on_methodsUncheckedUpdateWithoutDeviceInput>
    create: XOR<devices_on_methodsCreateWithoutDeviceInput, devices_on_methodsUncheckedCreateWithoutDeviceInput>
  }

  export type devices_on_methodsUpdateWithWhereUniqueWithoutDeviceInput = {
    where: devices_on_methodsWhereUniqueInput
    data: XOR<devices_on_methodsUpdateWithoutDeviceInput, devices_on_methodsUncheckedUpdateWithoutDeviceInput>
  }

  export type devices_on_methodsUpdateManyWithWhereWithoutDeviceInput = {
    where: devices_on_methodsScalarWhereInput
    data: XOR<devices_on_methodsUpdateManyMutationInput, devices_on_methodsUncheckedUpdateManyWithoutMethodsInput>
  }

  export type devices_on_methodsScalarWhereInput = {
    AND?: Enumerable<devices_on_methodsScalarWhereInput>
    OR?: Enumerable<devices_on_methodsScalarWhereInput>
    NOT?: Enumerable<devices_on_methodsScalarWhereInput>
    device_id?: IntFilter | number
    method_id?: IntFilter | number
  }

  export type userCreateWithoutCreated_methodsInput = {
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    categories?: categoryCreateNestedManyWithoutUserInput
    safed_method?: user_on_methodsCreateNestedManyWithoutUserInput
    reagents?: reagentCreateNestedManyWithoutUserInput
    devices?: deviceCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutCreated_methodsInput = {
    id?: number
    username: string
    password: string
    first_name: string
    last_name: string
    expertise?: string | null
    categories?: categoryUncheckedCreateNestedManyWithoutUserInput
    safed_method?: user_on_methodsUncheckedCreateNestedManyWithoutUserInput
    reagents?: reagentUncheckedCreateNestedManyWithoutUserInput
    devices?: deviceUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutCreated_methodsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutCreated_methodsInput, userUncheckedCreateWithoutCreated_methodsInput>
  }

  export type user_on_methodsCreateWithoutMethodInput = {
    user: userCreateNestedOneWithoutSafed_methodInput
  }

  export type user_on_methodsUncheckedCreateWithoutMethodInput = {
    user_id: number
  }

  export type user_on_methodsCreateOrConnectWithoutMethodInput = {
    where: user_on_methodsWhereUniqueInput
    create: XOR<user_on_methodsCreateWithoutMethodInput, user_on_methodsUncheckedCreateWithoutMethodInput>
  }

  export type user_on_methodsCreateManyMethodInputEnvelope = {
    data: Enumerable<user_on_methodsCreateManyMethodInput>
    skipDuplicates?: boolean
  }

  export type categoryCreateWithoutMethodsInput = {
    name: string
    user: userCreateNestedOneWithoutCategoriesInput
  }

  export type categoryUncheckedCreateWithoutMethodsInput = {
    id?: number
    name: string
    user_id: number
  }

  export type categoryCreateOrConnectWithoutMethodsInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutMethodsInput, categoryUncheckedCreateWithoutMethodsInput>
  }

  export type reagents_on_methodsCreateWithoutMethodInput = {
    reagent: reagentCreateNestedOneWithoutMethodsInput
    amount?: string | null
  }

  export type reagents_on_methodsUncheckedCreateWithoutMethodInput = {
    reagent_id: number
    amount?: string | null
  }

  export type reagents_on_methodsCreateOrConnectWithoutMethodInput = {
    where: reagents_on_methodsWhereUniqueInput
    create: XOR<reagents_on_methodsCreateWithoutMethodInput, reagents_on_methodsUncheckedCreateWithoutMethodInput>
  }

  export type reagents_on_methodsCreateManyMethodInputEnvelope = {
    data: Enumerable<reagents_on_methodsCreateManyMethodInput>
    skipDuplicates?: boolean
  }

  export type devices_on_methodsCreateWithoutMethodInput = {
    device: deviceCreateNestedOneWithoutMethodsInput
  }

  export type devices_on_methodsUncheckedCreateWithoutMethodInput = {
    device_id: number
  }

  export type devices_on_methodsCreateOrConnectWithoutMethodInput = {
    where: devices_on_methodsWhereUniqueInput
    create: XOR<devices_on_methodsCreateWithoutMethodInput, devices_on_methodsUncheckedCreateWithoutMethodInput>
  }

  export type devices_on_methodsCreateManyMethodInputEnvelope = {
    data: Enumerable<devices_on_methodsCreateManyMethodInput>
    skipDuplicates?: boolean
  }

  export type method_sampleCreateWithoutMethodInput = {
    reference_number: number
    name?: string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
  }

  export type method_sampleUncheckedCreateWithoutMethodInput = {
    id?: number
    reference_number: number
    name?: string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
  }

  export type method_sampleCreateOrConnectWithoutMethodInput = {
    where: method_sampleWhereUniqueInput
    create: XOR<method_sampleCreateWithoutMethodInput, method_sampleUncheckedCreateWithoutMethodInput>
  }

  export type method_sampleCreateManyMethodInputEnvelope = {
    data: Enumerable<method_sampleCreateManyMethodInput>
    skipDuplicates?: boolean
  }

  export type method_stepCreateWithoutMethodInput = {
    number: number
    day: string
    time: string
    description: string
    temperature?: string | null
    duration?: string | null
    link?: string | null
  }

  export type method_stepUncheckedCreateWithoutMethodInput = {
    id?: number
    number: number
    day: string
    time: string
    description: string
    temperature?: string | null
    duration?: string | null
    link?: string | null
  }

  export type method_stepCreateOrConnectWithoutMethodInput = {
    where: method_stepWhereUniqueInput
    create: XOR<method_stepCreateWithoutMethodInput, method_stepUncheckedCreateWithoutMethodInput>
  }

  export type method_stepCreateManyMethodInputEnvelope = {
    data: Enumerable<method_stepCreateManyMethodInput>
    skipDuplicates?: boolean
  }

  export type commentCreateWithoutMethodInput = {
    content: string
    y_position: number
    x_position?: number | null
    is_important?: boolean | null
  }

  export type commentUncheckedCreateWithoutMethodInput = {
    id?: number
    content: string
    y_position: number
    x_position?: number | null
    is_important?: boolean | null
  }

  export type commentCreateOrConnectWithoutMethodInput = {
    where: commentWhereUniqueInput
    create: XOR<commentCreateWithoutMethodInput, commentUncheckedCreateWithoutMethodInput>
  }

  export type commentCreateManyMethodInputEnvelope = {
    data: Enumerable<commentCreateManyMethodInput>
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutCreated_methodsInput = {
    update: XOR<userUpdateWithoutCreated_methodsInput, userUncheckedUpdateWithoutCreated_methodsInput>
    create: XOR<userCreateWithoutCreated_methodsInput, userUncheckedCreateWithoutCreated_methodsInput>
  }

  export type userUpdateWithoutCreated_methodsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: categoryUpdateManyWithoutUserNestedInput
    safed_method?: user_on_methodsUpdateManyWithoutUserNestedInput
    reagents?: reagentUpdateManyWithoutUserNestedInput
    devices?: deviceUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutCreated_methodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    expertise?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: categoryUncheckedUpdateManyWithoutUserNestedInput
    safed_method?: user_on_methodsUncheckedUpdateManyWithoutUserNestedInput
    reagents?: reagentUncheckedUpdateManyWithoutUserNestedInput
    devices?: deviceUncheckedUpdateManyWithoutUserNestedInput
  }

  export type user_on_methodsUpsertWithWhereUniqueWithoutMethodInput = {
    where: user_on_methodsWhereUniqueInput
    update: XOR<user_on_methodsUpdateWithoutMethodInput, user_on_methodsUncheckedUpdateWithoutMethodInput>
    create: XOR<user_on_methodsCreateWithoutMethodInput, user_on_methodsUncheckedCreateWithoutMethodInput>
  }

  export type user_on_methodsUpdateWithWhereUniqueWithoutMethodInput = {
    where: user_on_methodsWhereUniqueInput
    data: XOR<user_on_methodsUpdateWithoutMethodInput, user_on_methodsUncheckedUpdateWithoutMethodInput>
  }

  export type user_on_methodsUpdateManyWithWhereWithoutMethodInput = {
    where: user_on_methodsScalarWhereInput
    data: XOR<user_on_methodsUpdateManyMutationInput, user_on_methodsUncheckedUpdateManyWithoutUserInput>
  }

  export type categoryUpsertWithoutMethodsInput = {
    update: XOR<categoryUpdateWithoutMethodsInput, categoryUncheckedUpdateWithoutMethodsInput>
    create: XOR<categoryCreateWithoutMethodsInput, categoryUncheckedCreateWithoutMethodsInput>
  }

  export type categoryUpdateWithoutMethodsInput = {
    name?: StringFieldUpdateOperationsInput | string
    user?: userUpdateOneRequiredWithoutCategoriesNestedInput
  }

  export type categoryUncheckedUpdateWithoutMethodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type reagents_on_methodsUpsertWithWhereUniqueWithoutMethodInput = {
    where: reagents_on_methodsWhereUniqueInput
    update: XOR<reagents_on_methodsUpdateWithoutMethodInput, reagents_on_methodsUncheckedUpdateWithoutMethodInput>
    create: XOR<reagents_on_methodsCreateWithoutMethodInput, reagents_on_methodsUncheckedCreateWithoutMethodInput>
  }

  export type reagents_on_methodsUpdateWithWhereUniqueWithoutMethodInput = {
    where: reagents_on_methodsWhereUniqueInput
    data: XOR<reagents_on_methodsUpdateWithoutMethodInput, reagents_on_methodsUncheckedUpdateWithoutMethodInput>
  }

  export type reagents_on_methodsUpdateManyWithWhereWithoutMethodInput = {
    where: reagents_on_methodsScalarWhereInput
    data: XOR<reagents_on_methodsUpdateManyMutationInput, reagents_on_methodsUncheckedUpdateManyWithoutReagentsInput>
  }

  export type devices_on_methodsUpsertWithWhereUniqueWithoutMethodInput = {
    where: devices_on_methodsWhereUniqueInput
    update: XOR<devices_on_methodsUpdateWithoutMethodInput, devices_on_methodsUncheckedUpdateWithoutMethodInput>
    create: XOR<devices_on_methodsCreateWithoutMethodInput, devices_on_methodsUncheckedCreateWithoutMethodInput>
  }

  export type devices_on_methodsUpdateWithWhereUniqueWithoutMethodInput = {
    where: devices_on_methodsWhereUniqueInput
    data: XOR<devices_on_methodsUpdateWithoutMethodInput, devices_on_methodsUncheckedUpdateWithoutMethodInput>
  }

  export type devices_on_methodsUpdateManyWithWhereWithoutMethodInput = {
    where: devices_on_methodsScalarWhereInput
    data: XOR<devices_on_methodsUpdateManyMutationInput, devices_on_methodsUncheckedUpdateManyWithoutDevicesInput>
  }

  export type method_sampleUpsertWithWhereUniqueWithoutMethodInput = {
    where: method_sampleWhereUniqueInput
    update: XOR<method_sampleUpdateWithoutMethodInput, method_sampleUncheckedUpdateWithoutMethodInput>
    create: XOR<method_sampleCreateWithoutMethodInput, method_sampleUncheckedCreateWithoutMethodInput>
  }

  export type method_sampleUpdateWithWhereUniqueWithoutMethodInput = {
    where: method_sampleWhereUniqueInput
    data: XOR<method_sampleUpdateWithoutMethodInput, method_sampleUncheckedUpdateWithoutMethodInput>
  }

  export type method_sampleUpdateManyWithWhereWithoutMethodInput = {
    where: method_sampleScalarWhereInput
    data: XOR<method_sampleUpdateManyMutationInput, method_sampleUncheckedUpdateManyWithoutMethod_samplesInput>
  }

  export type method_sampleScalarWhereInput = {
    AND?: Enumerable<method_sampleScalarWhereInput>
    OR?: Enumerable<method_sampleScalarWhereInput>
    NOT?: Enumerable<method_sampleScalarWhereInput>
    id?: IntFilter | number
    reference_number?: IntFilter | number
    name?: StringNullableFilter | string | null
    conditions?: JsonNullableFilter
    method_id?: IntFilter | number
  }

  export type method_stepUpsertWithWhereUniqueWithoutMethodInput = {
    where: method_stepWhereUniqueInput
    update: XOR<method_stepUpdateWithoutMethodInput, method_stepUncheckedUpdateWithoutMethodInput>
    create: XOR<method_stepCreateWithoutMethodInput, method_stepUncheckedCreateWithoutMethodInput>
  }

  export type method_stepUpdateWithWhereUniqueWithoutMethodInput = {
    where: method_stepWhereUniqueInput
    data: XOR<method_stepUpdateWithoutMethodInput, method_stepUncheckedUpdateWithoutMethodInput>
  }

  export type method_stepUpdateManyWithWhereWithoutMethodInput = {
    where: method_stepScalarWhereInput
    data: XOR<method_stepUpdateManyMutationInput, method_stepUncheckedUpdateManyWithoutMethod_stepsInput>
  }

  export type method_stepScalarWhereInput = {
    AND?: Enumerable<method_stepScalarWhereInput>
    OR?: Enumerable<method_stepScalarWhereInput>
    NOT?: Enumerable<method_stepScalarWhereInput>
    id?: IntFilter | number
    number?: IntFilter | number
    day?: StringFilter | string
    time?: StringFilter | string
    description?: StringFilter | string
    temperature?: StringNullableFilter | string | null
    duration?: StringNullableFilter | string | null
    link?: StringNullableFilter | string | null
    method_id?: IntNullableFilter | number | null
  }

  export type commentUpsertWithWhereUniqueWithoutMethodInput = {
    where: commentWhereUniqueInput
    update: XOR<commentUpdateWithoutMethodInput, commentUncheckedUpdateWithoutMethodInput>
    create: XOR<commentCreateWithoutMethodInput, commentUncheckedCreateWithoutMethodInput>
  }

  export type commentUpdateWithWhereUniqueWithoutMethodInput = {
    where: commentWhereUniqueInput
    data: XOR<commentUpdateWithoutMethodInput, commentUncheckedUpdateWithoutMethodInput>
  }

  export type commentUpdateManyWithWhereWithoutMethodInput = {
    where: commentScalarWhereInput
    data: XOR<commentUpdateManyMutationInput, commentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type commentScalarWhereInput = {
    AND?: Enumerable<commentScalarWhereInput>
    OR?: Enumerable<commentScalarWhereInput>
    NOT?: Enumerable<commentScalarWhereInput>
    id?: IntFilter | number
    content?: StringFilter | string
    y_position?: IntFilter | number
    x_position?: IntNullableFilter | number | null
    is_important?: BoolNullableFilter | boolean | null
    method_id?: IntFilter | number
  }

  export type methodCreateWithoutCommentsInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator: userCreateNestedOneWithoutCreated_methodsInput
    user?: user_on_methodsCreateNestedManyWithoutMethodInput
    category?: categoryCreateNestedOneWithoutMethodsInput
    reagents?: reagents_on_methodsCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleCreateNestedManyWithoutMethodInput
    method_steps?: method_stepCreateNestedManyWithoutMethodInput
  }

  export type methodUncheckedCreateWithoutCommentsInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator_id: number
    user?: user_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    category_id?: number | null
    reagents?: reagents_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleUncheckedCreateNestedManyWithoutMethodInput
    method_steps?: method_stepUncheckedCreateNestedManyWithoutMethodInput
  }

  export type methodCreateOrConnectWithoutCommentsInput = {
    where: methodWhereUniqueInput
    create: XOR<methodCreateWithoutCommentsInput, methodUncheckedCreateWithoutCommentsInput>
  }

  export type methodUpsertWithoutCommentsInput = {
    update: XOR<methodUpdateWithoutCommentsInput, methodUncheckedUpdateWithoutCommentsInput>
    create: XOR<methodCreateWithoutCommentsInput, methodUncheckedCreateWithoutCommentsInput>
  }

  export type methodUpdateWithoutCommentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator?: userUpdateOneRequiredWithoutCreated_methodsNestedInput
    user?: user_on_methodsUpdateManyWithoutMethodNestedInput
    category?: categoryUpdateOneWithoutMethodsNestedInput
    reagents?: reagents_on_methodsUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUpdateManyWithoutMethodNestedInput
  }

  export type methodUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator_id?: IntFieldUpdateOperationsInput | number
    user?: user_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    reagents?: reagents_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUncheckedUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUncheckedUpdateManyWithoutMethodNestedInput
  }

  export type reagentCreateWithoutMethodsInput = {
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    user: userCreateNestedOneWithoutReagentsInput
  }

  export type reagentUncheckedCreateWithoutMethodsInput = {
    id?: number
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    user_id: number
  }

  export type reagentCreateOrConnectWithoutMethodsInput = {
    where: reagentWhereUniqueInput
    create: XOR<reagentCreateWithoutMethodsInput, reagentUncheckedCreateWithoutMethodsInput>
  }

  export type methodCreateWithoutReagentsInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator: userCreateNestedOneWithoutCreated_methodsInput
    user?: user_on_methodsCreateNestedManyWithoutMethodInput
    category?: categoryCreateNestedOneWithoutMethodsInput
    devices?: devices_on_methodsCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleCreateNestedManyWithoutMethodInput
    method_steps?: method_stepCreateNestedManyWithoutMethodInput
    comments?: commentCreateNestedManyWithoutMethodInput
  }

  export type methodUncheckedCreateWithoutReagentsInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator_id: number
    user?: user_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    category_id?: number | null
    devices?: devices_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleUncheckedCreateNestedManyWithoutMethodInput
    method_steps?: method_stepUncheckedCreateNestedManyWithoutMethodInput
    comments?: commentUncheckedCreateNestedManyWithoutMethodInput
  }

  export type methodCreateOrConnectWithoutReagentsInput = {
    where: methodWhereUniqueInput
    create: XOR<methodCreateWithoutReagentsInput, methodUncheckedCreateWithoutReagentsInput>
  }

  export type reagentUpsertWithoutMethodsInput = {
    update: XOR<reagentUpdateWithoutMethodsInput, reagentUncheckedUpdateWithoutMethodsInput>
    create: XOR<reagentCreateWithoutMethodsInput, reagentUncheckedCreateWithoutMethodsInput>
  }

  export type reagentUpdateWithoutMethodsInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutReagentsNestedInput
  }

  export type reagentUncheckedUpdateWithoutMethodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type methodUpsertWithoutReagentsInput = {
    update: XOR<methodUpdateWithoutReagentsInput, methodUncheckedUpdateWithoutReagentsInput>
    create: XOR<methodCreateWithoutReagentsInput, methodUncheckedCreateWithoutReagentsInput>
  }

  export type methodUpdateWithoutReagentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator?: userUpdateOneRequiredWithoutCreated_methodsNestedInput
    user?: user_on_methodsUpdateManyWithoutMethodNestedInput
    category?: categoryUpdateOneWithoutMethodsNestedInput
    devices?: devices_on_methodsUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUpdateManyWithoutMethodNestedInput
    comments?: commentUpdateManyWithoutMethodNestedInput
  }

  export type methodUncheckedUpdateWithoutReagentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator_id?: IntFieldUpdateOperationsInput | number
    user?: user_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    devices?: devices_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUncheckedUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUncheckedUpdateManyWithoutMethodNestedInput
    comments?: commentUncheckedUpdateManyWithoutMethodNestedInput
  }

  export type deviceCreateWithoutMethodsInput = {
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    user: userCreateNestedOneWithoutDevicesInput
  }

  export type deviceUncheckedCreateWithoutMethodsInput = {
    id?: number
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
    user_id: number
  }

  export type deviceCreateOrConnectWithoutMethodsInput = {
    where: deviceWhereUniqueInput
    create: XOR<deviceCreateWithoutMethodsInput, deviceUncheckedCreateWithoutMethodsInput>
  }

  export type methodCreateWithoutDevicesInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator: userCreateNestedOneWithoutCreated_methodsInput
    user?: user_on_methodsCreateNestedManyWithoutMethodInput
    category?: categoryCreateNestedOneWithoutMethodsInput
    reagents?: reagents_on_methodsCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleCreateNestedManyWithoutMethodInput
    method_steps?: method_stepCreateNestedManyWithoutMethodInput
    comments?: commentCreateNestedManyWithoutMethodInput
  }

  export type methodUncheckedCreateWithoutDevicesInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator_id: number
    user?: user_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    category_id?: number | null
    reagents?: reagents_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleUncheckedCreateNestedManyWithoutMethodInput
    method_steps?: method_stepUncheckedCreateNestedManyWithoutMethodInput
    comments?: commentUncheckedCreateNestedManyWithoutMethodInput
  }

  export type methodCreateOrConnectWithoutDevicesInput = {
    where: methodWhereUniqueInput
    create: XOR<methodCreateWithoutDevicesInput, methodUncheckedCreateWithoutDevicesInput>
  }

  export type deviceUpsertWithoutMethodsInput = {
    update: XOR<deviceUpdateWithoutMethodsInput, deviceUncheckedUpdateWithoutMethodsInput>
    create: XOR<deviceCreateWithoutMethodsInput, deviceUncheckedCreateWithoutMethodsInput>
  }

  export type deviceUpdateWithoutMethodsInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    user?: userUpdateOneRequiredWithoutDevicesNestedInput
  }

  export type deviceUncheckedUpdateWithoutMethodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type methodUpsertWithoutDevicesInput = {
    update: XOR<methodUpdateWithoutDevicesInput, methodUncheckedUpdateWithoutDevicesInput>
    create: XOR<methodCreateWithoutDevicesInput, methodUncheckedCreateWithoutDevicesInput>
  }

  export type methodUpdateWithoutDevicesInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator?: userUpdateOneRequiredWithoutCreated_methodsNestedInput
    user?: user_on_methodsUpdateManyWithoutMethodNestedInput
    category?: categoryUpdateOneWithoutMethodsNestedInput
    reagents?: reagents_on_methodsUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUpdateManyWithoutMethodNestedInput
    comments?: commentUpdateManyWithoutMethodNestedInput
  }

  export type methodUncheckedUpdateWithoutDevicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator_id?: IntFieldUpdateOperationsInput | number
    user?: user_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    reagents?: reagents_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUncheckedUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUncheckedUpdateManyWithoutMethodNestedInput
    comments?: commentUncheckedUpdateManyWithoutMethodNestedInput
  }

  export type methodCreateWithoutMethod_stepsInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator: userCreateNestedOneWithoutCreated_methodsInput
    user?: user_on_methodsCreateNestedManyWithoutMethodInput
    category?: categoryCreateNestedOneWithoutMethodsInput
    reagents?: reagents_on_methodsCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleCreateNestedManyWithoutMethodInput
    comments?: commentCreateNestedManyWithoutMethodInput
  }

  export type methodUncheckedCreateWithoutMethod_stepsInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator_id: number
    user?: user_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    category_id?: number | null
    reagents?: reagents_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    method_samples?: method_sampleUncheckedCreateNestedManyWithoutMethodInput
    comments?: commentUncheckedCreateNestedManyWithoutMethodInput
  }

  export type methodCreateOrConnectWithoutMethod_stepsInput = {
    where: methodWhereUniqueInput
    create: XOR<methodCreateWithoutMethod_stepsInput, methodUncheckedCreateWithoutMethod_stepsInput>
  }

  export type methodUpsertWithoutMethod_stepsInput = {
    update: XOR<methodUpdateWithoutMethod_stepsInput, methodUncheckedUpdateWithoutMethod_stepsInput>
    create: XOR<methodCreateWithoutMethod_stepsInput, methodUncheckedCreateWithoutMethod_stepsInput>
  }

  export type methodUpdateWithoutMethod_stepsInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator?: userUpdateOneRequiredWithoutCreated_methodsNestedInput
    user?: user_on_methodsUpdateManyWithoutMethodNestedInput
    category?: categoryUpdateOneWithoutMethodsNestedInput
    reagents?: reagents_on_methodsUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUpdateManyWithoutMethodNestedInput
    comments?: commentUpdateManyWithoutMethodNestedInput
  }

  export type methodUncheckedUpdateWithoutMethod_stepsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator_id?: IntFieldUpdateOperationsInput | number
    user?: user_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    reagents?: reagents_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUncheckedUpdateManyWithoutMethodNestedInput
    comments?: commentUncheckedUpdateManyWithoutMethodNestedInput
  }

  export type methodCreateWithoutMethod_samplesInput = {
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator: userCreateNestedOneWithoutCreated_methodsInput
    user?: user_on_methodsCreateNestedManyWithoutMethodInput
    category?: categoryCreateNestedOneWithoutMethodsInput
    reagents?: reagents_on_methodsCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsCreateNestedManyWithoutMethodInput
    method_steps?: method_stepCreateNestedManyWithoutMethodInput
    comments?: commentCreateNestedManyWithoutMethodInput
  }

  export type methodUncheckedCreateWithoutMethod_samplesInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator_id: number
    user?: user_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    category_id?: number | null
    reagents?: reagents_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    devices?: devices_on_methodsUncheckedCreateNestedManyWithoutMethodInput
    method_steps?: method_stepUncheckedCreateNestedManyWithoutMethodInput
    comments?: commentUncheckedCreateNestedManyWithoutMethodInput
  }

  export type methodCreateOrConnectWithoutMethod_samplesInput = {
    where: methodWhereUniqueInput
    create: XOR<methodCreateWithoutMethod_samplesInput, methodUncheckedCreateWithoutMethod_samplesInput>
  }

  export type methodUpsertWithoutMethod_samplesInput = {
    update: XOR<methodUpdateWithoutMethod_samplesInput, methodUncheckedUpdateWithoutMethod_samplesInput>
    create: XOR<methodCreateWithoutMethod_samplesInput, methodUncheckedCreateWithoutMethod_samplesInput>
  }

  export type methodUpdateWithoutMethod_samplesInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator?: userUpdateOneRequiredWithoutCreated_methodsNestedInput
    user?: user_on_methodsUpdateManyWithoutMethodNestedInput
    category?: categoryUpdateOneWithoutMethodsNestedInput
    reagents?: reagents_on_methodsUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUpdateManyWithoutMethodNestedInput
    comments?: commentUpdateManyWithoutMethodNestedInput
  }

  export type methodUncheckedUpdateWithoutMethod_samplesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator_id?: IntFieldUpdateOperationsInput | number
    user?: user_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    reagents?: reagents_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUncheckedUpdateManyWithoutMethodNestedInput
    comments?: commentUncheckedUpdateManyWithoutMethodNestedInput
  }

  export type categoryCreateManyUserInput = {
    id?: number
    name: string
  }

  export type methodCreateManyCreatorInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    category_id?: number | null
  }

  export type user_on_methodsCreateManyUserInput = {
    method_id: number
  }

  export type reagentCreateManyUserInput = {
    id?: number
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
  }

  export type deviceCreateManyUserInput = {
    id?: number
    name: string
    company: string
    product_id?: string | null
    link?: string | null
    type?: string | null
  }

  export type categoryUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    methods?: methodUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    methods?: methodUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type methodUpdateWithoutCreatorInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    user?: user_on_methodsUpdateManyWithoutMethodNestedInput
    category?: categoryUpdateOneWithoutMethodsNestedInput
    reagents?: reagents_on_methodsUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUpdateManyWithoutMethodNestedInput
    comments?: commentUpdateManyWithoutMethodNestedInput
  }

  export type methodUncheckedUpdateWithoutCreatorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    user?: user_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
    reagents?: reagents_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUncheckedUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUncheckedUpdateManyWithoutMethodNestedInput
    comments?: commentUncheckedUpdateManyWithoutMethodNestedInput
  }

  export type methodUncheckedUpdateManyWithoutCreated_methodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    category_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type user_on_methodsUpdateWithoutUserInput = {
    method?: methodUpdateOneRequiredWithoutUserNestedInput
  }

  export type user_on_methodsUncheckedUpdateWithoutUserInput = {
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_on_methodsUncheckedUpdateManyWithoutSafed_methodInput = {
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type reagentUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    methods?: reagents_on_methodsUpdateManyWithoutReagentNestedInput
  }

  export type reagentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    methods?: reagents_on_methodsUncheckedUpdateManyWithoutReagentNestedInput
  }

  export type reagentUncheckedUpdateManyWithoutReagentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type deviceUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    methods?: devices_on_methodsUpdateManyWithoutDeviceNestedInput
  }

  export type deviceUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    methods?: devices_on_methodsUncheckedUpdateManyWithoutDeviceNestedInput
  }

  export type deviceUncheckedUpdateManyWithoutDevicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    product_id?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type methodCreateManyCategoryInput = {
    id?: number
    name: string
    created_at?: Date | string
    updated_at?: Date | string
    duration?: string | null
    description?: string | null
    sections?: methodCreatesectionsInput | Enumerable<string>
    number_of_samples?: number | null
    creator_id: number
  }

  export type methodUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator?: userUpdateOneRequiredWithoutCreated_methodsNestedInput
    user?: user_on_methodsUpdateManyWithoutMethodNestedInput
    reagents?: reagents_on_methodsUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUpdateManyWithoutMethodNestedInput
    comments?: commentUpdateManyWithoutMethodNestedInput
  }

  export type methodUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator_id?: IntFieldUpdateOperationsInput | number
    user?: user_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    reagents?: reagents_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    devices?: devices_on_methodsUncheckedUpdateManyWithoutMethodNestedInput
    method_samples?: method_sampleUncheckedUpdateManyWithoutMethodNestedInput
    method_steps?: method_stepUncheckedUpdateManyWithoutMethodNestedInput
    comments?: commentUncheckedUpdateManyWithoutMethodNestedInput
  }

  export type methodUncheckedUpdateManyWithoutMethodsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: methodUpdatesectionsInput | Enumerable<string>
    number_of_samples?: NullableIntFieldUpdateOperationsInput | number | null
    creator_id?: IntFieldUpdateOperationsInput | number
  }

  export type reagents_on_methodsCreateManyReagentInput = {
    method_id: number
    amount?: string | null
  }

  export type reagents_on_methodsUpdateWithoutReagentInput = {
    method?: methodUpdateOneRequiredWithoutReagentsNestedInput
    amount?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reagents_on_methodsUncheckedUpdateWithoutReagentInput = {
    method_id?: IntFieldUpdateOperationsInput | number
    amount?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reagents_on_methodsUncheckedUpdateManyWithoutMethodsInput = {
    method_id?: IntFieldUpdateOperationsInput | number
    amount?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type devices_on_methodsCreateManyDeviceInput = {
    method_id: number
  }

  export type devices_on_methodsUpdateWithoutDeviceInput = {
    method?: methodUpdateOneRequiredWithoutDevicesNestedInput
  }

  export type devices_on_methodsUncheckedUpdateWithoutDeviceInput = {
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type devices_on_methodsUncheckedUpdateManyWithoutMethodsInput = {
    method_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_on_methodsCreateManyMethodInput = {
    user_id: number
  }

  export type reagents_on_methodsCreateManyMethodInput = {
    reagent_id: number
    amount?: string | null
  }

  export type devices_on_methodsCreateManyMethodInput = {
    device_id: number
  }

  export type method_sampleCreateManyMethodInput = {
    id?: number
    reference_number: number
    name?: string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
  }

  export type method_stepCreateManyMethodInput = {
    id?: number
    number: number
    day: string
    time: string
    description: string
    temperature?: string | null
    duration?: string | null
    link?: string | null
  }

  export type commentCreateManyMethodInput = {
    id?: number
    content: string
    y_position: number
    x_position?: number | null
    is_important?: boolean | null
  }

  export type user_on_methodsUpdateWithoutMethodInput = {
    user?: userUpdateOneRequiredWithoutSafed_methodNestedInput
  }

  export type user_on_methodsUncheckedUpdateWithoutMethodInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type user_on_methodsUncheckedUpdateManyWithoutUserInput = {
    user_id?: IntFieldUpdateOperationsInput | number
  }

  export type reagents_on_methodsUpdateWithoutMethodInput = {
    reagent?: reagentUpdateOneRequiredWithoutMethodsNestedInput
    amount?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reagents_on_methodsUncheckedUpdateWithoutMethodInput = {
    reagent_id?: IntFieldUpdateOperationsInput | number
    amount?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type reagents_on_methodsUncheckedUpdateManyWithoutReagentsInput = {
    reagent_id?: IntFieldUpdateOperationsInput | number
    amount?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type devices_on_methodsUpdateWithoutMethodInput = {
    device?: deviceUpdateOneRequiredWithoutMethodsNestedInput
  }

  export type devices_on_methodsUncheckedUpdateWithoutMethodInput = {
    device_id?: IntFieldUpdateOperationsInput | number
  }

  export type devices_on_methodsUncheckedUpdateManyWithoutDevicesInput = {
    device_id?: IntFieldUpdateOperationsInput | number
  }

  export type method_sampleUpdateWithoutMethodInput = {
    reference_number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
  }

  export type method_sampleUncheckedUpdateWithoutMethodInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference_number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
  }

  export type method_sampleUncheckedUpdateManyWithoutMethod_samplesInput = {
    id?: IntFieldUpdateOperationsInput | number
    reference_number?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    conditions?: NullableJsonNullValueInput | InputJsonValue
  }

  export type method_stepUpdateWithoutMethodInput = {
    number?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type method_stepUncheckedUpdateWithoutMethodInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type method_stepUncheckedUpdateManyWithoutMethod_stepsInput = {
    id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    day?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type commentUpdateWithoutMethodInput = {
    content?: StringFieldUpdateOperationsInput | string
    y_position?: IntFieldUpdateOperationsInput | number
    x_position?: NullableIntFieldUpdateOperationsInput | number | null
    is_important?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type commentUncheckedUpdateWithoutMethodInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    y_position?: IntFieldUpdateOperationsInput | number
    x_position?: NullableIntFieldUpdateOperationsInput | number | null
    is_important?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type commentUncheckedUpdateManyWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    y_position?: IntFieldUpdateOperationsInput | number
    x_position?: NullableIntFieldUpdateOperationsInput | number | null
    is_important?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}