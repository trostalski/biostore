
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.5.0
 * Query Engine version: 0362da9eebca54d94c8ef5edd3b2e90af99ba452
 */
Prisma.prismaVersion = {
  client: "4.5.0",
  engine: "0362da9eebca54d94c8ef5edd3b2e90af99ba452"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  user_id: 'user_id'
});

exports.Prisma.CommentScalarFieldEnum = makeEnum({
  id: 'id',
  content: 'content',
  y_position: 'y_position',
  x_position: 'x_position',
  is_important: 'is_important',
  method_id: 'method_id'
});

exports.Prisma.DeviceScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  company: 'company',
  product_id: 'product_id',
  link: 'link',
  type: 'type',
  user_id: 'user_id'
});

exports.Prisma.Devices_on_methodsScalarFieldEnum = makeEnum({
  device_id: 'device_id',
  method_id: 'method_id'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
});

exports.Prisma.MethodScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  duration: 'duration',
  description: 'description',
  sections: 'sections',
  number_of_samples: 'number_of_samples',
  creator_id: 'creator_id',
  category_id: 'category_id'
});

exports.Prisma.Method_sampleScalarFieldEnum = makeEnum({
  id: 'id',
  reference_number: 'reference_number',
  name: 'name',
  conditions: 'conditions',
  method_id: 'method_id'
});

exports.Prisma.Method_stepScalarFieldEnum = makeEnum({
  id: 'id',
  number: 'number',
  day: 'day',
  time: 'time',
  description: 'description',
  temperature: 'temperature',
  duration: 'duration',
  link: 'link',
  method_id: 'method_id'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.ReagentScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  company: 'company',
  product_id: 'product_id',
  link: 'link',
  type: 'type',
  user_id: 'user_id'
});

exports.Prisma.Reagents_on_methodsScalarFieldEnum = makeEnum({
  reagent_id: 'reagent_id',
  method_id: 'method_id',
  amount: 'amount'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  password: 'password',
  first_name: 'first_name',
  last_name: 'last_name',
  expertise: 'expertise'
});

exports.Prisma.User_on_methodsScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  method_id: 'method_id'
});


exports.Prisma.ModelName = makeEnum({
  user: 'user',
  user_on_methods: 'user_on_methods',
  category: 'category',
  reagent: 'reagent',
  device: 'device',
  method: 'method',
  comment: 'comment',
  reagents_on_methods: 'reagents_on_methods',
  devices_on_methods: 'devices_on_methods',
  method_step: 'method_step',
  method_sample: 'method_sample'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
